Index: devtools/Site/site.config.m4
===================================================================
--- devtools/Site/site.config.m4	2005-04-25 11:33:21.000000000 -0400
+++ devtools/Site/site.config.m4	2005-06-03 15:24:42.000000000 -0400
@@ -0,0 +1,2 @@
+APPENDDEF(`confENVDEF', `-DMILTER -DSUPPORT_DNSSEC -DSM_CONF_SHM=0 -g')
+APPENDDEF(`confLIBS', `-lsres -lval -lcrypto')
Index: devtools/M4/header.m4
===================================================================
--- devtools/M4/header.m4	2005-05-04 12:11:31.000000000 -0400
+++ devtools/M4/header.m4	2005-06-03 15:27:35.000000000 -0400
@@ -25,7 +25,8 @@
 define(`confBEFORE', `')
 define(`confLIBDIRS', `')
 define(`confINCDIRS', `')
-define(`confLIBSEARCH', `db bind resolv 44bsd')
+dnl define(`confLIBSEARCH', `db bind resolv 44bsd')
+define(`confLIBSEARCH', `db 44bsd')
 define(`confLIBSEARCHPATH', `/lib /usr/lib /usr/shlib')
 define(`confSITECONFIG', `site.config')
 define(`confBUILDBIN', `${SRCDIR}/devtools/bin')
Index: libmilter/sm_gethost.c
===================================================================
--- libmilter/sm_gethost.c	2005-04-28 13:32:29.000000000 -0400
+++ libmilter/sm_gethost.c	2005-06-03 15:02:37.000000000 -0400
@@ -17,6 +17,10 @@
 #endif /* NETINET || NETINET6 */
 #include "libmilter.h"
 
+#ifdef SUPPORT_DNSSEC
+#include <val_api.h>
+#endif
+
 /*
 **  MI_GETHOSTBY{NAME,ADDR} -- compatibility routines for gethostbyXXX
 **
@@ -59,7 +63,15 @@
 		_res.options |= RES_USE_INET6;
 	}
 	SM_SET_H_ERRNO(0);
+
+#ifdef SUPPORT_DNSSEC
+	do {
+	    int dnssec_status = INTERNAL_ERROR;
+	    h = val_gethostbyname(name, &dnssec_status);
+	} while (0);
+#else
 	h = gethostbyname(name);
+#endif
 	if (family == AF_INET6 && !resv6)
 		_res.options &= ~RES_USE_INET6;
 	*err = h_errno;
@@ -110,7 +122,14 @@
 	h = getipnodebyname(name, family, flags, &err);
 	SM_SET_H_ERRNO(err);
 # else /* NETINET6 */
+#ifdef SUPPORT_DNSSEC
+	do {
+	    int dnssec_status = INTERNAL_ERROR;
+	    h = val_gethostbyname(name, &dnssec_status);
+	} while (0);
+#else
 	h = gethostbyname(name);
+#endif
 # endif /* NETINET6 */
 
 #endif /* (SOLARIS > 10000 && SOLARIS < 20400) || (defined(SOLARIS) && SOLARIS < 204) || (defined(sony_news) && defined(__svr4)) */
Index: doc/op/op.me
===================================================================
--- doc/op/op.me	2005-03-03 12:11:58.000000000 -0500
+++ doc/op/op.me	2005-03-03 12:27:45.000000000 -0500
@@ -3487,6 +3487,11 @@
 (a temporary failure)
 on T_AAAA (IPv6) lookups
 during hostname canonification.
+Use
+.q RequireDNSSEC
+to require DNSSEC validation of responses to DNS queries in
+sendmail.  If this option is set, a failure in DNSSEC validation
+is treated as a failure in the name lookup.
 Notice: it might be necessary to apply the same (or similar) options to
 .i submit.cf
 too.
Index: sendmail/conf.c
===================================================================
--- sendmail/conf.c	2005-04-25 11:32:20.000000000 -0400
+++ sendmail/conf.c	2005-06-03 15:05:54.000000000 -0400
@@ -31,6 +31,10 @@
 # include <ulimit.h>
 #endif /* HASULIMIT && defined(HPUX11) */
 
+#ifdef SUPPORT_DNSSEC
+#include <val_api.h>
+#endif
+
 static void	setupmaps __P((void));
 static void	setupmailers __P((void));
 static void	setupqueues __P((void));
@@ -4212,7 +4216,17 @@
 		_res.options |= RES_USE_INET6;
 	}
 	SM_SET_H_ERRNO(0);
+#ifdef SUPPORT_DNSSEC
+	{
+	    int dnssec_status = INTERNAL_ERROR;
+	    h = val_gethostbyname(name, &dnssec_status);
+	    if (RequireDNSSEC) {
+		/* XXX ??? */
+	    }
+	}
+#else
 	h = gethostbyname(name);
+#endif
 	if (!resv6)
 		_res.options &= ~RES_USE_INET6;
 	*err = h_errno;
@@ -4292,7 +4306,17 @@
 	h = getipnodebyname(name, family, flags, &err);
 	SM_SET_H_ERRNO(err);
 # else /* NETINET6 */
+#ifdef SUPPORT_DNSSEC
+	{
+	    int dnssec_status = INTERNAL_ERROR;
+	    h = val_gethostbyname(name, &dnssec_status);
+	    if (RequireDNSSEC) {
+		/* XXX ??? */
+	    }
+	}
+#else
 	h = gethostbyname(name);
+#endif
 # endif /* NETINET6 */
 
 	save_errno = errno;
@@ -4332,7 +4356,17 @@
 				SM_SET_H_ERRNO(err);
 				save_errno = errno;
 # else /* NETINET6 */
+#ifdef SUPPORT_DNSSEC
+				{
+				    int dnssec_status = INTERNAL_ERROR;
+				    h = val_gethostbyname(hbuf, &dnssec_status);
+				    if (RequireDNSSEC) {
+					/* XXX ??? */
+				    }
+				}
+#else
 				h = gethostbyname(hbuf);
+#endif
 				save_errno = errno;
 # endif /* NETINET6 */
 			}
Index: sendmail/readcf.c
===================================================================
--- sendmail/readcf.c	2005-02-25 10:54:42.000000000 -0500
+++ sendmail/readcf.c	2005-06-03 15:06:02.000000000 -0400
@@ -2578,6 +2578,13 @@
 				WorkAroundBrokenAAAA = !clearmode;
 				continue;
 			}
+#ifdef SUPPORT_DNSSEC
+			if (sm_strcasecmp(q, "RequireDNSSEC") == 0)
+			{
+				RequireDNSSEC = !clearmode;
+				continue;
+			}
+#endif
 			for (rfp = ResolverFlags; rfp->rf_name != NULL; rfp++)
 			{
 				if (sm_strcasecmp(q, rfp->rf_name) == 0)
@@ -2591,8 +2598,13 @@
 				_res.options |= rfp->rf_bits;
 		}
 		if (tTd(8, 2))
+#ifdef SUPPORT_DNSSEC
+			sm_dprintf("_res.options = %x, RequireDNSSEC = %d, HasWildcardMX = %d\n",
+				   (unsigned int) _res.options, RequireDNSSEC, HasWildcardMX);
+#else
 			sm_dprintf("_res.options = %x, HasWildcardMX = %d\n",
 				   (unsigned int) _res.options, HasWildcardMX);
+#endif
 #else /* NAMED_BIND */
 		usrerr("name server (I option) specified but BIND not compiled in");
 #endif /* NAMED_BIND */
Index: sendmail/domain.c
===================================================================
--- sendmail/domain.c	2005-06-03 15:09:51.000000000 -0400
+++ sendmail/domain.c	2005-06-03 15:11:03.000000000 -0400
@@ -23,6 +23,9 @@
 
 # include <arpa/inet.h>
 
+#ifdef SUPPORT_DNSSEC
+#include <val_api.h>
+#endif
 
 /*
 **  The standard udp packet size PACKETSZ (512) is not sufficient for some
@@ -268,8 +271,40 @@
 		resfunc = res_search;
 
 	errno = 0;
+
+#ifdef SUPPORT_DNSSEC
+	/* perform DNSSEC Validation of the answer */
+	{
+	    char dname[MAXDNAME];
+	    bzero(dname, MAXDNAME);
+	    strncpy(dname, host, MAXDNAME);
+	    getcanonname(dname, MAXDNAME, true, NULL);
+	    int dnssec_status = INTERNAL_ERROR;
+	    
+	    if (tTd(8, 2))
+		sm_dprintf("getmxrr(24): performing dnssec validation query.\n");
+	    
+	    n = val_query (dname, C_IN, T_MX, (unsigned char *) &answer, sizeof (answer),
+			   &dnssec_status);
+
+	    if (RequireDNSSEC) {
+		if (dnssec_status == VALIDATE_SUCCESS) {
+		    if (tTd(8, 2))
+			sm_dprintf("getmxrr: DNSSEC validation of MX record of %s succeeded.\n", dname);
+		}
+		else {
+		    if (tTd(8, 1))
+			sm_dprintf("getmxrr: DNSSEC validation of MX record of %s failed.\n", dname);
+		    syserr("Error: DNSSEC validation of MX record of %s failed.\n", dname);
+		    *rcode = EX_NOHOST;
+		    return -1;
+		}
+	    }
+	}
+#else 
 	n = (*resfunc)(host, C_IN, T_MX, (unsigned char *) &answer,
 		       sizeof(answer));
+#endif
 	if (n < 0)
 	{
 		if (tTd(8, 1))
@@ -895,8 +930,51 @@
 				qtype == T_MX ? "MX" :
 				"???");
 		errno = 0;
+#ifdef SUPPORT_DNSSEC
+		{
+		    char dname[MAXDNAME];
+		    int dnssec_status = INTERNAL_ERROR;
+
+		    bzero(dname, MAXDNAME);
+		    memcpy(dname, host, strlen(host));
+		    memcpy(dname + strlen(host), ".", 1);
+		    memcpy(dname + strlen(host) + 1, *dp, strlen(*dp));
+
+		    if (tTd(8, 5))
+			sm_dprintf("dns_getcanonname(938): performing dnssec validation query.\n");
+	    
+		    ret = val_query (dname, C_IN, qtype,
+				     answer.qb2, sizeof(answer.qb2),
+				     &dnssec_status);
+
+		    if (RequireDNSSEC) {
+			if (dnssec_status == VALIDATE_SUCCESS) {
+			    if (tTd(8, 2))
+				sm_dprintf("DNSSEC validation of %s succeeded.\n",
+					   dname);
+			}
+			else {
+			    if (tTd(8, 7))
+				sm_dprintf("\tNO: errno=%d, h_errno=%d\n",
+					   errno, h_errno);
+			    
+			    if (tTd(8, 5))
+				sm_dprintf("DNSSEC validation of %s (%s) failed.\n",
+					   dname,
+# if NETINET6
+					   qtype == T_AAAA ? "AAAA" :
+# endif /* NETINET6 */
+					   qtype == T_A ? "A" :
+					   qtype == T_MX ? "MX" :
+					   "???");
+			    goto nexttype;
+			}
+		    }
+		}
+#else
 		ret = res_querydomain(host, *dp, C_IN, qtype,
 				      answer.qb2, sizeof(answer.qb2));
+#endif
 		if (ret <= 0)
 		{
 			int save_errno = errno;
Index: sendmail/sm_resolve.c
===================================================================
--- sendmail/sm_resolve.c	2005-02-25 10:55:24.000000000 -0500
+++ sendmail/sm_resolve.c	2005-06-03 15:13:31.000000000 -0400
@@ -70,6 +70,10 @@
 	{	NULL,		0		}
 };
 
+#ifdef SUPPORT_DNSSEC
+#include <val_api.h>
+#endif
+
 static DNS_REPLY_T *parse_dns_reply __P((unsigned char *, int));
 
 /*
@@ -409,7 +413,39 @@
 	}
 	errno = 0;
 	SM_SET_H_ERRNO(0);
+
+#ifdef SUPPORT_DNSSEC
+	if (tTd(8, 16))
+	    sm_dprintf("dns_lookup_int(%s, %d, %s): ",
+		       domain, rr_class, dns_type_to_string(rr_type));
+	{
+	    char dname[MAXDNAME];
+	    int dnssec_status = INTERNAL_ERROR;
+	    bzero(dname, MAXDNAME);
+	    strncpy(dname, domain, MAXDNAME);
+	    getcanonname(dname, MAXDNAME, true, NULL);
+	    if (tTd(8, 16))
+		sm_dprintf("dns_lookup_int(): performing dnssec validation query.\n");
+	    len = val_query(dname, rr_class, rr_type, reply, sizeof reply,
+			    &dnssec_status);
+
+	    if (RequireDNSSEC) {
+		if (dnssec_status == VALIDATE_SUCCESS) {
+		    if (tTd(8, 2))
+			sm_dprintf("\t\tdnssec validation of %s succeeded.\n", domain);
+		}
+		else {
+		    if (tTd(8, 1))
+			sm_dprintf("\t\tdnssec validation of %s failed.\n",
+				   domain);
+		    return NULL;
+		}
+	    }
+	}
+#else
 	len = res_search(domain, rr_class, rr_type, reply, sizeof reply);
+#endif
+
 	if (tTd(8, 16))
 	{
 		_res.options = old_options;
Index: sendmail/sendmail.h
===================================================================
--- sendmail/sendmail.h	2005-02-25 10:55:33.000000000 -0500
+++ sendmail/sendmail.h	2005-06-03 15:06:06.000000000 -0400
@@ -2146,6 +2146,9 @@
 #endif /* !defined(_USE_SUN_NSSWITCH_) && !defined(_USE_DEC_SVC_CONF_) */
 EXTERN bool	volatile DataProgress;	/* have we sent anything since last check */
 EXTERN bool	DisConnected;	/* running with OutChannel redirect to transcript file */
+#ifdef SUPPORT_DNSSEC
+EXTERN bool     RequireDNSSEC;  /* perform DNSSEC validation of DNS queries */
+#endif
 EXTERN bool	DontExpandCnames;	/* do not $[...$] expand CNAMEs */
 EXTERN bool	DontInitGroups;	/* avoid initgroups() because of NIS cost */
 EXTERN bool	DontLockReadFiles;	/* don't read lock support files */
