Index: config.h.in
===================================================================
--- config.h.in	2005-03-01 11:02:52.000000000 -0500
+++ config.h.in	2005-03-01 12:51:08.000000000 -0500
@@ -42,6 +42,12 @@
 /* Define to 1 if you have the `spf2' library (-lspf2). */
 #undef HAVE_LIBSPF2
 
+/* Define to 1 if you have the `validat' library (-lvalidat). */
+#undef HAVE_LIBVALIDAT
+
+/* Define to 1 if you have libspf2-1.2.x */
+#undef USE_LIBSPF2_1_2_X
+
 /* Define to 1 if you have the <memory.h> header file. */
 #undef HAVE_MEMORY_H
 
Index: spfmilter.c
===================================================================
--- spfmilter.c	2004-11-26 16:51:50.000000000 -0500
+++ spfmilter.c	2005-03-02 14:12:13.155578493 -0500
@@ -27,8 +27,13 @@
 ** For commentary on this license please see http://www.acme.com/license.html
 */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#else
+#include "port.h"
+#endif
 
-#if ! ( defined(USE_LIBSPF) || defined(USE_LIBSPF2) )
+#if ! ( defined(USE_LIBSPF) || defined(USE_LIBSPF2) || defined(USE_LIBSPF2_1_2_X))
 #define USE_LIBSPF2	/* default library is libspf2 */
 #endif
 
@@ -36,13 +41,11 @@
 #error "both USE_LIBSPF and USE_LIBSPF2 are defined - please pick one"
 #endif
 
-
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#else
-#include "port.h"
+#ifdef USE_LIBSPF2_1_2_X
+#undef USE_LIBSPF2
 #endif
 
+
 #ifdef STDC_HEADERS
 #include <stdio.h>
 #include <stdlib.h>
@@ -102,6 +105,16 @@
 #include "match.h"
 #include "iparray.h"
 
+#ifdef USE_LIBSPF2_1_2_X
+#include <spf2/spf.h>
+#endif
+
+#ifdef USE_LIBSPF2
+#include <spf2/spf.h>
+#include <spf2/spf_dns_resolv.h>
+#include <spf2/spf_dns_cache.h>
+#include <spf2/spf_dns_dnssec.h>
+#endif
 
 /* Defines. */
 
@@ -121,6 +134,9 @@
 #define SPFMILTER_ACTION_MARK 2
 #define SPFMILTER_ACTION_TEMPFAIL 3
 
+#define SPFMILTER_DNSSEC_POLICY_IGNORE 0
+#define SPFMILTER_DNSSEC_POLICY_WARN   1
+#define SPFMILTER_DNSSEC_POLICY_REJECT  2
 
 /* Structs. */
 
@@ -155,6 +171,7 @@
     int del_header_list[DEL_HEADER_MAX];
     char buf1[1000];
     char buf2[2000];
+    int validated;
     } connection_data_t;
 
 /* A word about buf1 and buf2, above.  These are scratch buffers for
@@ -234,6 +251,10 @@
 static const char* lib_get_reason( lib_data_t* ld );
 static const char* lib_get_explanation( lib_data_t* ld );
 static const char* lib_get_error( lib_data_t* ld );
+static const char* lib_get_error_msg( lib_data_t* ld );
+static const size_t lib_get_num_errors( lib_data_t* ld );
+static const char** lib_get_error_msgs( lib_data_t* ld );
+static const char* lib_get_received_spf( lib_data_t *ld );
 static void lib_fini_message_data( lib_data_t* ld );
 static void lib_fini_connection_data( lib_data_t* ld );
 static void lib_fini_fallback( lib_fallback_t* lf );
@@ -251,6 +272,7 @@
 static char* explanation_str;
 static int markonly;
 static int debug;
+static int dnssec_policy;
 static char* local_hostname;
 static int local_hostname_len;
 
@@ -287,6 +309,7 @@
     { "nodaemon",		no_argument,		NULL,	'X', },
     { "help",			no_argument,		NULL,	'h', },
     { "debug",			optional_argument,	NULL,	'd', },
+    { "dnssec_policy",          required_argument,      NULL,   's', },
     { 0, 0, 0, 0 },
 };
 #define DOC_LONGOPT(l, v, t, p1) \
@@ -296,7 +319,7 @@
 #else
 #define DOC_LONGOPT(l, v, t, p1) do { } while( 0 )
 #endif
-static const char* shortopts = "l:tg:f:w:re:mu:p:Xhd::";
+static const char* shortopts = "l:tg:f:w:re:mu:p:Xhd:s:";
 
 #define DOC_OPT(s, l, v, t, p0, p1) \
     do { \
@@ -332,6 +355,7 @@
     pidfile = (char*) 0;
     nodaemon = 0;
     debug = 0;
+    dnssec_policy = SPFMILTER_DNSSEC_POLICY_IGNORE;
 
     /* Figure out the program's name. */
     argv0 = strrchr( argv[0], '/' );
@@ -396,6 +420,28 @@
 		else
 		    debug = 1;
 		break;
+	    case 's':
+	        if (optarg) {
+		    if (strncasecmp (optarg, "ignore", 6) == 0) {
+		        if (debug)
+	 		    printf("DNSSEC policy = ignore\n");
+		        dnssec_policy = SPFMILTER_DNSSEC_POLICY_IGNORE;
+		    }
+		    else if (strncasecmp (optarg, "warn", 4) == 0) {
+		        if (debug)
+	 		    printf("DNSSEC policy = warn\n");
+		        dnssec_policy = SPFMILTER_DNSSEC_POLICY_WARN;
+		    }
+		    else if (strncasecmp (optarg, "reject", 6) == 0) {
+		        if (debug)
+	 		    printf("DNSSEC policy = reject\n");
+		        dnssec_policy = SPFMILTER_DNSSEC_POLICY_REJECT;
+		    }
+		    else {
+		      fprintf(stderr, "Unrecognized option argument '%s'\n", optarg);
+		    }
+		}
+		break;
 	    default:
 		(void) fprintf( stderr, "Unrecognised option '%c'\n", c );
 		exit( 1 );
@@ -465,6 +511,7 @@
     DOC_OPT( 'X', "nodaemon", (char*) 0, "Do not fork into the background.", 20, 26 );
     DOC_OPT( 'h', "help", (char*) 0, "Show this help.", 20, 26 );
     DOC_OPT( 'd', "debug", "[<int>]", "Enable debugging to syslog.", 13, 18 );
+    DOC_OPT( 's', "dnssec_policy", "<ignore|warn|reject>", "Action in the event of DNSSEC validation failure", 16, 3);
     }
 
 
@@ -1224,7 +1271,7 @@
     if ( cd->action == SPFMILTER_ACTION_MARK )
 	{
 	/* Build and add the SPF header. */
-	build_header( cd, cd->buf2, sizeof(cd->buf2), rptr );
+	build_header( cd, cd->buf2, sizeof(cd->buf2), rptr);
 	smfi_addheader( ctx, HEADER_NAME, cd->buf2 );
 	}
 
@@ -1286,7 +1333,10 @@
     {
     connection_data_t* cd;
     const char* exp;
+    const char* errmsg;
     char exp_escaped[1000];
+    char exp_errmsg[1000];
+    char err_reply[2048];
 
     cd = (connection_data_t*) smfi_getpriv( ctx );
 
@@ -1318,7 +1368,17 @@
 		escape_percents( exp, exp_escaped, sizeof(exp_escaped) );
 	    else
 		(void) strncpy( exp_escaped, "rejected by spfmilter", sizeof(exp_escaped) - 1 );
-	    smfi_setreply( ctx, "550", "5.7.1", exp_escaped );
+	    strncpy(err_reply, exp_escaped, sizeof(err_reply) - 1);
+
+	    errmsg = lib_get_error_msg( cd->lib_data );
+	    if (errmsg != (char*) 0) {
+	        escape_percents( errmsg, exp_errmsg, sizeof(exp_errmsg));
+		strncpy(err_reply + strlen(exp_escaped), ".  Error: ", sizeof(err_reply) - strlen(exp_escaped) - 1);
+		strncpy(err_reply + strlen(err_reply), exp_errmsg, sizeof(err_reply) - strlen(err_reply) - 1);
+	    }
+
+	    /* smfi_setreply( ctx, "550", "5.7.1", exp_escaped ); */
+	    smfi_setreply( ctx, "550", "5.7.1", err_reply );
 	    fini_message_data( cd );
 	    return SMFIS_REJECT;
 
@@ -1442,6 +1502,11 @@
 build_header( connection_data_t* cd, char* header, int header_size, const char* reason )
     {
     int len;
+    int i;
+    char *err_msg;
+    char **err_msgs;
+    size_t num_errs;
+    int first_err;
 
     (void) snprintf( header, header_size, "%s", result_str( cd->result ) );
     len = strlen( header );
@@ -1471,6 +1536,36 @@
 	len = strlen( header );
 	}
     /*!!! Do something about the problem= field. */
+    err_msg = (char *)(lib_get_error_msg( cd->lib_data ));
+    err_msgs =(char **)(lib_get_error_msgs( cd->lib_data ));
+    num_errs = lib_get_num_errors( cd->lib_data );
+    first_err = 1;
+    if( err_msg != (char*) 0 )
+        {
+	(void) snprintf( &header[len], header_size - len, " problem=%s;", err_msg );
+	first_err = 0;
+	len = strlen( header );
+	}
+
+    for( i = 0; i < num_errs; i++ )
+	{
+	if( ( err_msgs[i] != NULL ) &&
+	    ( ( err_msg == NULL ) || ( strcmp(err_msgs[i], err_msg) != 0 ) )
+	  )
+	    {
+	    if (first_err == 1)
+		{
+		(void) snprintf( &header[len], header_size - len, " problem=%s;", err_msgs[i] );
+		first_err = 0;
+		}
+	    else
+		{
+	        (void) snprintf( &header[len], header_size - len, "%s;", err_msgs[i] );
+		}
+	    len = strlen( header );
+	    }
+	}
+
     (void) snprintf( &header[len], header_size - len, " x-software=%s %s %s;", SPFMILTER_PROGRAM, SPFMILTER_VERSION, SPFMILTER_URL );
     }
 
@@ -1741,6 +1836,12 @@
     return ld->peer_info->explain;
     }
 
+/* FIXME: incomplete */
+static const char*
+lib_get_received_spf ( lib_data_t* ld )
+    {
+      return "";
+    }
 
 static const char*
 lib_get_error( lib_data_t* ld )
@@ -1749,6 +1850,27 @@
     }
 
 
+static const char*
+lib_get_error_msg( lib_data_t* ld )
+    {
+    return lib_get_error(ld);
+    }
+
+
+static const size_t
+lib_get_num_errors( lib_data_t* ld )
+    {
+    return 0;
+    }
+
+
+static const char**
+lib_get_error_msgs( lib_data_t* ld )
+    {
+    return NULL;
+    }
+
+
 static void
 lib_fini_message_data( lib_data_t* ld )
     {
@@ -1782,15 +1904,9 @@
 
 #endif /* USE_LIBSPF */
 
-
 #ifdef USE_LIBSPF2
 
-/* Libspf2 data and routines. */
-
-
-#include <spf2/spf.h>
-#include <spf2/spf_dns_resolv.h>
-#include <spf2/spf_dns_cache.h>
+/* Libspf2 Version 1.0.X and lower versions data and routines. */
 
 
 static SPF_config_t spfc_global;
@@ -2069,7 +2185,11 @@
 	case SPF_RESULT_FAIL: return SPFMILTER_RESULT_FAIL;
 	case SPF_RESULT_SOFTFAIL: return SPFMILTER_RESULT_SOFTFAIL;
 	case SPF_RESULT_NEUTRAL: return SPFMILTER_RESULT_NEUTRAL;
-	case SPF_RESULT_UNKNOWN: return SPFMILTER_RESULT_UNKNOWN;
+	case SPF_RESULT_UNKNOWN:
+	    if ( ld->output.err == SPF_E_DNSSEC_FAIL )
+		return SPFMILTER_RESULT_FAIL;
+	    else
+		return SPFMILTER_RESULT_UNKNOWN;
 	case SPF_RESULT_ERROR: return SPFMILTER_RESULT_ERROR;
 	case SPF_RESULT_NONE: return SPFMILTER_RESULT_NONE;
 	default: return -1;
@@ -2092,12 +2212,40 @@
 
 
 static const char*
+lib_get_received_spf (lib_data_t* ld)
+    {
+    return ld->output.received_spf;
+    }
+
+
+static const char*
 lib_get_error( lib_data_t* ld )
     {
     return SPF_strerror( ld->output.err );
     }
 
 
+static const char*
+lib_get_error_msg( lib_data_t* ld )
+    {
+    return  ld->output.err_msg ;
+    }
+
+
+static const size_t
+lib_get_num_errors( lib_data_t* ld )
+    {
+    return ld->output.num_errs;
+    }
+
+
+static const char**
+lib_get_error_msgs( lib_data_t* ld )
+    {
+    return ld->output.err_msgs;
+    }
+
+
 static void
 lib_fini_message_data( lib_data_t* ld )
     {
@@ -2157,8 +2305,9 @@
 typedef struct {
     int initialized, inuse;
     int next_free_resolver;
+    SPF_dns_config_t spfdcid_d;
     SPF_dns_config_t spfdcid_r;
-    SPF_dns_config_t spfdcid;
+    SPF_dns_config_t spfdcid_c;
     } resolver_t;
 static resolver_t* resolvers;
 static int max_resolvers, first_free_resolver, num_resolvers_inuse;
@@ -2202,7 +2351,8 @@
     for ( r = 0; r < max_resolvers; ++r )
 	if ( resolvers[r].initialized )
 	    {
-	    SPF_dns_destroy_config_cache( resolvers[r].spfdcid );
+	    SPF_dns_destroy_config_dnssec( resolvers[r].spfdcid_d );
+	    SPF_dns_destroy_config_cache( resolvers[r].spfdcid_c );
 	    SPF_dns_destroy_config_resolv( resolvers[r].spfdcid_r );
 	    }
     pthread_mutex_destroy( &resolver_mutex );
@@ -2266,13 +2416,34 @@
 	    free_resolver( r );
 	    return -1;
 	    }
-	resolvers[r].spfdcid = SPF_dns_create_config_cache( resolvers[r].spfdcid_r, 8, debug );
-	if ( resolvers[r].spfdcid == (SPF_dns_config_t) 0 )
+	resolvers[r].spfdcid_c = SPF_dns_create_config_cache( resolvers[r].spfdcid_r, 8, debug );
+	if ( resolvers[r].spfdcid_c == (SPF_dns_config_t) 0 )
 	    {
 	    syslog( LOG_ERR, "SPF_dns_create_config_cache() failed"  );
 	    free_resolver( r );
 	    return -1;
 	    }
+	/*	resolvers[r].spfdcid_d = SPF_dns_create_config_dnssec( resolvers[r].spfdcid_c, debug, dnssec_policy );*/
+	switch (dnssec_policy) {
+	case SPFMILTER_DNSSEC_POLICY_REJECT:
+	    resolvers[r].spfdcid_d = SPF_dns_create_config_dnssec( resolvers[r].spfdcid_r, debug, DNSSEC_POLICY_ABORT );
+	    break;
+
+	case SPFMILTER_DNSSEC_POLICY_WARN:
+	    resolvers[r].spfdcid_d = SPF_dns_create_config_dnssec( resolvers[r].spfdcid_r, debug, DNSSEC_POLICY_WARN );
+	    break;
+
+	case SPFMILTER_DNSSEC_POLICY_IGNORE:
+	default:
+	    resolvers[r].spfdcid_d = SPF_dns_create_config_dnssec( resolvers[r].spfdcid_r, debug, DNSSEC_POLICY_IGNORE );
+	}
+
+	if ( resolvers[r].spfdcid_d == (SPF_dns_config_t) 0 )
+	    {
+	    syslog( LOG_ERR, "SPF_dns_create_config_dnssec() failed"  );
+	    free_resolver( r );
+	    return -1;
+	    }
 	resolvers[r].initialized = 1;
 	}
 
@@ -2283,7 +2454,7 @@
 static SPF_dns_config_t
 get_resolver( int r )
     {
-    return resolvers[r].spfdcid;
+    return resolvers[r].spfdcid_d;
     }
 
 
@@ -2299,3 +2470,332 @@
     }
 
 #endif /* USE_LIBSPF2 */
+
+#ifdef USE_LIBSPF2_1_2_X
+
+/* Libspf2 Version 1.2.X data and routines. */
+
+static SPF_server_t   *spf_server;
+static SPF_request_t  *spf_localpolicy_requestp;
+static SPF_response_t *spf_localpolicy_responsep;
+static SPF_request_t  *spf_explanation_requestp;
+static SPF_response_t *spf_explanation_responsep;
+
+struct lib_fallback_s {
+    SPF_response_t *responsep;
+    SPF_request_t *requestp;
+};
+
+struct lib_data_s {
+    SPF_server_t *spf_server;
+    char *from;
+    SPF_response_t *responsep;
+    SPF_request_t *requestp;
+    int got_response;
+    char **err_msgs;
+};
+
+static int lib_init( void ) {
+    if (dnssec_policy == SPFMILTER_DNSSEC_POLICY_IGNORE) {
+	spf_server = SPF_server_new(SPF_DNS_CACHE, debug);
+    }
+    else {
+	spf_server = SPF_server_new(SPF_DNS_DNSSEC_RESOLV, debug);
+    }
+    if (spf_server == NULL) {
+	fprintf( stderr, "%s: SPF_server_new() failed\n", argv0 );
+	return 0;
+    }
+
+    if (localpolicy_str != NULL) {
+	spf_localpolicy_requestp = SPF_request_new (spf_server);
+	spf_localpolicy_responsep = SPF_response_new(spf_localpolicy_requestp);
+	if (SPF_server_set_localpolicy(spf_server, localpolicy_str,
+				       trustedforwarders,
+				       &spf_localpolicy_responsep)) {
+	    fprintf( stderr, "%s: error setting local policy - %s\n", argv0,
+		     localpolicy_str);
+	    return 0;
+	}
+    }
+
+    if (explanation_str != NULL) {
+	spf_explanation_requestp = SPF_request_new (spf_server);
+	spf_explanation_responsep = SPF_response_new(spf_explanation_requestp);
+	if (SPF_server_set_explanation(spf_server, explanation_str,
+				       &spf_explanation_responsep)) {
+	    fprintf( stderr, "%s: error setting explanation - %s\n", argv0,
+		     explanation_str);
+	    return 0;
+	}
+    }
+
+    return 1;
+}
+
+static lib_fallback_t* lib_init_fallback( const char* str ) {
+    lib_fallback_t *lf;
+
+    lf = (lib_fallback_t*) malloc (sizeof(lib_fallback_t));
+    if (lf == NULL) {
+	return NULL;
+    }
+
+    lf->requestp = SPF_request_new(spf_server);
+    lf->responsep = SPF_response_new(lf->requestp);
+
+    if (SPF_server_set_localpolicy(spf_server, str, trustedforwarders,
+				   &lf->responsep)) {
+	
+	fprintf( stderr, "%s: error setting fallback - %s\n", argv0,
+		 str);
+	free(lf);
+	return NULL;
+    }
+    
+    return lf;
+}
+
+static int lib_set_local_hostname( lib_data_t* ld ) {
+    if (SPF_server_set_rec_dom (spf_server, local_hostname)) {
+	return 0;
+    }
+    
+    return 1;
+}
+
+static lib_data_t* lib_init_connection_data( void ) {
+    lib_data_t* ld;
+
+    ld = (lib_data_t*) malloc( sizeof(lib_data_t) );
+    if ( ld == (lib_data_t*) 0 )
+	return (lib_data_t*) 0;
+
+    /* Create the per-connection server object creating a new one */
+    if (dnssec_policy == SPFMILTER_DNSSEC_POLICY_IGNORE) {
+	ld->spf_server = SPF_server_new (SPF_DNS_CACHE, debug);
+    }
+    else {
+	ld->spf_server = SPF_server_new (SPF_DNS_DNSSEC_RESOLV, debug);
+    }
+    ld->from = NULL;
+    ld->got_response = 0;
+    ld->requestp = SPF_request_new(ld->spf_server);
+    ld->responsep = SPF_response_new(ld->requestp);
+    ld->err_msgs = NULL;
+
+    return ld;
+}
+
+static int lib_init_message_data( lib_data_t* ld ) {
+    ld->from = NULL;
+    return 1;
+}
+
+static int lib_set_ipv4( lib_data_t* ld,
+			 struct in_addr ipv4_addr,
+			 char* ipv4_str ) {
+    SPF_request_set_ipv4(ld->requestp, ipv4_addr);
+    SPF_request_set_ipv4_str(ld->requestp, ipv4_str);
+    return 1;
+}
+
+static int lib_set_ipv6( lib_data_t* ld,
+			 struct in6_addr ipv6_addr,
+			 char* ipv6_str ) {
+    SPF_request_set_ipv6(ld->requestp, ipv6_addr);
+    SPF_request_set_ipv6_str(ld->requestp, ipv6_str);
+    return 1;
+}
+
+static int lib_set_helo_hostname( lib_data_t* ld, char* helo_hostname ) {
+    SPF_request_set_helo_dom(ld->requestp, helo_hostname);
+    return 1;
+}
+
+static int lib_set_from( lib_data_t* ld, const char* from ) {
+    SPF_request_set_env_from(ld->requestp, from);
+    return 1;
+}
+
+static int lib_do_check( lib_data_t* ld, const char* from ) {
+    int retval;
+    lib_set_from(ld, from);
+    if ((retval = SPF_request_query_mailfrom(ld->requestp, &ld->responsep))
+	!= SPF_E_SUCCESS) {
+	printf("SPF_request_query_mailfrom() returned %d\n", retval);
+    }
+
+    return 1;
+}
+
+static int lib_do_check_recipient( lib_data_t* ld, const char* to ) {
+    if(SPF_request_query_rcptto(ld->requestp, &ld->responsep, to)
+	== SPF_E_SUCCESS) {
+	return 1;
+    }
+    else {
+	return 1;
+    }
+}
+
+static int lib_do_check_final( lib_data_t* ld ) {
+    if (SPF_request_query_mailfrom(ld->requestp, &ld->responsep)
+	== SPF_E_SUCCESS) {
+	return 1;
+    }
+    else {
+	return 1;
+    }
+}
+
+static int lib_get_result( lib_data_t* ld ) {
+    SPF_result_t res = SPF_response_result(ld->responsep);
+    int retval;
+    /* Convert libspf result to spfmilter result. */
+    switch ( res )
+	{
+	case SPF_RESULT_NEUTRAL:
+	    printf("libspf2 returned SPF_RESULT_NEUTRAL\n");
+	    retval = SPFMILTER_RESULT_NEUTRAL;
+	    break;
+
+	case SPF_RESULT_PASS:
+	    printf("libspf2 returned SPF_RESULT_PASS\n");
+	    retval = SPFMILTER_RESULT_PASS;
+	    break;
+
+	case SPF_RESULT_FAIL:
+	    printf("libspf2 returned SPF_RESULT_FAIL\n");
+	    retval = SPFMILTER_RESULT_FAIL;
+	    break;
+
+	case SPF_RESULT_SOFTFAIL:
+	    printf("libspf2 returned SPF_RESULT_SOFTFAIL\n");
+	    retval = SPFMILTER_RESULT_SOFTFAIL;
+	    break;
+
+	case SPF_RESULT_NONE:
+	    printf("libspf2 returned SPF_RESULT_NONE\n");
+	    retval = SPFMILTER_RESULT_NONE;
+	    break;
+
+	case SPF_RESULT_TEMPERROR:
+	    printf("libspf2 returned SPF_RESULT_TEMPERROR\n");
+	    retval = SPFMILTER_RESULT_ERROR;
+	    break;
+
+	case SPF_RESULT_PERMERROR:
+	    printf("libspf2 returned SPF_RESULT_PERMERROR\n");
+	    retval = SPFMILTER_RESULT_UNKNOWN;
+	    break;
+
+	default: retval = -1;
+	}
+    
+        /* Check if there was a DNSSEC validation failure */
+        if (dnssec_policy == SPFMILTER_DNSSEC_POLICY_REJECT) {
+	    int i;
+	    int num_errs;
+	    printf("spfmilter: DNSSEC reject policy is in effect\n");
+	    num_errs = lib_get_num_errors(ld);
+	    for (i=0; i<num_errs; i++) {
+		SPF_error_t *err;
+		err = SPF_response_message (ld->responsep, i);
+		if (err) {
+		    if (SPF_error_code(err) == SPF_E_DNSSEC_FAILURE) {
+			printf("spfmilter: DNSSEC validation failure occured.  Rejecting mail.\n");
+			retval = SPFMILTER_RESULT_FAIL;
+			break;
+		    }
+		}
+	    }
+	}
+
+        return retval;
+}
+
+static const char* lib_get_reason( lib_data_t* ld ) {
+    int spf_reason = SPF_response_reason (ld->responsep);
+    return SPF_strreason (spf_reason);
+}
+
+static const char* lib_get_explanation( lib_data_t* ld ) {
+    return SPF_response_get_explanation (ld->responsep);
+}
+
+static const char* lib_get_error( lib_data_t* ld ) {
+    SPF_error_t *err;
+    err = SPF_response_message (ld->responsep, 0);
+    if (err) {
+	return SPF_error_message(err);
+    }
+    else {
+	return NULL;
+    }
+}
+
+static const char* lib_get_error_msg( lib_data_t* ld ) {
+    return lib_get_error(ld);
+}
+
+static const size_t lib_get_num_errors( lib_data_t* ld ) {
+    return SPF_response_warnings(ld->responsep);
+}
+
+static const char** lib_get_error_msgs( lib_data_t* ld ) {
+    int i;
+    int num_errs;
+    char ** err_msgs;
+    
+    num_errs = lib_get_num_errors(ld);
+    err_msgs = (char **) malloc(num_errs * sizeof(char*));
+
+    if (err_msgs == NULL) {
+	return NULL;
+    }
+
+    for (i = 0; i < num_errs; i++) {
+	SPF_error_t *err;
+	char *errmsg = NULL;
+	
+	err = SPF_response_message(ld->responsep, i);
+	if (err) {
+	    errmsg = (char *)(SPF_error_message (err));
+	}
+	err_msgs[i] = errmsg;
+    }
+
+    if (ld->err_msgs) free(ld->err_msgs);
+    ld->err_msgs = err_msgs;
+
+    return (const char **) err_msgs;
+}
+
+static const char* lib_get_received_spf( lib_data_t *ld ) {
+    return SPF_response_get_received_spf (ld->responsep);
+}
+
+static void lib_fini_message_data( lib_data_t* ld ) {
+    free(ld->from);
+}
+
+static void lib_fini_connection_data( lib_data_t* ld ) {
+    if (ld->err_msgs) free(ld->err_msgs);
+    SPF_response_free (ld->responsep);
+    SPF_request_free (ld->requestp);
+    SPF_server_free(ld->spf_server);
+}
+
+static void lib_fini_fallback( lib_fallback_t* lf ) {
+    SPF_response_free (lf->responsep);
+    SPF_request_free (lf->requestp);
+    free(lf);
+}
+
+static void lib_fini( void ) {
+    SPF_server_free(spf_server);
+}
+
+#endif /* USE_LIBSPF2_1_2_X */
+
Index: Makefile.am
===================================================================
--- Makefile.am	2005-02-11 11:20:44.000000000 -0500
+++ Makefile.am	2005-02-11 11:21:05.000000000 -0500
@@ -4,7 +4,7 @@
 sbin_PROGRAMS = spfmilter
 
 spfmilter_SOURCES = spfmilter.c iparray.c match.c
-spfmilter_LDADD = -lmilter -lspf2
+spfmilter_LDADD = -lmilter -lspf2 -lvalidat
 
 man8_MANS = spfmilter.8
 
Index: configure.ac
===================================================================
--- configure.ac	2005-02-11 11:03:53.000000000 -0500
+++ configure.ac	2005-03-01 11:01:18.000000000 -0500
@@ -67,10 +67,15 @@
 	echo "libspf2 is required to build this program."
 	exit 1;
 ])
-AC_CHECK_LIB(spf2, SPF_destroy_config, , [
-	echo "libspf2 is required to build this program."
-	exit 1;
-])
+
+dnl Check for newer version (1.2.x) of libspf2 header files
+AC_CHECK_HEADER(spf2/spf_server.h, [AC_DEFINE(USE_LIBSPF2_1_2_X)], )
+
+AC_CHECK_LIB(spf2, SPF_destroy_config, ,
+        AC_CHECK_LIB(spf2, SPF_server_new, , [
+	     echo "libspf2 is required to build this program."
+	     exit 1;
+]))
 
 AC_CHECK_HEADER(libmilter/mfapi.h, , [
 	echo "sendmail's libmilter is required to build this program."
@@ -81,6 +86,15 @@
 	exit 1;
 ])
 
+dnl
+dnl check the DNSSEC validator library
+dnl
+AC_CHECK_LIB(validat, val_init, , [
+	echo "the validator library is required to build this program."
+        echo "see http://dnssec-tools.sourceforge.net"
+	exit 1;
+])
+
 AC_CHECK_FUNCS(getopt_long daemon setsid)
 
 AM_CONFIG_HEADER(config.h)
