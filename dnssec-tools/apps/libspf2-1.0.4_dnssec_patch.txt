Index: src/libspf2/spf_eval_id.c
===================================================================
--- src/libspf2/spf_eval_id.c	2004-07-08 13:24:55.000000000 -0400
+++ src/libspf2/spf_eval_id.c	2005-05-30 10:37:27.000000000 -0400
@@ -204,6 +204,88 @@
     return *output;
 }
 
+/* Add a new error message to the end of the output->err_msgs list */
+void SPF_add_output_err (SPF_output_t *output,
+			    const char *msg)
+{
+    if ((output != NULL) && (msg != NULL)) {
+	char **new_err_msgs;
+	int i;
+
+	if (output->num_errs < 0) {
+	    output->num_errs = 0;
+	}
+
+	(output->num_errs)++;
+
+	new_err_msgs = (char **) malloc (output->num_errs * sizeof(char *));
+	if (new_err_msgs == NULL) {
+	    /* return E_NO_MEM? */
+	}
+
+	for (i=0; i<(output->num_errs - 1); i++) {
+	    new_err_msgs[i] = output->err_msgs[i];
+	}
+
+	new_err_msgs[output->num_errs - 1] = strdup(msg);
+
+	if (output->err_msgs) free (output->err_msgs);
+	output->err_msgs = new_err_msgs;
+	
+	if (output->err_msg) free (output->err_msg);
+	output->err_msg = strdup(msg);
+	
+    }
+}
+
+/* Append the list of error messages from old_output to new_output */
+void SPF_copy_output_errs (SPF_output_t *old_output, SPF_output_t *new_output)
+{
+    if ((old_output != NULL) &&
+	(new_output != NULL) &&
+	(old_output->num_errs > 0)) {
+
+	char ** new_err_msgs;
+	int new_num_errs = old_output->num_errs;
+	int i;
+
+	if (new_output->num_errs > 0) {
+	    new_num_errs += new_output->num_errs;
+	}
+	else {
+	    new_output->num_errs = 0;
+	}
+
+	new_err_msgs = (char **) malloc (new_num_errs * sizeof (char *));
+	if (new_err_msgs == NULL) {
+	    /* return E_NO_MEM? */
+	}
+	
+	/* retain error messages in new_output */
+	for (i=0; i<new_output->num_errs; i++) {
+	    new_err_msgs[i] = new_output->err_msgs[i];
+	}
+
+	/* duplicate error messages in old_output */
+	for (i=new_output->num_errs; i<new_num_errs; i++) {
+	    if (old_output->err_msgs[i-new_output->num_errs]) {
+		new_err_msgs[i] = strdup (old_output->err_msgs[i-new_output->num_errs]);
+	    }
+	    else {
+		new_err_msgs[i] = strdup("");
+	    }
+	}
+
+	if (new_output->err_msgs) free (new_output->err_msgs);
+	new_output->err_msgs = new_err_msgs;
+	new_output->num_errs = new_num_errs;
+
+	if (old_output->err_msg != NULL) {
+	    if (new_output->err_msg) free (new_output->err_msg);
+	    new_output->err_msg = strdup (old_output->err_msg);
+	}
+    }
+}
 
 SPF_output_t SPF_eval_id( SPF_config_t spfcid, SPF_id_t spfid,
 			    SPF_dns_config_t spfdcid,
@@ -401,6 +483,17 @@
 	    if( rr_a->herrno == TRY_AGAIN )
 		return done( SPF_RESULT_ERROR, SPF_REASON_MECH,
 			     SPF_E_DNS_ERROR );
+
+	    if (rr_a->herrno == DNSSEC_FAILURE) {
+		char errstr[1024];
+
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_FAILURE");
+		}
+
+		snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", lookup);
+	        SPF_add_output_err (&output, errstr);
+	    }
 	    
 	    for( i = 0; i < rr_a->num_rr; i++ )
 	    {
@@ -457,6 +550,17 @@
 		return done( SPF_RESULT_ERROR, SPF_REASON_MECH,
 			     SPF_E_DNS_ERROR );
 	    
+	    if (rr_mx->herrno == DNSSEC_FAILURE) {
+		char errstr[1024];
+
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_FAILURE.");
+		}
+
+		snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for MX record of %s.", lookup);
+	        SPF_add_output_err (&output, errstr);
+	    }
+	    
 	    max_mx = rr_mx->num_rr;
 	    if ( max_mx > spfic->max_dns_mx )
 		max_mx = spfic->max_dns_mx;
@@ -483,6 +587,17 @@
 		    return done( SPF_RESULT_ERROR, SPF_REASON_MECH,
 				 SPF_E_DNS_ERROR );
 	    
+		if (rr_a->herrno == DNSSEC_FAILURE) {
+		    char errstr[1024];
+		    
+		    if (spfic->debug > 1) {
+			SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_FAILURE");
+		    }
+		    
+		    snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", rr_mx->rr[j]->mx);
+		    SPF_add_output_err (&output, errstr);
+		}
+	    
 		for( i = 0; i < rr_a->num_rr; i++ )
 		{
 		    if ( rr_a->rr_type != fetch_ns_type )
@@ -570,6 +685,17 @@
 		    if( rr_a->herrno == TRY_AGAIN )
 			return done( SPF_RESULT_ERROR, SPF_REASON_MECH, SPF_E_DNS_ERROR );
 	    
+		    if (rr_a->herrno == DNSSEC_FAILURE) {
+			char errstr[1024];
+			
+			if (spfic->debug > 1) {
+			    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_FAILURE");
+			}
+			
+			snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", rr_ptr->rr[i]->ptr);
+			SPF_add_output_err (&output, errstr);
+		    }
+	    
 		    for( j = 0; j < rr_a->num_rr; j++ )
 		    {
 			if ( spfic->debug )
@@ -654,6 +780,17 @@
 		    if( rr_aaaa->herrno == TRY_AGAIN )
 			return done( SPF_RESULT_ERROR, SPF_REASON_MECH, SPF_E_DNS_ERROR );
 	    
+		    if (rr_aaaa->herrno == DNSSEC_FAILURE) {
+			char errstr[1024];
+			
+			if (spfic->debug > 1) {
+			    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_FAILURE");
+			}
+			
+			snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", rr_ptr->rr[i]->ptr);
+			SPF_add_output_err (&output, errstr);
+		    }
+	    
 		    for( j = 0; j < rr_aaaa->num_rr; j++ )
 		    {
 			if ( spfic->debug )
@@ -745,8 +882,16 @@
 
 		SPF_set_cur_dom( spfcid, save_cur_dom );
 		free( save_cur_dom );
+
+		if ( c_results.err == SPF_E_DNSSEC_FAILURE ) {
+		    SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+		}
 		SPF_reset_c_results( &c_results );
 
+		if (inc_out.num_errs > 0) {
+		    SPF_copy_output_errs (&inc_out, &output);
+		}
+
 		if ( spfic->debug > 0 )
 		    SPF_debugf( "include:  executed SPF record:  %s  result: %s  reason: %s",
 			    SPF_strerror( inc_out.err ),
@@ -787,6 +932,17 @@
 	    }
 	    else if ( err == SPF_E_DNS_ERROR )
 		return done( SPF_RESULT_ERROR, SPF_REASON_NONE, err );
+	    else if ( err == SPF_E_DNSSEC_FAILURE ) {
+		if ( c_results.err_msg ) {
+		    output.err_msg = strdup( c_results.err_msg );
+		    SPF_add_output_err( &output, c_results.err_msg );
+		}
+		else {
+		    SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAILURE ) );
+		}
+		return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAILURE );
+	    }
 	    else
 		return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE, err );
 	    
@@ -829,6 +985,17 @@
 		return done( SPF_RESULT_ERROR, SPF_REASON_MECH, SPF_E_DNS_ERROR );
 	    
 	    
+	    if (rr_a->herrno == DNSSEC_FAILURE) {
+		char errstr[1024];
+
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_FAILURE");
+		}
+
+		snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", lookup);
+	        SPF_add_output_err (&output, errstr);
+	    }
+	    
 	    if ( rr_a->num_rr > 0 )
 		return done( mech->prefix_type, SPF_REASON_MECH, SPF_E_SUCCESS );
 	    
@@ -876,8 +1043,16 @@
 		SPF_set_cur_dom( spfcid, lookup );
 		inc_out = SPF_eval_id( spfcid, c_results.spfid, spfdcid,
 				       TRUE, FALSE, num_dns_mech );
+
+		if ( c_results.err == SPF_E_DNSSEC_FAILURE ) {
+		    SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+		}
 		SPF_reset_c_results( &c_results );
 
+		if (inc_out.num_errs > 0) {
+		    SPF_copy_output_errs (&inc_out, &output);
+		}
+
 		if ( spfic->debug > 0 )
 		    SPF_debugf( "redirect:  executed SPF record:  %s  result: %s  reason: %s",
 			    SPF_strerror( inc_out.err ),
@@ -891,6 +1066,17 @@
 	    }
 	    else if ( err == SPF_E_DNS_ERROR )
 		return done( SPF_RESULT_ERROR, SPF_REASON_NONE, err );
+	    else if ( err == SPF_E_DNSSEC_FAILURE ) {
+		if ( c_results.err_msg ) {
+		    output.err_msg = strdup( c_results.err_msg );
+		    SPF_add_output_err( &output, c_results.err_msg );
+		}
+		else {
+		    SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAILURE ) );
+		}
+		return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAILURE );
+	    }
 	    else
 		return done( mech->prefix_type, SPF_REASON_MECH, err );
 	    
Index: src/libspf2/spf_get_spf.c
===================================================================
--- src/libspf2/spf_get_spf.c	2004-06-22 18:38:55.000000000 -0400
+++ src/libspf2/spf_get_spf.c	2005-05-30 10:30:50.000000000 -0400
@@ -49,6 +49,7 @@
     
     int		i;
     SPF_err_t	err;
+    SPF_err_t   dnssec_err;
     int		num_found;
     
 
@@ -75,6 +76,7 @@
 
     rr_txt = SPF_dns_lookup( spfdcid, domain, ns_t_txt, TRUE );
 
+    dnssec_err = SPF_E_SUCCESS;
     switch( rr_txt->herrno )
     {
     case HOST_NOT_FOUND:
@@ -91,6 +93,22 @@
     case NETDB_SUCCESS:
 	break;
 
+    case DNSSEC_FAILURE:
+        if (spfic->debug > 1) {
+	  SPF_debugf("SPF_get_spf: spf_dns_lookup returned DNSSEC_FAILURE");
+	}
+        dnssec_err = SPF_E_DNSSEC_FAILURE;
+        c_results->err = SPF_E_DNSSEC_FAILURE;
+	{
+	    char errmsgbuf[1024];
+	    bzero(errmsgbuf, 1024);
+	    snprintf(errmsgbuf, 1023,
+		     "DNSSEC validation failed for the SPF (TXT) record of '%s'.",
+		     domain);
+	    c_results->err_msg = strdup(errmsgbuf);
+	}
+	break;
+
     default:
 	c_results->err = SPF_E_DNS_ERROR;
 	return SPF_E_DNS_ERROR;
@@ -133,5 +151,26 @@
 	    break;
     }
 
+    if (dnssec_err == SPF_E_DNSSEC_FAILURE){
+        if (c_results->err_msg != NULL) {
+	    free(c_results->err_msg); /* Should we retain old err_msg? Is there one? */
+	}
+
+	{
+	    char errmsgbuf[1024];
+	    bzero(errmsgbuf, 1024);
+	    snprintf(errmsgbuf, 1023,
+		     "DNSSEC validation failed for the SPF (TXT) record of '%s'.",
+		     domain);
+	    c_results->err_msg = strdup(errmsgbuf);
+	}
+
+        if ((spfic->debug > 1) && (c_results->err_msg != NULL)) {
+	    SPF_debugf("SPF_get_spf: setting c_results->err_msg to '%s'", c_results->err_msg);
+	}
+
+	c_results->err = dnssec_err;
+    }
+
     return err;
 }
Index: src/libspf2/spf_result.c
===================================================================
--- src/libspf2/spf_result.c	2004-06-22 18:39:13.000000000 -0400
+++ src/libspf2/spf_result.c	2005-05-30 10:27:40.000000000 -0400
@@ -222,6 +222,7 @@
     size_t	buf_len = SPF_RECEIVED_SPF_SIZE;
     
     char	*p, *p_end;
+    int         dnssecerr;
 
 
     buf = malloc( buf_len );
@@ -277,16 +278,99 @@
     
 
     /* add in the optional compiler error keyword */
-    if ( output.err_msg != NULL )
+    if ( ( output.err_msg != NULL ) || ( output.num_errs > 0 ) )
     {
-	p += snprintf( p, p_end - p, " problem=%s;", output.err_msg );
+	int i;
+	int first=1;
+
+	if ( ( output.err_msg != NULL ) && ( strstr(output.err_msg, "DNSSEC") == NULL ) ) {
+	    p += snprintf( p, p_end - p, " problem=%s", output.err_msg );
+	    first=0;
+
+	    if ( p_end - p <= 0 ) return buf;
+	}
+
+	/* Add other error messages */
+	for ( i = 0; i < output.num_errs; i++ ) {
+	    if ( ( output.err_msgs[i] != NULL ) &&
+                 ( strstr (output.err_msgs[i], "DNSSEC") == NULL ) &&
+                 ( ( output.err_msg == NULL) || ( strcmp( output.err_msgs[i], output.err_msg ) != 0 ) )
+	       ) {
+		if (first == 1) {
+		    p += snprintf( p, p_end - p, " problem=%s", output.err_msgs[i] );
+		    first = 0;
+		}
+		else {
+		    p += snprintf( p, p_end - p, ", %s", output.err_msgs[i] );
+		}
+
+		if ( p_end - p <= 0 ) return buf;
+	    }
+	}
+
+	if (!first) {
+	    p += snprintf( p, p_end - p, ";" );
+	}
+	
 	if ( p_end - p <= 0 ) return buf;
     }
-    else if ( c_results.err_msg != NULL )
+    else if ( ( c_results.err_msg != NULL ) && ( strstr(c_results.err_msg, "DNSSEC") == NULL ) )
     {
 	p += snprintf( p, p_end - p, " problem=%s;", c_results.err_msg );
 	if ( p_end - p <= 0 ) return buf;
     }
+
+    /* add in the x-dnssec keyword */
+    dnssecerr = 0;
+    if ( ( output.err_msg != NULL ) || ( output.num_errs > 0 ) )
+    {
+	int i;
+	int first=1;
+
+	if ( ( output.err_msg != NULL ) && ( strstr(output.err_msg, "DNSSEC") != NULL ) ) {
+	    p += snprintf( p, p_end - p, " x-dnssec=\"fail (%s", output.err_msg );
+	    first=0;
+	    dnssecerr = 1;
+	    if ( p_end - p <= 0 ) return buf;
+	}
+
+	/* Add other error messages */
+	for ( i = 0; i < output.num_errs; i++ ) {
+	    if ( ( output.err_msgs[i] != NULL ) &&
+                 ( strstr (output.err_msgs[i], "DNSSEC") != NULL ) &&
+                 ( ( output.err_msg == NULL) || ( strcmp( output.err_msgs[i], output.err_msg ) != 0 ) )
+	       ) {
+		dnssecerr = 1;
+		if (first == 1) {
+		    p += snprintf( p, p_end - p, " x-dnssec=\"fail (%s", output.err_msgs[i] );
+		    first = 0;
+		}
+		else {
+		    p += snprintf( p, p_end - p, ", %s", output.err_msgs[i] );
+		}
+
+		if ( p_end - p <= 0 ) return buf;
+	    }
+	}
+
+	if (!first) {
+	    p += snprintf( p, p_end - p, ")\";" );
+	}
+	
+	if ( p_end - p <= 0 ) return buf;
+    }
+    else if ( ( c_results.err_msg != NULL ) && ( strstr(c_results.err_msg, "DNSSEC") != NULL ) )
+    {
+	p += snprintf( p, p_end - p, " x-dnssec=\"fail (%s)\";", c_results.err_msg );
+	if ( p_end - p <= 0 ) return buf;
+    }
+
+    if ((!dnssecerr) && (output.result != SPF_RESULT_NONE)){
+	p += snprintf( p, p_end - p, " x-dnssec=\"pass\";");
+
+	if ( p_end - p <= 0 ) return buf;
+    }
+
     
     /* FIXME  should the explanation string be included in the header? */
 
@@ -378,8 +462,10 @@
 	    output.reason = SPF_REASON_NONE;
 	    output.err = err;
 	    if ( output.err_msg ) free( output.err_msg );
-	    if ( c_results.err_msg )
+	    if ( c_results.err_msg ) {
 		output.err_msg = strdup( c_results.err_msg );
+		SPF_add_output_err( &output, c_results.err_msg );
+	    }
 	    else
 		output.err_msg = NULL;
 	
@@ -394,10 +480,25 @@
 	    if ( spfic->debug > 0 )
 		SPF_print( c_results.spfid );
 
+	    if ( c_results.err == SPF_E_DNSSEC_FAILURE ) {
+		SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+	    }
 	}
 	
     }
     
+    if (spfic->debug > 1) {
+        if (output.num_errs > 0) {
+	    int i;
+	    SPF_debugf("SPF_result: err_msgs = ");
+	    for (i=0; i<output.num_errs; i++) {
+		SPF_debugf("%s;",output.err_msgs[i]);
+	    }
+        }
+        else {
+	    SPF_debugf("SPF_result: err_msgs = None");
+        }
+    }
 
     SPF_result_comments( spfcid, spfdcid, c_results, &output );
 
@@ -449,8 +550,10 @@
 	    output.reason = SPF_REASON_NONE;
 	    output.err = err;
 	    if ( output.err_msg ) free( output.err_msg );
-	    if ( c_results.err_msg )
+	    if ( c_results.err_msg ) {
 		output.err_msg = strdup( c_results.err_msg );
+		SPF_add_output_err( &output, c_results.err_msg );
+	    }
 	    else
 		output.err_msg = NULL;
 	
@@ -465,10 +568,25 @@
 	    if ( spfic->debug > 0 )
 		SPF_print( c_results.spfid );
 
+	    if ( c_results.err == SPF_E_DNSSEC_FAILURE ) {
+		SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+	    }
 	}
 	
     }
     
+    if (spfic->debug > 1) {
+        if (output.num_errs > 0) {
+	    int i;
+	    SPF_debugf("SPF_result_helo: err_msgs = ");
+	    for (i=0; i<output.num_errs; i++) {
+		SPF_debugf("%s;",output.err_msgs[i]);
+	    }
+        }
+        else {
+	    SPF_debugf("SPF_result_helo: err_msgs = None");
+        }
+    }
 
     SPF_result_comments( spfcid, spfdcid, c_results, &output );
 
Index: src/libspf2/spf_strerror.c
===================================================================
--- src/libspf2/spf_strerror.c	2004-06-22 18:39:16.000000000 -0400
+++ src/libspf2/spf_strerror.c	2005-05-29 17:19:55.000000000 -0400
@@ -152,6 +152,10 @@
     case SPF_E_MECH_AFTER_ALL:
 	return "Mechanisms found after the \"all:\" mechanism will be ignored";
 	break;
+
+    case SPF_E_DNSSEC_FAILURE:
+	return "DNSSEC Validation of SPF record failed.";
+	break;
 	    
     default:
 	return "Unknown SPF error code";
Index: src/libspf2/spf_dns_resolv.c
===================================================================
--- src/libspf2/spf_dns_resolv.c	2005-05-06 12:56:10.000000000 -0400
+++ src/libspf2/spf_dns_resolv.c	2005-05-31 17:47:24.000000000 -0400
@@ -41,6 +41,10 @@
 # include <netdb.h>
 #endif
 
+#ifdef HAVE_LIBVAL
+#include <val_api.h>
+#endif
+
 #include "spf.h"
 #include "spf_dns.h"
 #include "spf_internal.h"
@@ -52,12 +56,21 @@
 {
     int		debug;
     SPF_dns_rr_t spfrr;
+#ifdef HAVE_LIBVAL
+    int         dodnssec;               /* 0: add x-dnssec=none to Received-SPF
+					 * 1: add x-dnssec=pass to Received-SPF
+					 *    if DNSSEC validation succeeds.
+					 *    add x-dnssec=fail to Received-SPF
+					 *    if DNSSEC validation fails.
+					 */
+#else
 #if HAVE_DECL_RES_NINIT
     struct __res_state	res_state;
 #endif
+#endif
 } SPF_dns_resolv_config_t; 
 
-#if HAVE_DECL_RES_NINIT
+#if HAVE_DECL_RES_NINIT && (! defined(HAVE_LIBVAL))
 #define SPF_h_errno spfhook->res_state.res_h_errno
 #else
 #define SPF_h_errno h_errno
@@ -100,6 +113,7 @@
     int		prio;
     
     int		rdlen;
+    int dnssec_status = INTERNAL_ERROR;
     const u_char	*rdata, *rdata_end;
  
 
@@ -147,6 +161,15 @@
     /*
      * try resolving the name
      */
+#ifdef HAVE_LIBVAL
+    do {
+	dns_len = val_query ( domain, ns_c_in, rr_type, response,
+			      sizeof( response ), &dnssec_status );
+	if ( spfhook->debug )
+	    SPF_debugf( "val_query returned %d, dnssec_status = %s",
+			dns_len, p_val_error( dnssec_status ) );
+    } while (0);
+#else
 #if HAVE_DECL_RES_NINIT
     dns_len = res_nquery( &spfhook->res_state, domain, ns_c_in, rr_type,
 			 response, sizeof( response ) );
@@ -154,6 +177,7 @@
     dns_len = res_query( domain, ns_c_in, rr_type,
 			 response, sizeof( response ) );
 #endif
+#endif
 
     if ( dns_len < 0 )
     {
@@ -161,16 +185,34 @@
 	    SPF_debugf( "query failed: err = %d  %s (%d)",
 		    dns_len, hstrerror( SPF_h_errno ), SPF_h_errno );
 
+#ifdef HAVE_LIBVAL
+	if ( spfhook->dodnssec && (SPF_h_errno == NETDB_SUCCESS) && (dnssec_status != VALIDATE_SUCCESS) ) {
+	    SPF_h_errno = DNSSEC_FAILURE;
+	}
+
+	if ( (!spfhook->dodnssec) &&
+	     spfrr->herrno == HOST_NOT_FOUND &&
+	     spfdic->layer_below ) {
+	    return SPF_dcid2spfdic( spfdic->layer_below )->lookup( spfdic->layer_below, domain, rr_type, should_cache );
+	}
+#else
 	if ( spfrr->herrno == HOST_NOT_FOUND && spfdic->layer_below )
 	    return SPF_dcid2spfdic( spfdic->layer_below )->lookup( spfdic->layer_below, domain, rr_type, should_cache );
 
+#endif
 	spfrr->herrno = SPF_h_errno;
 	return spfrr;
     }
-    else
+    else {
 	spfrr->herrno = NETDB_SUCCESS;
-	
     
+#ifdef HAVE_LIBVAL
+	if ( spfhook->dodnssec && (dnssec_status != VALIDATE_SUCCESS) ) {
+	    spfrr->herrno = DNSSEC_FAILURE;
+	}
+#endif
+    }
+
     err = ns_initparse( response, dns_len, &ns_handle );
 
     if ( err < 0 )			/* 0 or -1 */
@@ -437,16 +479,38 @@
     if ( spfrr->num_rr == 0 )
 	spfhook->spfrr.herrno = NO_DATA;
 
+#ifdef HAVE_LIBVAL
+    if (spfhook->dodnssec && (dnssec_status != VALIDATE_SUCCESS)) {
+	if (spfrr->herrno == NETDB_SUCCESS) {
+	    spfrr->herrno = DNSSEC_FAILURE;
+	}
+    }
+#endif
+
     return spfrr;
 }
 
 
+#ifdef HAVE_LIBVAL
+SPF_dns_config_t SPF_dns_create_config_resolv( SPF_dns_config_t layer_below, int debug )
+{
+    return SPF_dns_create_config_sresolv (layer_below, debug, 0);
+}
+
+/*
+ * The additional parameter is 'dodnssec' of type integer.  If 'dodnssec' is 0,
+ * DNSSEC validation will not be performed.  If 'dodnssec' is 1, DNSSEC validation
+ * will be performed.
+ */
+SPF_dns_config_t SPF_dns_create_config_sresolv( SPF_dns_config_t layer_below, int debug,
+						int dodnssec )
+#else
 SPF_dns_config_t SPF_dns_create_config_resolv( SPF_dns_config_t layer_below, int debug )
+#endif
 {
     SPF_dns_iconfig_t     *spfdic;
     SPF_dns_resolv_config_t *spfhook;
 
-    
     spfdic = malloc( sizeof( *spfdic ) );
     if ( spfdic == NULL )
 	return NULL;
@@ -469,9 +533,13 @@
     spfhook = SPF_voidp2spfhook( spfdic->hook );
 
     spfhook->debug = debug;
+#ifdef HAVE_LIBVAL
+    spfhook->dodnssec = dodnssec;
+#endif
     SPF_dns_reset_rr( &spfhook->spfrr );
     spfhook->spfrr.source = SPF_spfdic2dcid( spfdic );
 
+#ifndef HAVE_LIBVAL
 #if HAVE_DECL_RES_NINIT
     if ( res_ninit( &spfhook->res_state ) != 0 )
     {
@@ -485,6 +553,7 @@
 	return NULL;
     }
 #endif
+#endif
 
     return SPF_spfdic2dcid( spfdic );
 }
@@ -501,6 +570,13 @@
     SPF_dns_reset_rr( &(SPF_voidp2spfhook( spfdic->hook )->spfrr) );
 }
 
+#ifdef HAVE_LIBVAL
+void SPF_dns_reset_config_sresolv( SPF_dns_config_t spfdcid )
+{
+    return SPF_dns_reset_config_resolv( spfdcid );
+}
+#endif
+
 void SPF_dns_destroy_config_resolv( SPF_dns_config_t spfdcid )
 {
     SPF_dns_iconfig_t     *spfdic = SPF_dcid2spfdic( spfdcid );
@@ -514,12 +590,13 @@
 
 	SPF_dns_destroy_rr_var( &spfhook->spfrr );
 
+#ifndef HAVE_LIBVAL
 #if HAVE_DECL_RES_NINIT
 	res_nclose( &spfhook->res_state );
 #else
 	res_close();
 #endif
-	
+#endif	
 	free( spfdic->hook );
     }
     
@@ -528,4 +605,11 @@
 	free( spfdic );
 }
 
+#ifdef HAVE_LIBVAL
+void SPF_dns_destroy_config_sresolv( SPF_dns_config_t spfdcid )
+{
+    return SPF_dns_destroy_config_resolv( spfdcid );
+}
+#endif
+
 #endif	/* _WIN32 */
Index: src/include/spf_dns.h
===================================================================
--- src/include/spf_dns.h	2004-06-27 07:44:50.000000000 -0400
+++ src/include/spf_dns.h	2005-05-06 13:37:46.000000000 -0400
@@ -100,8 +100,12 @@
 #endif
 typedef int SPF_dns_stat_t;
 
-
-
+/*
+ * Additional Error code(s) for DNSSEC validation
+ */
+#ifdef HAVE_LIBVAL
+#define DNSSEC_FAILURE  5               /* DNSSEC validation failed. */
+#endif
 
 /*
  * bundle up the info needed to use a dns method
Index: src/include/spf_dns_resolv.h
===================================================================
--- src/include/spf_dns_resolv.h	2005-05-06 12:50:18.000000000 -0400
+++ src/include/spf_dns_resolv.h	2005-06-01 09:26:51.000000000 -0400
@@ -40,7 +40,20 @@
  * libresolv will be displayed.  This information is often not passed
  * on to (and not needed by) the higher level DNS layers.
  */
+#ifdef HAVE_LIBVAL
+/*
+ * The additional parameter is 'dodnssec' of type integer.  If 'dodnssec' is 0,
+ * DNSSEC validation will not be performed.  If 'dodnssec' is 1, DNSSEC validation
+ * will be performed.
+ */
+SPF_dns_config_t SPF_dns_create_config_sresolv( SPF_dns_config_t layer_below, int debug,
+					       int dodnssec );
+void SPF_dns_reset_config_sresolv( SPF_dns_config_t spfdcid );
+void SPF_dns_destroy_config_sresolv( SPF_dns_config_t spfdcid );
+#endif
+
 SPF_dns_config_t SPF_dns_create_config_resolv( SPF_dns_config_t layer_below, int debug  );
+
 void SPF_dns_reset_config_resolv( SPF_dns_config_t spfdcid );
 void SPF_dns_destroy_config_resolv( SPF_dns_config_t spfdcid );
 
Index: src/include/spf.h
===================================================================
--- src/include/spf.h	2004-04-09 14:56:18.000000000 -0400
+++ src/include/spf.h	2005-05-06 15:32:44.000000000 -0400
@@ -89,7 +89,9 @@
 #define SPF_E_BAD_HOST_IP	27	/* Invalid hostname (possibly an IP address?) */
 #define SPF_E_BAD_HOST_TLD	28	/* Hostname has a missing or invalid TLD */
 #define SPF_E_MECH_AFTER_ALL	29	/* Mechanisms found after the \"all:\" mechanism will be ignored */
-
+#ifdef HAVE_LIBVAL
+#define SPF_E_DNSSEC_FAILURE    30      /* DNSSEC validation failed.    */
+#endif
 
 
 /* ********************************************************************* */
@@ -752,6 +754,15 @@
  */
 void SPF_get_lib_version( int *major, int *minor, int *patch );
 
+/*
+ * Add an error message to list of error messages in the SPF_output_t struct.
+ */
+void SPF_add_output_err (SPF_output_t *output, const char *msg);
+
+/*
+ * Append the list of error messages from old_output to new_output.
+ */
+void SPF_copy_output_errs (SPF_output_t *old_output, SPF_output_t *new_output);
 
 /*
  * Error messages and warnings generated internally by the library call
Index: config.h.in
===================================================================
--- config.h.in	2004-07-08 13:18:43.000000000 -0400
+++ config.h.in	2005-05-29 17:26:29.000000000 -0400
@@ -37,6 +37,9 @@
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
+/* Define to 1 if you have the `crypto' library (-lcrypto). */
+#undef HAVE_LIBCRYPTO
+
 /* Define to 1 if you have the `intl' library (-lintl). */
 #undef HAVE_LIBINTL
 
@@ -46,12 +49,15 @@
 /* Define to 1 if you have the `nsl' library (-lnsl). */
 #undef HAVE_LIBNSL
 
-/* Define to 1 if you have the `resolv' library (-lresolv). */
-#undef HAVE_LIBRESOLV
-
 /* Define to 1 if you have the `socket' library (-lsocket). */
 #undef HAVE_LIBSOCKET
 
+/* Define to 1 if you have the `sres' library (-lsres). */
+#undef HAVE_LIBSRES
+
+/* Define to 1 if you have the `val' library (-lval). */
+#undef HAVE_LIBVAL
+
 /* Define to 1 if your system has a GNU libc compatible `malloc' function, and
    to 0 otherwise. */
 #undef HAVE_MALLOC
@@ -177,6 +183,9 @@
 /* Define to 1 if the system has the type `u_int8_t'. */
 #undef HAVE_U_INT8_T
 
+/* Define to 1 if you have the <val_api.h> header file. */
+#undef HAVE_VAL_API_H
+
 /* Define to 1 if you have the `vfork' function. */
 #undef HAVE_VFORK
 
Index: configure.ac
===================================================================
--- configure.ac	2004-07-07 07:55:34.000000000 -0400
+++ configure.ac	2005-05-29 17:25:22.000000000 -0400
@@ -3,10 +3,10 @@
 
 AC_PREREQ(2.59)
 AC_INIT(libspf2, 1.0.4, wayne@midwestcs.com)
-AM_INIT_AUTOMAKE(libspf2, $PACKAGE_VERSION)
 AC_CONFIG_SRCDIR([src/libspf2/spf.c])
 AC_CONFIG_AUX_DIR(config)
 AM_CONFIG_HEADER(config.h)
+AM_INIT_AUTOMAKE(libspf2, $PACKAGE_VERSION)
 
 # remember the version info for later
 
@@ -83,28 +83,60 @@
 AC_CHECK_HEADERS([libintl.h ])
 AC_CHECK_HEADERS([getopt.h ])
 
+dnl Check DNSSEC Validator library header
+AC_CHECK_HEADERS([val_api.h])
+
 dnl Moved to after header checks by Shevek
-AC_ARG_WITH(bind,
-        [  --with-bind=DIR  Find BIND resolver in DIR],
-        [AC_CHECK_FILE([$withval/include/bind/resolv.h],
-                [CFLAGS="$CFLAGS -I$withval/include/bind"],
-                [CFLAGS="$CFLAGS -I$withval/include"])
-         LDFLAGS="$LDFLAGS -L$withval/lib -Wl,$rpath$withval/lib"
-         AC_CHECK_LIB([bind], [res_query], [LIBS="$LIBS -lbind"],
-                [AC_CHECK_LIB([resolv],
-                        [res_query],
-                        [LIBS="$LIBS -lresolv"],
-                        [echo "cannot find resolver library"; exit 1;])
-                ])
-        ], [AC_CHECK_LIB(resolv, res_query)])
+dnl AC_ARG_WITH(bind,
+dnl         [  --with-bind=DIR  Find BIND resolver in DIR],
+dnl         [AC_CHECK_FILE([$withval/include/bind/resolv.h],
+dnl                 [CFLAGS="$CFLAGS -I$withval/include/bind"],
+dnl                 [CFLAGS="$CFLAGS -I$withval/include"])
+dnl          LDFLAGS="$LDFLAGS -L$withval/lib -Wl,$rpath$withval/lib"
+dnl          AC_CHECK_LIB([bind], [res_query], [LIBS="$LIBS -lbind"],
+dnl                 [AC_CHECK_LIB([resolv],
+dnl                         [res_query],
+dnl                         [LIBS="$LIBS -lresolv"],
+dnl                         [echo "cannot find resolver library"; exit 1;])
+dnl                 ])
+dnl         ], [AC_CHECK_LIB(resolv, res_query)])
 
 # Checks for libraries.
 AC_CHECK_LIB(nsl, inet_pton)
 AC_CHECK_LIB(socket, socket)
 AC_CHECK_LIB(intl, gettext)
 
-
-
+dnl Check libsres
+AC_ARG_WITH(libsres,
+	[  --with-libsres=PATH     Look for the libsres library in PATH],
+	if test "x$withval" != "xyes"; then
+	  if test "x$withval" != x -a -d $withval; then
+	      LDFLAGS="-L$withval $LDFLAGS"
+	      AC_MSG_CHECKING(libsres)
+	      AC_MSG_RESULT("$withval")
+	  fi
+	fi
+)
+
+dnl Check the openssl crypto library
+AC_CHECK_LIB(crypto, RSA_verify, , [
+	echo "the openssl crypto library is required to build this program."
+	exit 1;
+])
+
+dnl Check Secure Resolver Library libsres
+AC_CHECK_LIB(sres, __ns_initparse, , [
+	echo "the secure resolver library is required to build this program."
+	echo "see http://dnssec-tools.sourceforge.net"
+	exit 1;
+])
+
+dnl Check DNSSEC Validator library
+AC_CHECK_LIB(val, val_query, , [
+	echo "the validator library is required to build this program."
+        echo "see http://dnssec-tools.sourceforge.net"
+	exit 1;
+])
 
 # Checks for typedefs, structures, and compiler characteristics.
 AC_C_CONST
