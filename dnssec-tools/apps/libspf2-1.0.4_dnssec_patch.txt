Index: config.h.in
===================================================================
--- config.h.in	2005-02-11 10:46:37.000000000 -0500
+++ config.h.in	2005-02-11 13:18:53.000000000 -0500
@@ -52,6 +52,9 @@
 /* Define to 1 if you have the `socket' library (-lsocket). */
 #undef HAVE_LIBSOCKET
 
+/* Define to 1 if you have the `validat' library (-lvalidat). */
+#undef HAVE_LIBVALIDAT
+
 /* Define to 1 if your system has a GNU libc compatible `malloc' function, and
    to 0 otherwise. */
 #undef HAVE_MALLOC
@@ -177,6 +180,9 @@
 /* Define to 1 if the system has the type `u_int8_t'. */
 #undef HAVE_U_INT8_T
 
+/* Define to 1 if you have the <validat.h> header file. */
+#undef HAVE_VALIDAT_H
+
 /* Define to 1 if you have the `vfork' function. */
 #undef HAVE_VFORK
 
Index: src/include/spf_dns_dnssec.h
===================================================================
--- src/include/spf_dns_dnssec.h	2004-12-06 17:32:57.000000000 -0500
+++ src/include/spf_dns_dnssec.h	2004-12-24 20:53:20.000000000 -0500
@@ -0,0 +1,40 @@
+/* 
+ * Copyright SPARTA, Inc. 2004.  All rights reserved.
+ *
+ */
+
+
+
+
+#ifndef INC_SPF_DNS_DNSSEC
+#define INC_SPF_DNS_DNSSEC
+
+/* For an overview of the DNS layer system, see spf_dns.h */
+
+
+/*
+ * The DNSSEC DNS layer provides DNSSEC validation of DNS queries.
+ */
+
+/*
+ * The dnssec policy specifies what to do when the dnssec-validation
+ * fails.
+ */
+#define DNSSEC_POLICY_IGNORE 0 /* Ignore dnssec validation failure */
+#define DNSSEC_POLICY_WARN   1 /* Return a warning, but continue processing */
+#define DNSSEC_POLICY_ABORT  2 /* Return an error, and abort processing */
+
+/*
+ * These routines take care of creating/destroying/etc. the objects
+ * that hold the DNS layer configuration.  spfdcid objects contain
+ * malloc'ed data, so they must be destroyed when you are finished
+ * with them, or you will leak memory. 
+ */
+
+SPF_dns_config_t SPF_dns_create_config_dnssec( SPF_dns_config_t layer_below,
+					       int debug,
+					       int dnssec_policy);
+void SPF_dns_reset_config_dnssec( SPF_dns_config_t spfdc );
+void SPF_dns_destroy_config_dnssec( SPF_dns_config_t spfdc );
+
+#endif /* INC_SPF_DNS_DNSSEC */
Index: src/include/Makefile.am
===================================================================
--- src/include/Makefile.am	2004-12-06 17:32:38.000000000 -0500
+++ src/include/Makefile.am	2005-02-11 10:55:53.000000000 -0500
@@ -5,7 +5,7 @@
 includedir = ${prefix}/include/spf2
 include_HEADERS	= spf.h spf_lib_version.h \
 		  spf_dns.h spf_dns_cache.h spf_dns_null.h spf_dns_resolv.h \
-		  spf_dns_test.h spf_dns_zone.h
+		  spf_dns_test.h spf_dns_zone.h spf_dns_dnssec.h
 
 noinst_HEADERS = spf_internal.h spf_dns_internal.h spf_sys_config.h \
 		spf_win32_internal.h spf_win32.h spf_dns_windns.h
Index: src/include/spf.h
===================================================================
--- src/include/spf.h	2004-12-06 17:33:42.000000000 -0500
+++ src/include/spf.h	2005-02-14 11:21:33.000000000 -0500
@@ -89,7 +89,8 @@
 #define SPF_E_BAD_HOST_IP	27	/* Invalid hostname (possibly an IP address?) */
 #define SPF_E_BAD_HOST_TLD	28	/* Hostname has a missing or invalid TLD */
 #define SPF_E_MECH_AFTER_ALL	29	/* Mechanisms found after the \"all:\" mechanism will be ignored */
-
+#define SPF_E_DNSSEC_FAIL       30      /* DNSSEC validation failed  Abort further processing.  */
+#define SPF_E_DNSSEC_WARN       31      /* DNSSEC validation failed. Continue processing. */
 
 
 /* ********************************************************************* */
@@ -752,6 +753,15 @@
  */
 void SPF_get_lib_version( int *major, int *minor, int *patch );
 
+/*
+ * Add an error message to list of error messages in the SPF_output_t struct.
+ */
+void SPF_add_output_err (SPF_output_t *output, const char *msg);
+
+/*
+ * Append the list of error messages from old_output to new_output.
+ */
+void SPF_copy_output_errs (SPF_output_t *old_output, SPF_output_t *new_output);
 
 /*
  * Error messages and warnings generated internally by the library call
Index: src/include/spf_dns.h
===================================================================
--- src/include/spf_dns.h	2004-12-06 17:33:23.000000000 -0500
+++ src/include/spf_dns.h	2004-12-03 16:13:29.000000000 -0500
@@ -100,8 +100,11 @@
 #endif
 typedef int SPF_dns_stat_t;
 
-
-
+/*
+ * Additional Error code(s) for DNSSEC validation
+ */
+#define DNSSEC_VALIDATION_FAILURE  5               /* DNSSEC validation failed. Reject mail. */
+#define DNSSEC_VALIDATION_WARNING  6               /* DNSSEC validation failed. Warn user.   */
 
 /*
  * bundle up the info needed to use a dns method
Index: src/libspf2/spf_strerror.c
===================================================================
--- src/libspf2/spf_strerror.c	2005-02-03 13:29:37.000000000 -0500
+++ src/libspf2/spf_strerror.c	2005-02-03 13:28:50.000000000 -0500
@@ -152,6 +152,11 @@
     case SPF_E_MECH_AFTER_ALL:
 	return "Mechanisms found after the \"all:\" mechanism will be ignored";
 	break;
+
+    case SPF_E_DNSSEC_FAIL:
+    case SPF_E_DNSSEC_WARN:
+	return "DNSSEC Validation of SPF record failed.";
+	break;
 	    
     default:
 	return "Unknown SPF error code";
Index: src/libspf2/spf_get_spf.c
===================================================================
--- src/libspf2/spf_get_spf.c	2004-12-06 17:35:35.000000000 -0500
+++ src/libspf2/spf_get_spf.c	2005-02-03 15:28:45.000000000 -0500
@@ -49,6 +49,7 @@
     
     int		i;
     SPF_err_t	err;
+    SPF_err_t   dnssec_err;
     int		num_found;
     
 
@@ -75,6 +76,7 @@
 
     rr_txt = SPF_dns_lookup( spfdcid, domain, ns_t_txt, TRUE );
 
+    dnssec_err = SPF_E_SUCCESS;
     switch( rr_txt->herrno )
     {
     case HOST_NOT_FOUND:
@@ -91,6 +93,23 @@
     case NETDB_SUCCESS:
 	break;
 
+    case DNSSEC_VALIDATION_FAILURE:
+        if (spfic->debug > 1) {
+	  SPF_debugf("SPF_get_spf: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+	}
+        c_results->err = SPF_E_DNSSEC_FAIL;
+	if (c_results->err_msg) free (c_results->err_msg);
+        c_results->err_msg = strdup(SPF_strerror(SPF_E_DNSSEC_FAIL));
+	return SPF_E_DNSSEC_FAIL;
+	break;
+	
+    case DNSSEC_VALIDATION_WARNING:
+        if (spfic->debug > 1) {
+	  SPF_debugf("SPF_get_spf: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+	}
+        dnssec_err = SPF_E_DNSSEC_WARN;
+	break;
+
     default:
 	c_results->err = SPF_E_DNS_ERROR;
 	return SPF_E_DNS_ERROR;
@@ -133,5 +152,18 @@
 	    break;
     }
 
+    if (dnssec_err == SPF_E_DNSSEC_WARN){
+        if (c_results->err_msg != NULL) {
+	    free(c_results->err_msg); /* Should we retain old err_msg? Is there one? */
+	}
+        c_results->err_msg = strdup(SPF_strerror(dnssec_err));
+
+        if ((spfic->debug > 1) && (c_results->err_msg != NULL)) {
+	    SPF_debugf("SPF_get_spf: setting c_results->err_msg to '%s'", c_results->err_msg);
+	}
+
+	c_results->err = dnssec_err;
+    }
+
     return err;
 }
Index: src/libspf2/Makefile.am
===================================================================
--- src/libspf2/Makefile.am	2004-12-06 17:34:33.000000000 -0500
+++ src/libspf2/Makefile.am	2005-02-11 10:57:16.000000000 -0500
@@ -12,7 +12,8 @@
 	spf_verify.c spf_result.c spf_get_spf.c spf_dns_cache.c \
 	spf_dns_resolv.c spf_get_exp.c spf_eval_id.c spf_dns_zone.c \
 	spf_error.c spf_error_default.c spf_error_syslog.c \
-	spf_dns_windns.c spf_win32.c
+	spf_dns_windns.c spf_win32.c \
+	spf_dns_dnssec.c
 
 libspf2_la_LIBADD	= $(top_builddir)/src/libreplace/libreplace.la
 
Index: src/libspf2/spf_result.c
===================================================================
--- src/libspf2/spf_result.c	2005-02-03 13:04:50.000000000 -0500
+++ src/libspf2/spf_result.c	2005-02-09 13:54:45.000000000 -0500
@@ -277,10 +277,34 @@
     
 
     /* add in the optional compiler error keyword */
-    if ( output.err_msg != NULL )
+    if ( ( output.err_msg != NULL ) || ( output.num_errs > 0 ) )
     {
-	p += snprintf( p, p_end - p, " problem=%s;", output.err_msg );
-	if ( p_end - p <= 0 ) return buf;
+	int i;
+	int first=1;
+
+	if ( output.err_msg != NULL ) {
+	    p += snprintf( p, p_end - p, " problem=%s;", output.err_msg );
+	    first=0;;
+
+	    if ( p_end - p <= 0 ) return buf;
+	}
+
+	/* Add other error messages */
+	for ( i = 0; i < output.num_errs; i++ ) {
+	    if ( ( output.err_msgs[i] != NULL ) &&
+                 ( ( output.err_msg == NULL) || ( strcmp( output.err_msgs[i], output.err_msg ) != 0 ) )
+	       ) {
+		if (first == 1) {
+		    p += snprintf( p, p_end - p, " problem=%s;", output.err_msgs[i] );
+		    first = 0;
+		}
+		else {
+		    p += snprintf( p, p_end - p, "%s;", output.err_msgs[i] );
+		}
+
+		if ( p_end - p <= 0 ) return buf;
+	    }
+	}
     }
     else if ( c_results.err_msg != NULL )
     {
@@ -378,8 +402,10 @@
 	    output.reason = SPF_REASON_NONE;
 	    output.err = err;
 	    if ( output.err_msg ) free( output.err_msg );
-	    if ( c_results.err_msg )
+	    if ( c_results.err_msg ) {
 		output.err_msg = strdup( c_results.err_msg );
+		SPF_add_output_err( &output, c_results.err_msg );
+	    }
 	    else
 		output.err_msg = NULL;
 	
@@ -394,10 +420,25 @@
 	    if ( spfic->debug > 0 )
 		SPF_print( c_results.spfid );
 
+	    if ( c_results.err == SPF_E_DNSSEC_WARN ) {
+		SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+	    }
 	}
 	
     }
     
+    if (spfic->debug > 1) {
+        if (output.num_errs > 0) {
+	    int i;
+	    SPF_debugf("SPF_result: err_msgs = ");
+	    for (i=0; i<output.num_errs; i++) {
+		SPF_debugf("%s;",output.err_msgs[i]);
+	    }
+        }
+        else {
+	    SPF_debugf("SPF_result: err_msgs = None");
+        }
+    }
 
     SPF_result_comments( spfcid, spfdcid, c_results, &output );
 
@@ -449,8 +490,10 @@
 	    output.reason = SPF_REASON_NONE;
 	    output.err = err;
 	    if ( output.err_msg ) free( output.err_msg );
-	    if ( c_results.err_msg )
+	    if ( c_results.err_msg ) {
 		output.err_msg = strdup( c_results.err_msg );
+		SPF_add_output_err( &output, c_results.err_msg );
+	    }
 	    else
 		output.err_msg = NULL;
 	
@@ -465,10 +508,25 @@
 	    if ( spfic->debug > 0 )
 		SPF_print( c_results.spfid );
 
+	    if ( c_results.err == SPF_E_DNSSEC_WARN ) {
+		SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+	    }
 	}
 	
     }
     
+    if (spfic->debug > 1) {
+        if (output.num_errs > 0) {
+	    int i;
+	    SPF_debugf("SPF_result_helo: err_msgs = ");
+	    for (i=0; i<output.num_errs; i++) {
+		SPF_debugf("%s;",output.err_msgs[i]);
+	    }
+        }
+        else {
+	    SPF_debugf("SPF_result_helo: err_msgs = None");
+        }
+    }
 
     SPF_result_comments( spfcid, spfdcid, c_results, &output );
 
Index: src/libspf2/spf_eval_id.c
===================================================================
--- src/libspf2/spf_eval_id.c	2005-02-03 13:24:58.000000000 -0500
+++ src/libspf2/spf_eval_id.c	2005-02-14 12:59:10.000000000 -0500
@@ -204,6 +204,88 @@
     return *output;
 }
 
+/* Add a new error message to the end of the output->err_msgs list */
+void SPF_add_output_err (SPF_output_t *output,
+			    const char *msg)
+{
+    if ((output != NULL) && (msg != NULL)) {
+	char **new_err_msgs;
+	int i;
+
+	if (output->num_errs < 0) {
+	    output->num_errs = 0;
+	}
+
+	(output->num_errs)++;
+
+	new_err_msgs = (char **) malloc (output->num_errs * sizeof(char *));
+	if (new_err_msgs == NULL) {
+	    /* return E_NO_MEM? */
+	}
+
+	for (i=0; i<(output->num_errs - 1); i++) {
+	    new_err_msgs[i] = output->err_msgs[i];
+	}
+
+	new_err_msgs[output->num_errs - 1] = strdup(msg);
+
+	if (output->err_msgs) free (output->err_msgs);
+	output->err_msgs = new_err_msgs;
+	
+	if (output->err_msg) free (output->err_msg);
+	output->err_msg = strdup(msg);
+	
+    }
+}
+
+/* Append the list of error messages from old_output to new_output */
+void SPF_copy_output_errs (SPF_output_t *old_output, SPF_output_t *new_output)
+{
+    if ((old_output != NULL) &&
+	(new_output != NULL) &&
+	(old_output->num_errs > 0)) {
+
+	char ** new_err_msgs;
+	int new_num_errs = old_output->num_errs;
+	int i;
+
+	if (new_output->num_errs > 0) {
+	    new_num_errs += new_output->num_errs;
+	}
+	else {
+	    new_output->num_errs = 0;
+	}
+
+	new_err_msgs = (char **) malloc (new_num_errs * sizeof (char *));
+	if (new_err_msgs == NULL) {
+	    /* return E_NO_MEM? */
+	}
+	
+	/* retain error messages in new_output */
+	for (i=0; i<new_output->num_errs; i++) {
+	    new_err_msgs[i] = new_output->err_msgs[i];
+	}
+
+	/* duplicate error messages in old_output */
+	for (i=new_output->num_errs; i<new_num_errs; i++) {
+	    if (old_output->err_msgs[i-new_output->num_errs]) {
+		new_err_msgs[i] = strdup (old_output->err_msgs[i-new_output->num_errs]);
+	    }
+	    else {
+		new_err_msgs[i] = strdup("");
+	    }
+	}
+
+	if (new_output->err_msgs) free (new_output->err_msgs);
+	new_output->err_msgs = new_err_msgs;
+	new_output->num_errs = new_num_errs;
+
+	if (old_output->err_msg != NULL) {
+	    if (new_output->err_msg) free (new_output->err_msg);
+	    new_output->err_msg = strdup (old_output->err_msg);
+	}
+    }
+}
 
 SPF_output_t SPF_eval_id( SPF_config_t spfcid, SPF_id_t spfid,
 			    SPF_dns_config_t spfdcid,
@@ -401,6 +483,26 @@
 	    if( rr_a->herrno == TRY_AGAIN )
 		return done( SPF_RESULT_ERROR, SPF_REASON_MECH,
 			     SPF_E_DNS_ERROR );
+
+	    if (rr_a->herrno == DNSSEC_VALIDATION_FAILURE) {
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+		}
+		SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+	        return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAIL );
+	    }
+	    
+	    if (rr_a->herrno == DNSSEC_VALIDATION_WARNING) {
+		char errstr[128];
+
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+		}
+
+		snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", lookup);
+	        SPF_add_output_err (&output, errstr);
+	    }
 	    
 	    for( i = 0; i < rr_a->num_rr; i++ )
 	    {
@@ -457,6 +559,26 @@
 		return done( SPF_RESULT_ERROR, SPF_REASON_MECH,
 			     SPF_E_DNS_ERROR );
 	    
+	    if (rr_mx->herrno == DNSSEC_VALIDATION_FAILURE) {
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+		}
+		SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+	        return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAIL );
+	    }
+	    
+	    if (rr_mx->herrno == DNSSEC_VALIDATION_WARNING) {
+		char errstr[128];
+
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+		}
+
+		snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for MX record of %s.", lookup);
+	        SPF_add_output_err (&output, errstr);
+	    }
+	    
 	    max_mx = rr_mx->num_rr;
 	    if ( max_mx > spfic->max_dns_mx )
 		max_mx = spfic->max_dns_mx;
@@ -483,6 +605,26 @@
 		    return done( SPF_RESULT_ERROR, SPF_REASON_MECH,
 				 SPF_E_DNS_ERROR );
 	    
+		if (rr_a->herrno == DNSSEC_VALIDATION_FAILURE) {
+		    if (spfic->debug > 1) {
+			SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+		    }
+		    SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+		    return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+				 SPF_E_DNSSEC_FAIL );
+		}
+		
+		if (rr_a->herrno == DNSSEC_VALIDATION_WARNING) {
+		    char errstr[128];
+		    
+		    if (spfic->debug > 1) {
+			SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+		    }
+		    
+		    snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", rr_mx->rr[j]->mx);
+		    SPF_add_output_err (&output, errstr);
+		}
+	    
 		for( i = 0; i < rr_a->num_rr; i++ )
 		{
 		    if ( rr_a->rr_type != fetch_ns_type )
@@ -570,6 +712,26 @@
 		    if( rr_a->herrno == TRY_AGAIN )
 			return done( SPF_RESULT_ERROR, SPF_REASON_MECH, SPF_E_DNS_ERROR );
 	    
+		    if (rr_a->herrno == DNSSEC_VALIDATION_FAILURE) {
+			if (spfic->debug > 1) {
+			    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+			}
+			SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+			return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+				     SPF_E_DNSSEC_FAIL );
+		    }
+		    
+		    if (rr_a->herrno == DNSSEC_VALIDATION_WARNING) {
+			char errstr[128];
+			
+			if (spfic->debug > 1) {
+			    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+			}
+			
+			snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", rr_ptr->rr[i]->ptr);
+			SPF_add_output_err (&output, errstr);
+		    }
+	    
 		    for( j = 0; j < rr_a->num_rr; j++ )
 		    {
 			if ( spfic->debug )
@@ -654,6 +816,26 @@
 		    if( rr_aaaa->herrno == TRY_AGAIN )
 			return done( SPF_RESULT_ERROR, SPF_REASON_MECH, SPF_E_DNS_ERROR );
 	    
+		    if (rr_aaaa->herrno == DNSSEC_VALIDATION_FAILURE) {
+			if (spfic->debug > 1) {
+			    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+			}
+			SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+			return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+				     SPF_E_DNSSEC_FAIL );
+		    }
+		    
+		    if (rr_aaaa->herrno == DNSSEC_VALIDATION_WARNING) {
+			char errstr[128];
+			
+			if (spfic->debug > 1) {
+			    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+			}
+			
+			snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", rr_ptr->rr[i]->ptr);
+			SPF_add_output_err (&output, errstr);
+		    }
+	    
 		    for( j = 0; j < rr_aaaa->num_rr; j++ )
 		    {
 			if ( spfic->debug )
@@ -745,8 +927,16 @@
 
 		SPF_set_cur_dom( spfcid, save_cur_dom );
 		free( save_cur_dom );
+
+		if ( c_results.err == SPF_E_DNSSEC_WARN ) {
+		    SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+		}
 		SPF_reset_c_results( &c_results );
 
+		if (inc_out.num_errs > 0) {
+		    SPF_copy_output_errs (&inc_out, &output);
+		}
+
 		if ( spfic->debug > 0 )
 		    SPF_debugf( "include:  executed SPF record:  %s  result: %s  reason: %s",
 			    SPF_strerror( inc_out.err ),
@@ -787,6 +977,17 @@
 	    }
 	    else if ( err == SPF_E_DNS_ERROR )
 		return done( SPF_RESULT_ERROR, SPF_REASON_NONE, err );
+	    else if ( err == SPF_E_DNSSEC_FAIL ) {
+		if ( c_results.err_msg ) {
+		    output.err_msg = strdup( c_results.err_msg );
+		    SPF_add_output_err( &output, c_results.err_msg );
+		}
+		else {
+		    SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+		}
+		return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAIL );
+	    }
 	    else
 		return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE, err );
 	    
@@ -829,6 +1030,26 @@
 		return done( SPF_RESULT_ERROR, SPF_REASON_MECH, SPF_E_DNS_ERROR );
 	    
 	    
+	    if (rr_a->herrno == DNSSEC_VALIDATION_FAILURE) {
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_FAILURE");
+		}
+		SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+	        return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAIL );
+	    }
+	    
+	    if (rr_a->herrno == DNSSEC_VALIDATION_WARNING) {
+		char errstr[128];
+
+	        if (spfic->debug > 1) {
+		    SPF_debugf("SPF_eval_id: spf_dns_lookup returned DNSSEC_VALIDATION_WARNING");
+		}
+
+		snprintf(errstr, sizeof(errstr), "DNSSEC Validation failed for A record of %s.", lookup);
+	        SPF_add_output_err (&output, errstr);
+	    }
+	    
 	    if ( rr_a->num_rr > 0 )
 		return done( mech->prefix_type, SPF_REASON_MECH, SPF_E_SUCCESS );
 	    
@@ -876,8 +1097,16 @@
 		SPF_set_cur_dom( spfcid, lookup );
 		inc_out = SPF_eval_id( spfcid, c_results.spfid, spfdcid,
 				       TRUE, FALSE, num_dns_mech );
+
+		if ( c_results.err == SPF_E_DNSSEC_WARN ) {
+		    SPF_add_output_err( &output, SPF_strerror( c_results.err ) );
+		}
 		SPF_reset_c_results( &c_results );
 
+		if (inc_out.num_errs > 0) {
+		    SPF_copy_output_errs (&inc_out, &output);
+		}
+
 		if ( spfic->debug > 0 )
 		    SPF_debugf( "redirect:  executed SPF record:  %s  result: %s  reason: %s",
 			    SPF_strerror( inc_out.err ),
@@ -891,6 +1120,17 @@
 	    }
 	    else if ( err == SPF_E_DNS_ERROR )
 		return done( SPF_RESULT_ERROR, SPF_REASON_NONE, err );
+	    else if ( err == SPF_E_DNSSEC_FAIL ) {
+		if ( c_results.err_msg ) {
+		    output.err_msg = strdup( c_results.err_msg );
+		    SPF_add_output_err( &output, c_results.err_msg );
+		}
+		else {
+		    SPF_add_output_err( &output, SPF_strerror( SPF_E_DNSSEC_FAIL ) );
+		}
+		return done( SPF_RESULT_UNKNOWN, SPF_REASON_NONE,
+			     SPF_E_DNSSEC_FAIL );
+	    }
 	    else
 		return done( mech->prefix_type, SPF_REASON_MECH, err );
 	    
Index: src/libspf2/spf_dns_dnssec.c
===================================================================
--- src/libspf2/spf_dns_dnssec.c	2004-12-06 17:35:00.000000000 -0500
+++ src/libspf2/spf_dns_dnssec.c	2005-02-11 13:45:26.000000000 -0500
@@ -0,0 +1,231 @@
+/* 
+ * Copyright SPARTA, Inc. 2004.  All rights reserved.
+ * See the COPYING file distributed with this patch for details.
+ */
+
+#include "spf_sys_config.h"
+
+#ifdef STDC_HEADERS
+# include <stdio.h>        /* stdin / stdout */
+# include <stdlib.h>       /* malloc / free */
+#endif
+
+
+#ifdef HAVE_STRING_H
+# include <string.h>       /* strstr / strdup */
+#else
+# ifdef HAVE_STRINGS_H
+#  include <strings.h>       /* strstr / strdup */
+# endif
+#endif
+
+#ifdef HAVE_MEMORY_H
+#include <memory.h>
+#endif
+#if TIME_WITH_SYS_TIME
+# include <sys/time.h>
+# include <time.h>
+#else
+# if HAVE_SYS_TIME_H
+#  include <sys/time.h>
+# else
+#  include <time.h>
+# endif
+#endif
+
+#ifdef HAVE_NETDB_H
+# include <netdb.h>
+#endif
+
+#ifdef HAVE_VALIDAT_H
+#include <validat.h>
+#endif
+
+#include "spf.h"
+#include "spf_dns.h"
+#include "spf_internal.h"
+#include "spf_dns_internal.h"
+#include "spf_dns_cache.h"
+#include "spf_dns_dnssec.h"
+
+#ifndef bool
+#define bool	int
+#define TRUE	1
+#define FALSE	0
+#endif /* ! bool */
+
+typedef struct
+{
+    int	debug;
+    int dnssec_policy;
+} SPF_dns_dnssec_config_t; 
+
+
+SPF_dns_rr_t SPF_dns_servfail = 
+{(char *)"", 0, ns_t_any, 0, NULL, NULL,  0, 0, 0, TRY_AGAIN, NULL, NULL };
+
+static inline SPF_dns_dnssec_config_t *SPF_voidp2spfhook( void *hook ) 
+    { return (SPF_dns_dnssec_config_t *)hook; }
+static inline void *SPF_spfhook2voidp( SPF_dns_dnssec_config_t *spfhook ) 
+    { return (void *)spfhook; }
+
+
+static bool SPF_dns_dnssec_validate (SPF_dns_dnssec_config_t *spfdcid, SPF_dns_rr_t *rr)
+{
+    char *rdata;
+    val_result_t val_result;
+
+    if (rr == NULL) {
+        if ( spfdcid->debug > 0 )
+	    SPF_debugf( "libspf2::SPF_dns_dnssec_validate: Cannot validate NULL RR");
+
+        return FALSE;
+    }
+
+    if (val_init() < 0) {
+	SPF_debugf( "libspf2::SPF_dns_dnssec_validate: Error: could not initialize the DNSSEC Validator.\n");
+	return FALSE;
+    }
+
+    rdata = (char *)((rr->rr == NULL) ? NULL : rr->rr[0]);
+
+    val_result = val_check (rr->domain, C_IN, rr->rr_type, rdata);
+    SPF_debugf( "libspf2::SPF_dns_dnssec_validate: val_result returned %d\n",
+		val_result);
+    
+    if (val_result == VAL_SUCCESS) {
+        return TRUE;
+    }
+    
+    return FALSE;
+}
+
+static SPF_dns_rr_t *SPF_dns_lookup_dnssec( SPF_dns_config_t spfdcid, const char *domain, ns_type rr_type, int should_cache )
+{
+    SPF_dns_iconfig_t		*spfdic = SPF_dcid2spfdic( spfdcid );
+    SPF_dns_dnssec_config_t	*spfhook = SPF_voidp2spfhook( spfdic->hook );
+
+    SPF_dns_rr_t *fetched_rr;
+
+    if ( spfdic->layer_below ) {
+	fetched_rr = SPF_dcid2spfdic( spfdic->layer_below )->lookup( spfdic->layer_below, domain, rr_type, should_cache );
+    }
+    else {
+        if ( spfhook->debug > 0 )
+	    SPF_debugf( "libspf2::spf_dns_dnssec: the dns layer below not specified.");
+
+	return &SPF_dns_servfail;
+    }
+
+    if (rr_type == ns_t_ptr) {
+        if ( spfhook->debug > 0 )
+	    SPF_debugf( "libspf2::spf_dns_dnssec: Record type is PTR.  Not performing DNSSEC validation.");
+
+        return fetched_rr;
+    }
+
+    if (spfhook->dnssec_policy == DNSSEC_POLICY_IGNORE) {
+        if ( spfhook->debug > 0 )
+	    SPF_debugf( "libspf2::spf_dns_dnssec: dnssec_policy is IGNORE.  Not performing DNSSEC validation.");
+
+        return fetched_rr;
+    }
+
+    if ((fetched_rr == NULL) || (fetched_rr->herrno != NETDB_SUCCESS)) {
+        if ( spfhook->debug > 0 )
+	    SPF_debugf( "libspf2::spf_dns_dnssec: lookup of %s failed with error %d.", domain, fetched_rr->herrno );
+
+	return fetched_rr;
+    }
+
+    /* dnssec-validate the fetched rr */
+    if (SPF_dns_dnssec_validate (spfhook, fetched_rr)) {
+        if ( spfhook->debug > 0 )
+	    SPF_debugf( "libspf2::spf_dns_dnssec: DNSSEC validation of %s successful.", fetched_rr->domain );
+    }
+    else {
+
+        if (spfhook->dnssec_policy == DNSSEC_POLICY_ABORT) {
+	    fetched_rr->herrno = DNSSEC_VALIDATION_FAILURE;
+	    if ( spfhook->debug > 0 )
+	        SPF_debugf( "libspf2::spf_dns_dnssec: DNSSEC validation of %s failed.  Abort processing.", fetched_rr->domain );
+	}
+	else { /* spfhook->dnssec_policy == DNSSEC_POLICY_WARN */
+	    fetched_rr->herrno = DNSSEC_VALIDATION_WARNING;
+	    if ( spfhook->debug > 0 )
+	        SPF_debugf( "libspf2::spf_dns_dnssec: WARNING: DNSSEC validation of %s failed.", fetched_rr->domain );
+	}
+    }
+
+    return fetched_rr;
+}
+
+SPF_dns_config_t SPF_dns_create_config_dnssec( SPF_dns_config_t layer_below, int debug, int dnssec_policy )
+{
+    SPF_dns_iconfig_t     *spfdic;
+    SPF_dns_dnssec_config_t *spfhook;
+    
+    if ( layer_below == NULL )
+	SPF_error( "layer_below is NULL." );
+
+    spfdic = malloc( sizeof( *spfdic ) );
+    if ( spfdic == NULL )
+	return NULL;
+
+    spfdic->hook = malloc( sizeof( SPF_dns_dnssec_config_t ) );
+    if ( spfdic->hook == NULL )
+    {
+	free( spfdic );
+	return NULL;
+    }
+    
+    spfdic->destroy     = SPF_dns_destroy_config_dnssec;
+    spfdic->lookup      = SPF_dns_lookup_dnssec;
+    spfdic->get_spf     = NULL;
+    spfdic->get_exp     = NULL;
+    spfdic->add_cache   = NULL;
+    spfdic->layer_below = layer_below;
+    spfdic->name        = "dnssec";
+
+    spfhook = SPF_voidp2spfhook( spfdic->hook );
+
+    spfhook->debug         = debug; /* not needed */
+    spfhook->dnssec_policy = dnssec_policy;
+    SPF_debugf( "libspf2::spf_dns_create_config_dnssec: debug is %d, dnssec_policy is %d.", debug, dnssec_policy );
+
+    SPF_dns_servfail.source = SPF_spfdic2dcid( spfdic );
+    
+    return SPF_spfdic2dcid( spfdic );
+}
+
+void SPF_dns_reset_config_dnssec( SPF_dns_config_t spfdcid )
+{
+    SPF_dns_iconfig_t		*spfdic = SPF_dcid2spfdic( spfdcid );
+    SPF_dns_dnssec_config_t	*spfhook;
+
+    if ( spfdcid == NULL )
+	SPF_error( "spfdcid is NULL" );
+
+    spfhook = SPF_voidp2spfhook( spfdic->hook );
+    if ( spfhook == NULL )
+	SPF_error( "spfdcid.hook is NULL" );
+
+    SPF_dns_servfail.source = spfdcid;
+}
+
+void SPF_dns_destroy_config_dnssec( SPF_dns_config_t spfdcid )
+{
+    SPF_dns_iconfig_t     *spfdic = SPF_dcid2spfdic( spfdcid );
+    SPF_dns_dnssec_config_t	*spfhook;
+
+    if ( spfdcid == NULL )
+	SPF_error( "spfdcid is NULL" );
+
+    spfhook = SPF_voidp2spfhook( spfdic->hook );
+    if ( spfhook )
+    {
+	free( spfhook );
+    }
+    
+    free( spfdic );
+}
Index: configure.ac
===================================================================
--- configure.ac	2005-02-11 10:47:53.000000000 -0500
+++ configure.ac	2005-02-11 12:27:38.000000000 -0500
@@ -83,6 +83,9 @@
 AC_CHECK_HEADERS([libintl.h ])
 AC_CHECK_HEADERS([getopt.h ])
 
+dnl Check DNSSEC Validator library header
+AC_CHECK_HEADERS([validat.h])
+
 dnl Moved to after header checks by Shevek
 AC_ARG_WITH(bind,
         [  --with-bind=DIR  Find BIND resolver in DIR],
@@ -103,6 +106,8 @@
 AC_CHECK_LIB(socket, socket)
 AC_CHECK_LIB(intl, gettext)
 
+dnl Check DNSSEC Validator library header
+AC_CHECK_LIB(validat, val_init)
 
 
 
