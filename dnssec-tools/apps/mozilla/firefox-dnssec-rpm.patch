diff -u -r --new-file mozilla/browser/components/preferences/content.xul mozilla.mine/browser/components/preferences/content.xul
--- mozilla/browser/components/preferences/content.xul	2005-09-30 18:24:06.000000000 -0700
+++ mozilla.mine/browser/components/preferences/content.xul	2006-02-02 16:23:59.000000000 -0800
@@ -57,6 +57,9 @@
       <preference id="pref.advanced.javascript.disable_button.advanced"
                   name="pref.advanced.javascript.disable_button.advanced"
                   type="bool"/>
+      <preference id="network.dnssec.dnssecBehavior"
+                  name="network.dnssec.dnssecBehavior"
+                  type="int"/>
     </preferences>
     
     <script type="application/x-javascript" src="chrome://mozapps/content/preferences/fontbuilder.js"/>
@@ -114,6 +117,25 @@
             </vbox>
           </row>
           <separator class="thin"/>
+
+          <row id="dnssecRow">
+            <hbox align="center">
+              <label control="defaultFont" accesskey="&dnssecBehaviorLabel.accesskey;">&dnssecBehaviorLabel.label;</label>
+   	      <menulist id="networkDnssecBehaviour"
+   	                  preference="network.dnssec.dnssecBehavior">
+                <menupopup>
+   	          <menuitem value="2" label="&neverDNSSecure.label;" />
+   	          <menuitem value="1" label="&possibleDNSSecure.label;"/>
+   	          <menuitem value="0" label="&allDNSSecure.label;"/>
+                </menupopup>
+   	      </menulist>
+            </hbox>
+          </row>
+          <separator class="thin"/>
+
+
+
+
           <row id="advancedJavaAllowRow">
             <vbox align="start">
               <checkbox id="advancedJavaAllow" label="&enbJavaCheck.label;" accesskey="&enbJavaCheck.accesskey;"
diff -u -r --new-file mozilla/browser/components/preferences/dnssec.xul mozilla.mine/browser/components/preferences/dnssec.xul
--- mozilla/browser/components/preferences/dnssec.xul	1969-12-31 16:00:00.000000000 -0800
+++ mozilla.mine/browser/components/preferences/dnssec.xul	2006-02-01 10:56:18.000000000 -0800
@@ -0,0 +1,65 @@
+<?xml version="1.0"?> 
+
+<?xml-stylesheet href="chrome://communicator/skin/" type="text/css"?>
+
+<!DOCTYPE page [
+<!ENTITY % brandDTD SYSTEM "chrome://global/locale/brand.dtd" >
+%brandDTD;
+<!ENTITY % prefDnssecDTD SYSTEM "chrome://cookie/locale/pref-dnssec.dtd" >
+%prefDnssecDTD;
+]>
+
+<page id="dnssecPanel" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+      onload="init();"
+      headertitle="&dnssecHeader;">
+          
+  <script type="application/x-javascript" src="chrome://cookie/content/cookieOverlay.js"/>
+
+  <script type="application/x-javascript">
+  <![CDATA[
+  
+  var panel = "chrome://cookie/content/pref-dnssec.xul";
+  var _elementIDs = ["networkDnssecBehaviour"];
+
+  function init()
+  {
+    parent.initPanel('chrome://cookie/content/pref-dnssec.xul');
+
+    setDisables();
+  }
+
+  function setDisables()
+  {
+    var dnssecBehavior = document.getElementById("networkDnssecBehaviour");
+
+    // if mailnews is installed then we will have networkDnssecDisableDnssecInMailNews checkbox
+    var networkDnssecDisableDnssecInMailNews = document.getElementById("networkDnssecDisableDnssecInMailNews");
+    if (networkDnssecDisableDnssecInMailNews)
+      networkDnssecDisableDnssecInMailNews.disabled = (dnssecBehavior.value == 2); 
+  }
+
+  ]]>
+  </script>
+
+  <broadcaster id="haveDnssecBlocking"/>
+  <broadcaster id="haveDnssecBlockingOrMailnews"/>
+
+  <groupbox id="dnssecArea">
+    <caption label="&dnsSecurity.label;"/>
+
+    <description>&dnssecDetails;</description>
+
+    <radiogroup id="networkDnssecBehaviour"
+                prefstring="network.dnssec.dnssecBehavior">
+      <radio value="2" label="&neverDNSSecure.label;"
+             accesskey="&neverDNSSecure.accesskey;"
+             oncommand="setDisables();"/>
+      <radio value="1" label="&possibleDNSSecure.label;"
+             accesskey="&possibleDNSSecure.accesskey;"
+             oncommand="setDisables();"/>
+      <radio value="0" label="&allDNSSecure.label;"
+             accesskey="&allDNSSecure.accesskey;"
+             oncommand="setDisables();"/>
+    </radiogroup>
+  </groupbox>
+</page>
diff -u -r --new-file mozilla/browser/locales/en-US/chrome/browser/preferences/content.dtd mozilla.mine/browser/locales/en-US/chrome/browser/preferences/content.dtd
--- mozilla/browser/locales/en-US/chrome/browser/preferences/content.dtd	2005-09-30 18:24:06.000000000 -0700
+++ mozilla.mine/browser/locales/en-US/chrome/browser/preferences/content.dtd	2006-02-02 16:24:12.000000000 -0800
@@ -33,3 +33,16 @@
 <!ENTITY  defaultFont.label                 "Default Font:">
 <!ENTITY  defaultFont.accesskey             "F">
 
+<!ENTITY dnssecDetails                   "Require DNS Security when resolving host names.">
+
+<!ENTITY  dnssecBehaviorLabel.label     "DNS Security Behavior:">
+<!ENTITY  dnssecBehaviorLabel.accesskey "D">
+
+<!ENTITY allDNSSecure.label             "Require all DNS lookups to be secure">
+<!ENTITY allDNSSecure.accesskey         "A">
+
+<!ENTITY possibleDNSSecure.label        "Use DNS security if possible.">
+<!ENTITY possibleDNSSecure.accesskey    "P">
+
+<!ENTITY neverDNSSecure.label           "Ignore DNS security.">
+<!ENTITY neverDNSSecure.accesskey       "N">
diff -u -r --new-file mozilla/browser/locales/en-US/chrome/overrides/appstrings.properties mozilla.mine/browser/locales/en-US/chrome/overrides/appstrings.properties
--- mozilla/browser/locales/en-US/chrome/overrides/appstrings.properties	2005-09-02 14:39:52.000000000 -0700
+++ mozilla.mine/browser/locales/en-US/chrome/overrides/appstrings.properties	2006-02-01 10:56:18.000000000 -0800
@@ -37,6 +37,7 @@
 malformedURI=The URL is not valid and cannot be loaded.
 fileNotFound=Firefox can't find the file at %S.
 dnsNotFound=Firefox can't find the server at %S.
+dnsDNSSECError=%S failed its DNSSEC security check validation. Please contact a security or system administrator for help.
 protocolNotFound=Firefox doesn't know how to open this address, because the protocol (%S) isn't associated with any program.
 connectionFailure=Firefox can't establish a connection to the server at %S.
 netInterrupt=The connection to %S was interrupted while the page was loading.
diff -u -r --new-file mozilla/browser/locales/en-US/chrome/overrides/netError.dtd mozilla.mine/browser/locales/en-US/chrome/overrides/netError.dtd
--- mozilla/browser/locales/en-US/chrome/overrides/netError.dtd	2005-08-29 13:10:06.000000000 -0700
+++ mozilla.mine/browser/locales/en-US/chrome/overrides/netError.dtd	2006-02-01 10:56:18.000000000 -0800
@@ -25,6 +25,9 @@
 </ul>
 ">
 
+<!ENTITY dnsDNSSECError.title "DNSSEC Validation Error">
+<!ENTITY dnsDNSSECError.longDesc "The address (URL) failed its DNSSEC security check validation.  Please contact a system administrator for help.">
+
 <!ENTITY fileNotFound.title "File not found">
 <!ENTITY fileNotFound.longDesc "
 <ul>
diff -u -r --new-file mozilla/config/autoconf.mk.in mozilla.mine/config/autoconf.mk.in
--- mozilla/config/autoconf.mk.in	2006-02-03 10:44:32.000000000 -0800
+++ mozilla.mine/config/autoconf.mk.in	2006-02-03 10:40:23.000000000 -0800
@@ -242,7 +242,7 @@
 OS_COMPILE_CXXFLAGS = $(OS_CPPFLAGS) @COMPILE_CXXFLAGS@
 
 OS_INCLUDES	= $(NSPR_CFLAGS) $(JPEG_CFLAGS) $(PNG_CFLAGS) $(ZLIB_CFLAGS)
-OS_LIBS		= @LIBS@
+OS_LIBS		= @VAL_LIBS@ @LIBS@
 ACDEFINES	= @MOZ_DEFINES@
 
 MOZ_OPTIMIZE	= @MOZ_OPTIMIZE@
@@ -459,12 +459,14 @@
 GTK_CONFIG	= @GTK_CONFIG@
 TK_CFLAGS	= @TK_CFLAGS@
 TK_LIBS		= @TK_LIBS@
+VALIDAT_LIBS	= @VALIDAT_LIBS@
 
 MOZ_TOOLKIT_REGISTRY_CFLAGS = \
 	-DWIDGET_DLL=@WIDGET_DLL@ \
 	-DGFXWIN_DLL=@GFXWIN_DLL@ \
 	$(TK_CFLAGS)
 
+SYSTEM_VALIDAT          = @SYSTEM_VALIDAT@
 MOZ_ENABLE_CAIRO_GFX	= @MOZ_ENABLE_CAIRO_GFX@
 MOZ_ENABLE_GTK		= @MOZ_ENABLE_GTK@
 MOZ_ENABLE_GTK2		= @MOZ_ENABLE_GTK2@
diff -u -r --new-file mozilla/docshell/base/nsWebShell.cpp mozilla.mine/docshell/base/nsWebShell.cpp
--- mozilla/docshell/base/nsWebShell.cpp	2005-10-18 06:36:50.000000000 -0700
+++ mozilla.mine/docshell/base/nsWebShell.cpp	2006-02-01 10:56:18.000000000 -0800
@@ -827,6 +827,7 @@
 
     // Errors to be shown only on top-level frames
     if ((aStatus == NS_ERROR_UNKNOWN_HOST || 
+         aStatus == NS_ERROR_DNSSEC_VALIDATION_ERROR ||
          aStatus == NS_ERROR_CONNECTION_REFUSED ||
          aStatus == NS_ERROR_UNKNOWN_PROXY_HOST || 
          aStatus == NS_ERROR_PROXY_CONNECTION_REFUSED) &&
diff -u -r --new-file mozilla/docshell/resources/content/netError.xhtml mozilla.mine/docshell/resources/content/netError.xhtml
--- mozilla/docshell/resources/content/netError.xhtml	2005-10-03 12:34:55.000000000 -0700
+++ mozilla.mine/docshell/resources/content/netError.xhtml	2006-02-01 10:56:18.000000000 -0800
@@ -145,6 +145,7 @@
     <div id="errorContainer">
       <div id="errorTitlesContainer">
         <h1 id="et_generic">&generic.title;</h1>
+        <h1 id="et_dnsDNSSECError">&dnsDNSSECError.title;</h1>
         <h1 id="et_dnsNotFound">&dnsNotFound.title;</h1>
         <h1 id="et_fileNotFound">&fileNotFound.title;</h1>
         <h1 id="et_malformedURI">&malformedURI.title;</h1>
@@ -163,6 +164,7 @@
       <div id="errorDescriptionsContainer">
         <div id="ed_generic">&generic.longDesc;</div>
         <div id="ed_dnsNotFound">&dnsNotFound.longDesc;</div>
+        <div id="ed_dnsDNSSECError">&dnsDNSSECError.longDesc;</div>
         <div id="ed_fileNotFound">&fileNotFound.longDesc;</div>
         <div id="ed_malformedURI">&malformedURI.longDesc;</div>
         <div id="ed_protocolNotFound">&protocolNotFound.longDesc;</div>
diff -u -r --new-file mozilla/dom/locales/en-US/chrome/appstrings.properties mozilla.mine/dom/locales/en-US/chrome/appstrings.properties
--- mozilla/dom/locales/en-US/chrome/appstrings.properties	2005-02-20 10:10:14.000000000 -0800
+++ mozilla.mine/dom/locales/en-US/chrome/appstrings.properties	2006-02-01 10:56:18.000000000 -0800
@@ -37,6 +37,7 @@
 malformedURI=The URL is not valid and cannot be loaded.
 fileNotFound=The file %S cannot be found. Please check the location and try again.
 dnsNotFound=%S could not be found. Please check the name and try again.
+dnsDNSSECError=%S failed its DNSSEC security check validation. Please contact a security or system administrator for help.
 protocolNotFound=%S is not a registered protocol.
 connectionFailure=The connection was refused when attempting to contact %S.
 netInterrupt=The connection to %S has terminated unexpectedly. Some data may have been transferred.
diff -u -r --new-file mozilla/dom/locales/en-US/chrome/netError.dtd mozilla.mine/dom/locales/en-US/chrome/netError.dtd
--- mozilla/dom/locales/en-US/chrome/netError.dtd	2005-08-21 20:23:35.000000000 -0700
+++ mozilla.mine/dom/locales/en-US/chrome/netError.dtd	2006-02-01 10:56:18.000000000 -0800
@@ -12,6 +12,9 @@
 <!ENTITY dnsNotFound.title "Address Not Found">
 <!ENTITY dnsNotFound.longDesc "<p>The browser could not find the host server for the provided address.</p><ul><li>Did you make a mistake when typing the domain? (e.g. <q><strong>ww</strong>.mozilla.org</q> instead of <q><strong>www</strong>.mozilla.org</q>)</li><li>Are you certain this domain address exists?  Its registration may have expired.</li><li>Are you unable to browse other sites?  Check your network connection and DNS server settings.</li><li>Is your computer or network protected by a firewall or proxy?  Incorrect settings can interfere with Web browsing.</li></ul>">
 
+<!ENTITY dnsDNSSECError.title "DNSSEC Validation Error">
+<!ENTITY dnsDNSSECError.longDesc "The address (URL) failed its DNSSEC security check validation.  Please contact a system administrator for help.">
+
 <!ENTITY fileNotFound.title "File Not Found">
 <!ENTITY fileNotFound.longDesc "<ul><li>Could the item have been renamed, removed, or relocated?</li><li>Is there a spelling, capitalization, or other typographical error in the address?</li><li>Do you have sufficient access permissions to the requested item?</li></ul>">
 
diff -u -r --new-file mozilla/embedding/browser/photon/src/Makefile.in mozilla.mine/embedding/browser/photon/src/Makefile.in
--- mozilla/embedding/browser/photon/src/Makefile.in	2005-04-26 10:37:02.000000000 -0700
+++ mozilla.mine/embedding/browser/photon/src/Makefile.in	2006-02-01 10:56:18.000000000 -0800
@@ -100,6 +100,7 @@
 XP_LIBS		+= \
 		$(PNG_LIBS) \
 		$(JPEG_LIBS) \
+		$(VAL_LIBS) \
 		$(ZLIB_LIBS) \
 		$(NULL)
 
diff -u -r --new-file mozilla/extensions/cookie/resources/locale/en-US/pref-dnssec.dtd mozilla.mine/extensions/cookie/resources/locale/en-US/pref-dnssec.dtd
--- mozilla/extensions/cookie/resources/locale/en-US/pref-dnssec.dtd	1969-12-31 16:00:00.000000000 -0800
+++ mozilla.mine/extensions/cookie/resources/locale/en-US/pref-dnssec.dtd	2006-02-01 10:56:18.000000000 -0800
@@ -0,0 +1,18 @@
+<!ENTITY dnssecHeader                    "DNS Security">
+
+<!ENTITY dnsSecurity.label            "DNS Security Policies">
+
+<!--LOCALIZATION NOTE (onStartLegend.label): Don't translate "&brandShortName;".
+    Place "&brandShortName;" in the phrase where the name of the application should
+	 appear
+-->
+<!ENTITY dnssecDetails                   "Require DNS Security when resolving host names.">
+
+<!ENTITY allDNSSecure.label             "Require all DNS lookups to be secure">
+<!ENTITY allDNSSecure.accesskey         "A">
+
+<!ENTITY possibleDNSSecure.label        "Use DNS security if possible.">
+<!ENTITY possibleDNSSecure.accesskey    "P">
+
+<!ENTITY neverDNSSecure.label           "Ignore DNS security.">
+<!ENTITY neverDNSSecure.accesskey       "N">
diff -u -r --new-file mozilla/gfx/src/gtk/mozilla-decoder.cpp mozilla.mine/gfx/src/gtk/mozilla-decoder.cpp
--- mozilla/gfx/src/gtk/mozilla-decoder.cpp	2006-02-02 16:35:45.000000000 -0800
+++ mozilla.mine/gfx/src/gtk/mozilla-decoder.cpp	2006-02-01 11:48:35.000000000 -0800
@@ -40,7 +40,7 @@
 #define PANGO_ENABLE_ENGINE
 
 #include "mozilla-decoder.h"
-#include <pango/pangocairo.h>
+#include <pango/pangoxft.h>
 #include <pango/pangofc-fontmap.h>
 #include <pango/pangofc-font.h>
 #include <gdk/gdkx.h>
@@ -208,7 +208,7 @@
         }
     }
 
-    pango_fc_font_map_add_decoder_find_func(PANGO_FC_FONT_MAP(pango_cairo_font_map_get_default()),
+    pango_fc_font_map_add_decoder_find_func(PANGO_FC_FONT_MAP(pango_xft_get_font_map(GDK_DISPLAY(),gdk_x11_get_default_screen())),
                                             mozilla_find_decoder,
                                             NULL,
                                             NULL);
diff -u -r --new-file mozilla/layout/base/nsPresContext.cpp mozilla.mine/layout/base/nsPresContext.cpp
--- mozilla/layout/base/nsPresContext.cpp	2005-08-29 09:15:39.000000000 -0700
+++ mozilla.mine/layout/base/nsPresContext.cpp	2006-02-02 16:25:14.000000000 -0800
@@ -68,6 +68,7 @@
 #include "nsIWeakReferenceUtils.h"
 #include "nsCSSRendering.h"
 #include "prprf.h"
+#include "prnetdb.h"
 #include "nsContentPolicyUtils.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsIDOMDocument.h"
@@ -182,6 +183,10 @@
   SetBackgroundImageDraw(PR_TRUE);		// always draw the background
   SetBackgroundColorDraw(PR_TRUE);
 
+#ifdef MOZ_DNSSEC
+  mDnssecMode = 1;
+#endif /* MOZ_DNSSEC */
+
   mBackgroundColor = NS_RGB(0xFF, 0xFF, 0xFF);
   
   mUseDocumentColors = PR_TRUE;
@@ -255,6 +260,11 @@
   nsContentUtils::UnregisterPrefCallback("browser.visited_color",
                                          nsPresContext::PrefChangedCallback,
                                          this);
+#ifdef MOZ_DNSSEC
+  nsContentUtils::UnregisterPrefCallback("network.dnssec.dnssecBehavior",
+                                         nsPresContext::PrefChangedCallback,
+                                         this);
+#endif
   nsContentUtils::UnregisterPrefCallback("image.animation_mode",
                                          nsPresContext::PrefChangedCallback,
                                          this);
@@ -571,6 +581,13 @@
   else if (animatePref.Equals("once"))
     mImageAnimationModePref = imgIContainer::kLoopOnceAnimMode;
 
+#ifdef MOZ_DNSSEC
+  mDnssecMode = 
+    nsContentUtils::GetIntPref("network.dnssec.dnssecBehavior", mDnssecMode);
+
+  PR_set_dnssec_validate_policy(mDnssecMode);
+#endif /* MOZ_DNSSEC */
+
 #ifdef IBMBIDI
   PRInt32 prefInt =
     nsContentUtils::GetIntPref("bidi.direction",
@@ -701,6 +718,11 @@
   nsContentUtils::RegisterPrefCallback("browser.visited_color",
                                        nsPresContext::PrefChangedCallback,
                                        this);
+#ifdef MOZ_DNSSEC
+  nsContentUtils::RegisterPrefCallback("network.dnssec.dnssecBehavior",
+                                       nsPresContext::PrefChangedCallback,
+                                       this);
+#endif /* MOZ_DNSSEC */
   nsContentUtils::RegisterPrefCallback("image.animation_mode",
                                        nsPresContext::PrefChangedCallback,
                                        this);
diff -u -r --new-file mozilla/layout/base/nsPresContext.h mozilla.mine/layout/base/nsPresContext.h
--- mozilla/layout/base/nsPresContext.h	2005-08-29 09:15:39.000000000 -0700
+++ mozilla.mine/layout/base/nsPresContext.h	2006-02-02 11:11:47.000000000 -0800
@@ -700,6 +700,10 @@
   PRUint16              mImageAnimationMode;
   PRUint16              mImageAnimationModePref;
 
+#ifdef MOZ_DNSSEC
+  PRUint16              mDnssecMode;
+#endif /* MOZ_DNSSEC */
+
   nsFont                mDefaultVariableFont;
   nsFont                mDefaultFixedFont;
   nsFont                mDefaultSerifFont;
diff -u -r --new-file mozilla/modules/libpr0n/build/Makefile.in mozilla.mine/modules/libpr0n/build/Makefile.in
--- mozilla/modules/libpr0n/build/Makefile.in	2004-12-09 11:28:21.000000000 -0800
+++ mozilla.mine/modules/libpr0n/build/Makefile.in	2006-02-01 10:56:18.000000000 -0800
@@ -89,6 +89,7 @@
 EXTRA_DSO_LDOPTS = \
 		$(LIBS_DIR) \
 		$(JPEG_LIBS) \
+		$(VAL_LIBS) \
 		$(PNG_LIBS) $(ZLIB_LIBS) \
 		$(EXTRA_DSO_LIBS) \
 		$(MOZ_COMPONENT_LIBS) \
diff -u -r --new-file mozilla/netwerk/base/public/nsNetError.h mozilla.mine/netwerk/base/public/nsNetError.h
--- mozilla/netwerk/base/public/nsNetError.h	2004-06-16 12:51:19.000000000 -0700
+++ mozilla.mine/netwerk/base/public/nsNetError.h	2006-02-01 10:56:18.000000000 -0800
@@ -252,6 +252,9 @@
 #define NS_ERROR_UNKNOWN_HOST \
     NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 30)
 
+#define NS_ERROR_DNSSEC_VALIDATION_ERROR \
+    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 31)
+
 /**
  * The lookup of a proxy hostname failed.
  *
diff -u -r --new-file mozilla/netwerk/base/src/nsSocketTransport2.cpp mozilla.mine/netwerk/base/src/nsSocketTransport2.cpp
--- mozilla/netwerk/base/src/nsSocketTransport2.cpp	2005-09-23 12:36:12.000000000 -0700
+++ mozilla.mine/netwerk/base/src/nsSocketTransport2.cpp	2006-02-01 10:56:18.000000000 -0800
@@ -1212,6 +1212,7 @@
         mCondition != NS_ERROR_PROXY_CONNECTION_REFUSED &&
         mCondition != NS_ERROR_NET_TIMEOUT &&
         mCondition != NS_ERROR_UNKNOWN_HOST &&
+        mCondition != NS_ERROR_DNSSEC_VALIDATION_ERROR &&
         mCondition != NS_ERROR_UNKNOWN_PROXY_HOST)
         return PR_FALSE;
 
@@ -1392,7 +1393,9 @@
         // status contains DNS lookup status
         if (NS_FAILED(status)) {
             // fixup error code if proxy was not found
-            if ((status == NS_ERROR_UNKNOWN_HOST) && !mProxyHost.IsEmpty())
+            if ((status == NS_ERROR_UNKNOWN_HOST ||
+                 status == NS_ERROR_DNSSEC_VALIDATION_ERROR) &&
+                !mProxyHost.IsEmpty())
                 mCondition = NS_ERROR_UNKNOWN_PROXY_HOST;
             else
                 mCondition = status;
diff -u -r --new-file mozilla/netwerk/dns/src/nsDNSService2.cpp mozilla.mine/netwerk/dns/src/nsDNSService2.cpp
--- mozilla/netwerk/dns/src/nsDNSService2.cpp	2005-10-18 14:25:45.000000000 -0700
+++ mozilla.mine/netwerk/dns/src/nsDNSService2.cpp	2006-02-01 10:56:18.000000000 -0800
@@ -122,6 +122,10 @@
         NS_ENSURE_STATE(mHostRecord->addr);
 
         mIter = nsnull; // no iterations
+        if (!mHostRecord->addr) {
+            mDone = !mIter;
+            return NS_ERROR_NOT_AVAILABLE;
+        }
         memcpy(addr, mHostRecord->addr, sizeof(PRNetAddr));
         // set given port
         port = PR_htons(port);
diff -u -r --new-file mozilla/netwerk/dns/src/nsHostResolver.cpp mozilla.mine/netwerk/dns/src/nsHostResolver.cpp
--- mozilla/netwerk/dns/src/nsHostResolver.cpp	2005-09-23 12:36:18.000000000 -0700
+++ mozilla.mine/netwerk/dns/src/nsHostResolver.cpp	2006-02-01 10:56:18.000000000 -0800
@@ -58,6 +58,7 @@
 #include "pratom.h"
 #include "prthread.h"
 #include "prerror.h"
+#include "prerr.h"
 #include "prcvar.h"
 #include "prtime.h"
 #include "prlong.h"
@@ -652,7 +653,27 @@
 #endif
 
         // convert error code to nsresult.
-        nsresult status = ai ? NS_OK : NS_ERROR_UNKNOWN_HOST;
+        nsresult status;
+        
+        if (!ai) {
+            // handle errors
+            PRErrorCode err = PR_GetError();
+            fprintf(stderr, "nshostres out: ai=%d, err=%d, %d\n",
+                    ai, err, PR_DNSSEC_VALIDATION_ERROR);
+            switch(err) {
+            case PR_DNSSEC_VALIDATION_ERROR:
+                status = NS_ERROR_DNSSEC_VALIDATION_ERROR;
+                break;
+
+            default:
+                status = NS_ERROR_UNKNOWN_HOST;
+                break;
+            }
+            fprintf(stderr, "nshostres err status set: status=%d (unknown=%d, validation_error=%d\n", status, NS_ERROR_UNKNOWN_HOST, NS_ERROR_DNSSEC_VALIDATION_ERROR);
+        } else {
+            status = NS_OK;
+        }
+        
         resolver->OnLookupComplete(rec, status, ai);
     }
     NS_RELEASE(resolver);
diff -u -r --new-file mozilla/nsprpub/config/autoconf.mk.in mozilla.mine/nsprpub/config/autoconf.mk.in
--- mozilla/nsprpub/config/autoconf.mk.in	2005-06-29 17:31:30.000000000 -0700
+++ mozilla.mine/nsprpub/config/autoconf.mk.in	2006-02-01 10:56:18.000000000 -0800
@@ -34,6 +34,7 @@
 
 LIBNSPR		= @LIBNSPR@
 LIBPLC		= @LIBPLC@
+VAL_LIBS    = @VAL_LIBS@
 
 CROSS_COMPILE	= @CROSS_COMPILE@
 BUILD_OPT	= @MOZ_OPTIMIZE@
diff -u -r --new-file mozilla/nsprpub/configure.in mozilla.mine/nsprpub/configure.in
--- mozilla/nsprpub/configure.in	2005-09-15 15:37:52.000000000 -0700
+++ mozilla.mine/nsprpub/configure.in	2006-02-01 10:56:18.000000000 -0800
@@ -2054,6 +2054,56 @@
 dnl AC_CHECK_LIB(thread, main)
 dnl AC_CHECK_LIB(vms_jackets, main)
 
+dnl Check for libval, the DNSSEC validation library
+dnl ========================================================
+AC_ARG_WITH(system-val,
+[  --with-system-val[=PFX]
+                          Use system libval [installed at prefix PFX]],
+    VAL_DIR=$withval)
+
+AC_ARG_WITH(system-sres,
+[  --with-system-sres[=PFX]
+                          Use system libsres [installed at prefix PFX]],
+    SRES_DIR=$withval)
+
+AC_ARG_WITH(system-openssl,
+[  --with-system-openssl[=PFX]
+                          Use system openssl libraries [installed at prefix PFX]],
+    OPENSSL_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+
+if test -n "${VAL_DIR}"; then
+    CFLAGS="-I${VAL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${VAL_DIR}/lib $LDFLAGS"
+fi
+if test -z "$VAL_DIR" -o "$VAL_DIR" = no; then
+    SYSTEM_VAL=
+else
+    if test -n "${OPENSSL_DIR}"; then
+        CFLAGS="-I${OPENSSL_DIR}/include $CFLAGS"
+        LDFLAGS="-L${OPENSSL_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(crypto, EVP_md5, OPENSSL_LIBS="-lcrypto", OPENSSL_LIBS="")
+    if test -n "${SRES_DIR}"; then
+        CFLAGS="-I${SRES_DIR}/include $CFLAGS"
+        LDFLAGS="-L${SRES_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(sres, __res_init, SRES_LIBS="-lsres", SRES_LIBS="",
+                 $OPENSSL_LIBS)
+    AC_CHECK_LIB(val, val_gethostbyname,
+                 [SYSTEM_VAL=1
+                  VAL_LIBS="-lval $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  NSPR_LIBS="$NSPR_LIBS $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  AC_DEFINE(MOZ_DNSSEC)], SYSTEM_VAL=,
+                 $SRES_LIBS $OPENSSL_LIBS)
+fi
+
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
 
 dnl We don't want anything to link with libdl even if it's present on OS X, 
 dnl since it's not used and not part of the default installation.
@@ -2592,6 +2642,7 @@
 AC_SUBST(OBJECT_MODE)
 AC_SUBST(GC_LEAK_DETECTOR)
 AC_SUBST(ENABLE_STRIP)
+AC_SUBST(VAL_LIBS)
 
 AC_SUBST(USE_PTHREADS)
 AC_SUBST(USE_BTHREADS)
diff -u -r --new-file mozilla/nsprpub/pr/include/prerr.h mozilla.mine/nsprpub/pr/include/prerr.h
--- mozilla/nsprpub/pr/include/prerr.h	2004-04-27 17:33:43.000000000 -0700
+++ mozilla.mine/nsprpub/pr/include/prerr.h	2006-02-01 10:56:18.000000000 -0800
@@ -269,8 +269,11 @@
 /* The library is not loaded */
 #define PR_LIBRARY_NOT_LOADED_ERROR              (-5926L)
 
+/* The DNS record failed DNSSEC validation */
+#define PR_DNSSEC_VALIDATION_ERROR               (-5925L)
+
 /* Placeholder for the end of the list */
-#define PR_MAX_ERROR                             (-5925L)
+#define PR_MAX_ERROR                             (-5924L)
 
 extern void nspr_InitializePRErrorTable(void);
 #define ERROR_TABLE_BASE_nspr (-6000L)
diff -u -r --new-file mozilla/nsprpub/pr/include/prnetdb.h mozilla.mine/nsprpub/pr/include/prnetdb.h
--- mozilla/nsprpub/pr/include/prnetdb.h	2004-08-30 16:29:52.000000000 -0700
+++ mozilla.mine/nsprpub/pr/include/prnetdb.h	2006-02-01 10:56:18.000000000 -0800
@@ -494,6 +494,15 @@
 NSPR_API(PRUint32) PR_htonl(PRUint32);
 NSPR_API(PRUint64) PR_htonll(PRUint64);
 
+/***********************************************************************
+** FUNCTIONS: PR_set_dnssec_validate_policy
+**
+** DESCRIPTION: set the DNS resolution policy
+**  
+**   XXX
+***********************************************************************/
+NSPR_API(void) PR_set_dnssec_validate_policy(PRInt32);
+
 PR_END_EXTERN_C
 
 #endif /* prnetdb_h___ */
diff -u -r --new-file mozilla/nsprpub/pr/src/misc/prerr.c mozilla.mine/nsprpub/pr/src/misc/prerr.c
--- mozilla/nsprpub/pr/src/misc/prerr.c	2004-04-27 17:34:07.000000000 -0700
+++ mozilla.mine/nsprpub/pr/src/misc/prerr.c	2006-02-01 10:56:18.000000000 -0800
@@ -117,11 +117,12 @@
 	{"PR_CONNECT_ABORTED_ERROR",    "Connection aborted"},
 	{"PR_HOST_UNREACHABLE_ERROR",    "Host is unreachable"},
 	{"PR_LIBRARY_NOT_LOADED_ERROR",    "The library is not loaded"},
+	{"PR_DNSSEC_VALIDATION_ERROR",    "The DNS record failed DNSSEC validation"},
 	{"PR_MAX_ERROR",    "Placeholder for the end of the list"},
 	{0, 0}
 };
 
-static const struct PRErrorTable et = { text, "prerr", -6000L, 76 };
+static const struct PRErrorTable et = { text, "prerr", -6000L, 77 };
 
 void nspr_InitializePRErrorTable(void) {
     PR_ErrorInstallTable(&et);
diff -u -r --new-file mozilla/nsprpub/pr/src/misc/prerr.et mozilla.mine/nsprpub/pr/src/misc/prerr.et
--- mozilla/nsprpub/pr/src/misc/prerr.et	2005-03-07 18:38:53.000000000 -0800
+++ mozilla.mine/nsprpub/pr/src/misc/prerr.et	2006-02-01 10:56:18.000000000 -0800
@@ -133,6 +133,7 @@
 ec PR_CONNECT_ABORTED_ERROR,    "Connection aborted"
 ec PR_HOST_UNREACHABLE_ERROR,   "Host is unreachable"
 ec PR_LIBRARY_NOT_LOADED_ERROR, "The library is not loaded"
+ec PR_DNSSEC_VALIDATION_ERROR,  "The DNS record failed DNSSEC validation"
 
 ec PR_MAX_ERROR,                "Placeholder for the end of the list"
 
diff -u -r --new-file mozilla/nsprpub/pr/src/misc/prerr.properties mozilla.mine/nsprpub/pr/src/misc/prerr.properties
--- mozilla/nsprpub/pr/src/misc/prerr.properties	2004-04-27 17:34:07.000000000 -0700
+++ mozilla.mine/nsprpub/pr/src/misc/prerr.properties	2006-02-01 10:56:18.000000000 -0800
@@ -113,4 +113,5 @@
 PR_CONNECT_ABORTED_ERROR=Connection aborted
 PR_HOST_UNREACHABLE_ERROR=Host is unreachable
 PR_LIBRARY_NOT_LOADED_ERROR=The library is not loaded
+PR_DNSSEC_VALIDATION_ERROR=The DNS record failed DNSSEC validation
 PR_MAX_ERROR=Placeholder for the end of the list
diff -u -r --new-file mozilla/nsprpub/pr/src/misc/prnetdb.c mozilla.mine/nsprpub/pr/src/misc/prnetdb.c
--- mozilla/nsprpub/pr/src/misc/prnetdb.c	2005-08-18 10:24:38.000000000 -0700
+++ mozilla.mine/nsprpub/pr/src/misc/prnetdb.c	2006-02-01 20:17:08.000000000 -0800
@@ -39,6 +39,10 @@
 
 #include <string.h>
 
+#ifdef MOZ_DNSSEC
+#include <validator.h>
+#endif
+
 /*
  * On Unix, the error code for gethostbyname() and gethostbyaddr()
  * is returned in the global variable h_errno, instead of the usual
@@ -66,8 +70,8 @@
  * - _PR_HAVE_GETHOST_R_POINTER: the gethostbyXXX_r functions return
  *   a struct hostent* pointer.  For example, Solaris and IRIX.
  */
-#if defined(_PR_NO_PREEMPT) || defined(_PR_HAVE_GETHOST_R) \
-    || defined(_PR_HAVE_THREADSAFE_GETHOST)
+#if (defined(_PR_NO_PREEMPT) || defined(_PR_HAVE_GETHOST_R) \
+     || defined(_PR_HAVE_THREADSAFE_GETHOST))
 #define _PR_NO_DNS_LOCK
 #endif
 
@@ -629,6 +633,214 @@
 }
 #endif /* !defined(_PR_HAVE_GETPROTO_R) */
 
+#define DNSSEC_FAILURE 0
+#define DNSSEC_SUCCESS 1
+#define DODNSSECDEBUG
+#ifdef DODNSSECDEBUG
+#define DNSSECDEBUG(x) fprintf x;
+#define DNSSECFUNBEGIN()                        \
+  {                                             \
+    fprintf(stderr, "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n"); \
+    fprintf(stderr, "BEGIN  %s:%d: \n  ", __FUNCTION__, __LINE__);       \
+  }
+#define DNSSECFUNDEBUG(x) { DNSSECFUNBEGIN(); DNSSECDEBUG(x); }
+#define DNSSECFUNEXIT()   {                                             \
+    fprintf(stderr, "EXIT   %s:%d:  \n", __FUNCTION__, __LINE__);          \
+    fprintf(stderr, "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"); \
+  }
+#define DNSSECFUNRETURN(retval)                 \
+  {                                             \
+    DNSSECDEBUG((stderr, "  returning: %x", (unsigned int) retval));    \
+    if ((int) retval == DNSSEC_SUCCESS) {                                \
+      DNSSECDEBUG((stderr, "  (success)"));                             \
+    } else if ((int) retval == DNSSEC_SUCCESS || (int) retval == -1) {   \
+      DNSSECDEBUG((stderr, "  (FAIL)"));                                \
+    }                                                                   \
+    DNSSECDEBUG((stderr, "\n"));						    \
+    DNSSECFUNEXIT();                                                    \
+    return retval;                                                      \
+  }
+#else
+#define DNSSECDEBUG(x) 
+#define DNSSECFUNDEBUG(x) 
+#define DNSSECFUNEXIT()
+#define DNSSECFUNRETURN(retval) return retval;
+#endif
+
+
+/* 2 = ignore, 1 = allow indeterm, 0 = always secure */
+int global_policy = 1;
+#define DNSSEC_POLICY_IGNORE              2
+#define DNSSEC_POLICY_ALLOW_INDETERMINATE 1
+#define DNSSEC_POLICY_ALWAYS_SECURE       0
+void
+PR_set_dnssec_validate_policy(int policy)
+{
+  DNSSECFUNDEBUG((stderr, "DNSSEC Setting policy: %d\n", policy));
+  global_policy = policy;
+}
+
+
+#ifdef MOZ_DNSSEC
+/* XXX: include drop or configurize */
+#include <stdio.h>
+#include <netdb.h>
+
+#define CHECK_RET(x)                            \
+  {                                             \
+    DNSSECFUNDEBUG((stderr,"ret: %d\n",x));            \
+    return x;                                   \
+  }                                             \
+
+/* prototypes */
+int dnssec_check_policy(int dnssec_status, int policytype);
+/**
+ * dnssec_validate(HOSTNAME)
+ *
+ * attempts to validate HOSTNAME using dnssec.  It will return one of:
+ *
+ * If global_policy = DNSSEC_POLICY_IGNORE
+ *    - DNSSEC_SUCCESS: 
+ *
+ * If global_policy = DNSSEC_POLICY_ALLOW_INDETERMINATE
+ *    - DNSSEC_SUCCESS if verified
+ *    - DNSSEC_FAILURE if not
+ *
+ * If global_policy = DNSSEC_POLICY_ALLOW_INDETERMINATE
+ *    - DNSSEC_SUCCESS if verified
+ *    - DNSSEC_FAILURE if not
+ */
+/* XXX: pass in address type? */
+int dnssec_validate (const char *domain_name) {
+    int dnssec_status;
+    struct hostent hentry, *hentryp;
+    char buf[1024];
+    size_t buflen = sizeof(buf);
+    int h_errno;
+    val_status_t val_status;
+
+    DNSSECFUNDEBUG((stderr, "DNSSECvalidating: %s\n", domain_name));
+    
+    /* don't even bother validating when the policy doesn't call for it */
+    if (global_policy == DNSSEC_POLICY_IGNORE) {
+        DNSSECDEBUG((stderr, "  OK: policy is always allow\n"));
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    }
+
+    /* explicitly catch localhost */
+    if (strcmp(domain_name, "localhost") == 0) {
+        DNSSECDEBUG((stderr, "  OK: 'localhost' is always allowed\n"));
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    }
+    
+    /* attempt a lookup */
+    dnssec_status = val_gethostbyname_r(NULL, domain_name, &hentry,
+                                        buf, buflen,&hentryp, &h_errno,
+                                        &val_status);
+
+    /* check the results, or assume indeterminate if we don't know why
+       the above failed */
+    DNSSECDEBUG((stderr,
+                 "  val_gethostbyname returned %d,val_st=%d,errno=%d,ptr=%x\n",
+                 dnssec_status, val_status, h_errno, (unsigned int) hentryp));
+    if (!hentryp)
+        val_status = INDETERMINATE_TRUST;
+
+    DNSSECDEBUG((stderr, "  val_gethostbyname's dnssec status was %d\n",
+                 dnssec_status));
+
+    if (dnssec_check_policy(val_status, global_policy) == DNSSEC_SUCCESS)
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+
+    DNSSECFUNRETURN(DNSSEC_FAILURE);
+}
+
+int
+dnssec_check_policy(int val_status, int policytype) 
+{
+  DNSSECFUNDEBUG((stderr, "input: policy=%d, status=%d = %s\n",
+                  policytype, val_status, p_val_error(val_status)));
+  if (policytype == DNSSEC_POLICY_IGNORE)
+      DNSSECFUNRETURN(DNSSEC_SUCCESS);
+  
+  if (val_istrusted(val_status))
+      DNSSECFUNRETURN(DNSSEC_SUCCESS);
+
+  switch (val_status) {
+
+  case VALIDATE_SUCCESS:
+    DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    
+  case INDETERMINATE_TRUST:
+    if (policytype == DNSSEC_POLICY_ALLOW_INDETERMINATE)
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    DNSSECFUNRETURN(DNSSEC_FAILURE);
+    
+    /* assume everything else is a failure */
+    /* XXX: allow for expired sigs to be declared ok in policy */
+  default:
+    DNSSECFUNRETURN(DNSSEC_FAILURE);
+  }
+}
+
+struct hostent *
+dnssec_gethostbyname(const char *name,
+                     struct hostent *ret, char *buf, size_t buflen,
+                     struct hostent **result, int *h_errnop)
+{
+  val_status_t val_status;
+  int ret_stat;
+  
+  DNSSECFUNDEBUG((stderr, "input: name=%s\n", name));
+  ret_stat = val_gethostbyname_r(NULL, name, ret, buf, buflen, result, h_errnop,
+                                 &val_status);
+  if (!ret_stat) {
+    DNSSECDEBUG((stderr, "  ERROR: ret_stat=%d returned\n", ret_stat));
+    DNSSECFUNRETURN(NULL);
+  }
+  
+  if (dnssec_check_policy(val_status, global_policy) == DNSSEC_SUCCESS) {
+    DNSSECDEBUG((stderr, "  policy = success\n"));
+    DNSSECFUNRETURN(ret);
+  }
+  DNSSECDEBUG((stderr, "  failed to lookup host\n"));
+  DNSSECFUNRETURN(NULL);
+}
+
+struct hostent *
+dnssec_gethostbyname2(const char *name, int af,
+                     struct hostent *ret, char *buf, size_t buflen,
+                     struct hostent **result, int *h_errnop)
+{
+  val_status_t val_status;
+  int ret_stat;
+  
+  DNSSECFUNDEBUG((stderr, "input: name=%s\n", name));
+  ret_stat = val_gethostbyname2_r(NULL, name, af, 
+                                  ret, buf, buflen, result, h_errnop,
+                                  &val_status);
+  if (!ret_stat) {
+    DNSSECDEBUG((stderr, "  ERROR: ret_stat=%d returned\n", ret_stat));
+    DNSSECFUNRETURN(NULL);
+  }
+  
+  if (dnssec_check_policy(val_status, global_policy) == DNSSEC_SUCCESS) {
+    DNSSECDEBUG((stderr, "  policy = success\n"));
+    DNSSECFUNRETURN(ret);
+  }
+  DNSSECDEBUG((stderr, "  failed to lookup host\n"));
+  DNSSECFUNRETURN(NULL);
+}
+
+
+#else  /* !MOZ_DNSSEC */
+
+int dnssec_validate (const char *domain_name) {
+  return DNSSEC_SUCCESS;
+}
+
+#endif /* !MOZ_DNSSEC */
+
 /*
  * #################################################################
  * NOTE: tmphe, tmpbuf, bufsize, h, and h_err are local variables
@@ -664,6 +876,25 @@
 
 #endif  /* definition of GETHOSTBYXXX */
 
+/* override functions if MOZ_DNSSEC is enabled */
+#ifdef MOZ_DNSSEC
+
+/* We do this in a special section to allow the GETHOSTBYADDR to be
+   pulled above as normal.  Unfortunately, even though the DNSSEC APIs
+   are thread safe, if GETHOSTBYADDR is not then we'll still perform
+   safe locking because this code doesn't differentiate between calls
+   at all.
+*/
+#undef GETHOSTBYNAME
+#undef GETHOSTBYNAME2
+
+#define GETHOSTBYNAME(name) \
+    (dnssec_gethostbyname(name, &tmphe, tmpbuf, bufsize, &h, &h_err), h)
+#define GETHOSTBYNAME2(name, af)                                           \
+  (dnssec_gethostbyname2(name, af, &tmphe, tmpbuf, bufsize, &h, &h_err), h)
+
+#endif /* MOZ_DNSSEC */
+
 PR_IMPLEMENT(PRStatus) PR_GetHostByName(
     const char *name, char *buf, PRIntn bufsize, PRHostEnt *hp)
 {
@@ -677,6 +908,7 @@
 #endif
 
     if (!_pr_initialized) _PR_ImplicitInitialization();
+    DNSSECFUNDEBUG((stderr, "input=%s\n", name));
 
 #if defined(_PR_HAVE_GETHOST_R)
     tmpbuf = localbuf;
@@ -686,7 +918,7 @@
         if (NULL == tmpbuf)
         {
             PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
-            return rv;
+            DNSSECFUNRETURN(rv);
         }
     }
 #endif
@@ -698,13 +930,18 @@
 #else
 	h = GETHOSTBYNAME(name);
 #endif
-    
-	if (NULL == h)
+
+    /* XXX */
+    DNSSECDEBUG((stderr, "DNSSECgethostbyname results: host=%s h_errno=%d\n",
+                 name, h_errno));
+    if (NULL == h)
 	{
+        DNSSECDEBUG((stderr, "********** Status = LOOKUP_ERROR\n"));
 	    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, _MD_GETHOST_ERRNO());
 	}
 	else
 	{
+        DNSSECDEBUG((stderr, "********** Status = SUCCESS\n"));
 		_PRIPAddrConversion conversion = _PRIPAddrNoConversion;
 		rv = CopyHostent(h, &buf, &bufsize, conversion, hp);
 		if (PR_SUCCESS != rv)
@@ -715,7 +952,7 @@
     if (tmpbuf != localbuf)
         PR_Free(tmpbuf);
 #endif
-	return rv;
+    DNSSECFUNRETURN(rv);
 }
 
 #if !defined(_PR_INET6) && \
@@ -826,11 +1063,12 @@
     PRBool did_af_inet = PR_FALSE;
 #endif
 
+    DNSSECFUNDEBUG((stderr, "input=%s\n", name));
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
     if (af != PR_AF_INET && af != PR_AF_INET6) {
         PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-        return PR_FAILURE;
+        DNSSECFUNRETURN(PR_FAILURE);
     }
 
 #if defined(_PR_INET6) && defined(_PR_HAVE_GETHOSTBYNAME2)
@@ -873,11 +1111,13 @@
         if (NULL == tmpbuf)
         {
             PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
-            return rv;
+            DNSSECFUNRETURN(rv);
         }
     }
 #endif
 
+    /* XXX: should be able to map gethostbyname2 -> getaddrinfo with hints */
+
     /* Do not need to lock the DNS lock if getipnodebyname() is called */
 #ifdef _PR_INET6
 #ifdef _PR_HAVE_GETHOSTBYNAME2
@@ -935,6 +1175,7 @@
     
 	if (NULL == h)
 	{
+      DNSSECDEBUG((stderr, "  lookup failed\n"));
 #if defined(_PR_INET6) && defined(_PR_HAVE_GETIPNODEBYNAME)
 	    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, error_num);
 #elif defined(_PR_INET6_PROBE) && defined(_PR_HAVE_GETIPNODEBYNAME)
@@ -993,7 +1234,7 @@
         PR_Free(tmpbuf);
 #endif
 
-	return rv;
+    DNSSECFUNRETURN(rv);
 }
 
 PR_IMPLEMENT(PRStatus) PR_GetHostByAddr(
@@ -1015,6 +1256,7 @@
 	int error_num;
 #endif
 
+    DNSSECFUNDEBUG((stderr, "input=%x", (unsigned int) hostaddr));
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
 	if (hostaddr->raw.family == PR_AF_INET6)
@@ -1160,7 +1402,7 @@
         PR_Free(tmpbuf);
 #endif
 
-	return rv;
+	DNSSECFUNRETURN(rv);
 }
 
 /******************************************************************************/
@@ -1772,6 +2014,7 @@
     PRStatus status = PR_SUCCESS;
     PRIntn rv;
 
+    DNSSECFUNDEBUG((stderr,"input=%s\n",string));
 #if defined(_PR_HAVE_INET_NTOP)
     rv = inet_pton(AF_INET6, string, &addr->ipv6.ip);
     if (1 == rv)
@@ -1783,23 +2026,26 @@
         PR_ASSERT(0 == rv);
         /* clean up after the failed inet_pton() call */
         memset(&addr->ipv6.ip, 0, sizeof(addr->ipv6.ip));
+        /* XXX */
+        LOCK_DNS();
         rv = inet_pton(AF_INET, string, &addr->inet.ip);
         if (1 == rv)
         {
-            addr->raw.family = AF_INET;
+          addr->raw.family = AF_INET;
         }
         else
         {
-            PR_ASSERT(0 == rv);
-            PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-            status = PR_FAILURE;
+          PR_ASSERT(0 == rv);
+          PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
+          status = PR_FAILURE;
         }
+        UNLOCK_DNS();
     }
 #else /* _PR_HAVE_INET_NTOP */
     rv = StringToV6Addr(string, &addr->ipv6.ip);
     if (1 == rv) {
         addr->raw.family = PR_AF_INET6;
-        return PR_SUCCESS;
+        DNSSECFUNRETURN(PR_SUCCESS);
     }
     PR_ASSERT(0 == rv);
     /* clean up after the failed StringToV6Addr() call */
@@ -1821,7 +2067,7 @@
     }
 #endif /* _PR_HAVE_INET_NTOP */
 
-    return status;
+    DNSSECFUNRETURN(status);
 }
 
 PR_IMPLEMENT(PRStatus) PR_NetAddrToString(
@@ -1940,8 +2186,18 @@
 #if defined(_PR_INET6)
 
 typedef struct addrinfo PRADDRINFO;
+
+#ifdef MOZ_DNSSEC
+/*
+XXX future:
+#define GETADDRINFO val_getaddrinfo
+*/
+#define GETADDRINFO getaddrinfo
+#define FREEADDRINFO freeaddrinfo
+#else /* !MOZ_DNSSEC */
 #define GETADDRINFO getaddrinfo
 #define FREEADDRINFO freeaddrinfo
+#endif
 
 #elif defined(_PR_INET6_PROBE)
 
@@ -2025,8 +2281,11 @@
 #endif
 }
 
+#ifndef MOZ_DNSSEC
+/* for DNSSEC leave as is */
 #define GETADDRINFO (*_pr_getaddrinfo)
 #define FREEADDRINFO (*_pr_freeaddrinfo)
+#endif
 
 #endif /* _PR_INET6 */
 
@@ -2050,41 +2309,44 @@
 {
     PRStatus rv;
     PRAddrInfoFB *ai;
+    DNSSECFUNDEBUG((stderr, "input=%s", hostname));
     /* fallback on PR_GetHostByName */
     ai = PR_NEW(PRAddrInfoFB);
     if (!ai) {
         PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
         return NULL;
     }
+    DNSSECDEBUG((stderr, "DNSSECgethostbyname: %d %s\n", __LINE__, hostname));
     rv = PR_GetHostByName(hostname, ai->buf, sizeof ai->buf, &ai->hostent);
     if (rv == PR_FAILURE) {
         PR_Free(ai);
-        return NULL;
+        DNSSECFUNRETURN(NULL);
     }
     ai->has_cname = !(flags & PR_AI_NOCANONNAME);
 
-    return (PRAddrInfo *) ai;
+    DNSSECFUNRETURN((PRAddrInfo *) ai);
 }
 
 PR_IMPLEMENT(PRAddrInfo *) PR_GetAddrInfoByName(const char  *hostname,
                                                 PRUint16     af,
                                                 PRIntn       flags)
 {
+    DNSSECFUNDEBUG((stderr, "input=%s\n", hostname));
     /* restrict input to supported values */
     if ((af != PR_AF_INET && af != PR_AF_UNSPEC) ||
         (flags & ~ PR_AI_NOCANONNAME) != PR_AI_ADDRCONFIG) {
         PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-        return NULL;
+        DNSSECFUNRETURN(NULL);
     }
 
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
 #if !defined(_PR_HAVE_GETADDRINFO)
-    return pr_GetAddrInfoByNameFB(hostname, af, flags);
+    DNSSECFUNRETURN(pr_GetAddrInfoByNameFB(hostname, af, flags));
 #else
 #if defined(_PR_INET6_PROBE)
     if (!_pr_ipv6_is_present) {
-        return pr_GetAddrInfoByNameFB(hostname, af, flags);
+        DNSSECFUNRETURN(pr_GetAddrInfoByNameFB(hostname, af, flags));
     }
 #endif
     {
@@ -2097,6 +2359,21 @@
          * RFC 3493.
          */
 
+        /* XXX */
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo: %d %s\n", __LINE__, hostname));
+
+        LOCK_DNS();
+        if (!dnssec_validate(hostname)) {
+            /* DNSsec validation failed */
+            PR_SetErrorText(0, "Host DNSsec validation failed");
+            PR_SetError(PR_DNSSEC_VALIDATION_ERROR, 0);
+            DNSSECDEBUG((stderr, "DNSSECinet_pton: returning failure %d %s\n",
+                         __LINE__, hostname));
+            UNLOCK_DNS();
+            DNSSECFUNRETURN(NULL);
+        }
+        UNLOCK_DNS();
+
         memset(&hints, 0, sizeof(hints));
         hints.ai_flags = (flags & PR_AI_NOCANONNAME) ? 0: AI_CANONNAME;
         hints.ai_family = (af == PR_AF_INET) ? AF_INET : AF_UNSPEC;
@@ -2111,12 +2388,31 @@
         hints.ai_socktype = SOCK_STREAM;
 
         rv = GETADDRINFO(hostname, NULL, &hints, &res);
-        if (rv == 0)
-            return (PRAddrInfo *) res;
+        if (rv == EAI_AGAIN) {
+          /* temporary failure...  odd...  try again? */
+          PR_Sleep(1000);
+          DNSSECDEBUG((stderr, "DNSSECgetaddrinfo reted/trying again: %d %d\n",
+                       rv, (unsigned int) res));
+          rv = GETADDRINFO(hostname, NULL, &hints, &res);
+        }
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo returned: %d\n", 
+                     (unsigned int) res));
+
+        /* XXX future DNSSEC work */
+        if (rv == 0 && res != NULL
+#if 0
+            && dnssec_check_policy(val_get_addrinfo_dnssec_status(res), global_policy) == DNSSEC_SUCCESS
+#endif
+          )
+            DNSSECFUNRETURN(res);
+        if (rv == 0) {
+          DNSSECFUNRETURN((PRAddrInfo *) res);
+        }
 
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo failed: %d\n", rv));
         PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, rv);
     }
-    return NULL;
+    DNSSECFUNRETURN(NULL);
 #endif
 }
 
diff -u -r --new-file mozilla/xpfe/components/prefwindow/resources/content/permissionsPrefsOverlay.xul mozilla.mine/xpfe/components/prefwindow/resources/content/permissionsPrefsOverlay.xul
--- mozilla/xpfe/components/prefwindow/resources/content/permissionsPrefsOverlay.xul	2005-03-10 10:36:06.000000000 -0800
+++ mozilla.mine/xpfe/components/prefwindow/resources/content/permissionsPrefsOverlay.xul	2006-02-01 10:56:18.000000000 -0800
@@ -62,6 +62,12 @@
                       label="&popups.label;"/> 
       </treerow>
     </treeitem>
+    <treeitem position="4">
+      <treerow>
+        <treecell url="chrome://communicator/content/pref/pref-dnssec.xul"
+                      label="&dnssec.label;"/> 
+      </treerow>
+    </treeitem>
   </treechildren>
     
 </overlay>
diff -u -r --new-file mozilla/xpfe/components/prefwindow/resources/content/pref-dnssec.xul mozilla.mine/xpfe/components/prefwindow/resources/content/pref-dnssec.xul
--- mozilla/xpfe/components/prefwindow/resources/content/pref-dnssec.xul	1969-12-31 16:00:00.000000000 -0800
+++ mozilla.mine/xpfe/components/prefwindow/resources/content/pref-dnssec.xul	2006-02-02 14:28:15.000000000 -0800
@@ -0,0 +1,47 @@
+<?xml version="1.0"?> 
+
+<?xml-stylesheet href="chrome://communicator/skin/" type="text/css"?>
+
+<!DOCTYPE page [
+<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd" >
+%brandDTD;
+<!ENTITY % prefDnssecDTD SYSTEM "chrome://communicator/locale/pref/pref-dnssec.dtd" >
+%prefDnssecDTD;
+]>
+
+<page id="dnssecPanel" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+      onload="init();"
+      headertitle="&pref.dnssec.title;">
+          
+  <script type="application/x-javascript" src="chrome://communicator/content/permissions/permissionsOverlay.js"/>
+
+  <script type="application/x-javascript">
+  <![CDATA[
+  
+  var panel = "chrome://communicator/content/pref/pref-dnssec.xul";
+  var _elementIDs = ["networkDnssecBehaviour"];
+
+  function init()
+  {
+    parent.initPanel('chrome://communicator/content/pref/pref-dnssec.xul');
+  }
+
+  ]]>
+  </script>
+
+  <groupbox id="dnssecArea">
+    <caption label="&dnsSecurity.label;"/>
+
+    <description>&dnssecDetails;</description>
+
+    <radiogroup id="networkDnssecBehaviour"
+                prefstring="network.dnssec.dnssecBehavior">
+      <radio value="2" label="&neverDNSSecure.label;"
+             accesskey="&neverDNSSecure.accesskey;"/>
+      <radio value="1" label="&possibleDNSSecure.label;"
+             accesskey="&possibleDNSSecure.accesskey;"/>
+      <radio value="0" label="&allDNSSecure.label;"
+             accesskey="&allDNSSecure.accesskey;"/>
+    </radiogroup>
+  </groupbox>
+</page>
diff -u -r --new-file mozilla/xpfe/components/prefwindow/resources/content/pref-help.js mozilla.mine/xpfe/components/prefwindow/resources/content/pref-help.js
--- mozilla/xpfe/components/prefwindow/resources/content/pref-help.js	2005-04-28 14:24:17.000000000 -0700
+++ mozilla.mine/xpfe/components/prefwindow/resources/content/pref-help.js	2006-02-01 10:56:18.000000000 -0800
@@ -30,6 +30,7 @@
   "chrome://communicator/content/pref/pref-security.xul": "sec_gen",
   "chrome://communicator/content/pref/pref-cookies.xul": "cookies_prefs",
   "chrome://communicator/content/pref/pref-images.xul": "images_prefs",
+  "chrome://communicator/content/pref/pref-dnssec.xul": "dnssec_prefs",
   "chrome://communicator/content/pref/pref-popups.xul": "pop_up_blocking",
   "chrome://wallet/content/pref-wallet.xul": "forms_prefs",
   "chrome://pippki/content/pref-masterpass.xul": "passwords_master",
diff -u -r --new-file mozilla/xpfe/components/prefwindow/resources/locale/en-US/permissionsPrefsOverlay.dtd mozilla.mine/xpfe/components/prefwindow/resources/locale/en-US/permissionsPrefsOverlay.dtd
--- mozilla/xpfe/components/prefwindow/resources/locale/en-US/permissionsPrefsOverlay.dtd	2003-01-20 23:37:34.000000000 -0800
+++ mozilla.mine/xpfe/components/prefwindow/resources/locale/en-US/permissionsPrefsOverlay.dtd	2006-02-01 10:56:18.000000000 -0800
@@ -1,3 +1,4 @@
 <!ENTITY cookies.label "Cookies">
 <!ENTITY images.label "Images">
 <!ENTITY popups.label "Popup Windows">
+<!ENTITY dnssec.label "DNSSEC">
diff -u -r --new-file mozilla/xpfe/components/prefwindow/resources/locale/en-US/pref-dnssec.dtd mozilla.mine/xpfe/components/prefwindow/resources/locale/en-US/pref-dnssec.dtd
--- mozilla/xpfe/components/prefwindow/resources/locale/en-US/pref-dnssec.dtd	1969-12-31 16:00:00.000000000 -0800
+++ mozilla.mine/xpfe/components/prefwindow/resources/locale/en-US/pref-dnssec.dtd	2006-02-01 10:56:18.000000000 -0800
@@ -0,0 +1,18 @@
+<!ENTITY pref.dnssec.title              "DNSSEC">
+
+<!ENTITY dnsSecurity.label            "DNS Security Policies">
+
+<!--LOCALIZATION NOTE (onStartLegend.label): Don't translate "&brandShortName;".
+    Place "&brandShortName;" in the phrase where the name of the application should
+	 appear
+-->
+<!ENTITY dnssecDetails                   "Specify how &brandShortName; should handle DNS Security when resolving host names.">
+
+<!ENTITY allDNSSecure.label             "Require all DNS lookups to be secure">
+<!ENTITY allDNSSecure.accesskey         "A">
+
+<!ENTITY possibleDNSSecure.label        "Use DNS security if possible.">
+<!ENTITY possibleDNSSecure.accesskey    "P">
+
+<!ENTITY neverDNSSecure.label           "Ignore DNS security.">
+<!ENTITY neverDNSSecure.accesskey       "N">
diff -u -r --new-file mozilla/configure.in mozilla.mine/configure.in
--- mozilla/configure.in	2006-02-02 18:12:03.000000000 -0800
+++ mozilla.mine/configure.in	2006-02-01 10:56:18.000000000 -0800
@@ -3487,6 +3487,59 @@
 fi
 
 if test -z "$SKIP_LIBRARY_CHECKS"; then
+
+dnl Check for libval, the DNSSEC validation library
+dnl ========================================================
+MOZ_ARG_WITH_STRING(system-val,
+[  --with-system-val[=PFX]
+                          Use system libval [installed at prefix PFX]],
+    VAL_DIR=$withval)
+
+MOZ_ARG_WITH_STRING(system-sres,
+[  --with-system-sres[=PFX]
+                          Use system libsres [installed at prefix PFX]],
+    SRES_DIR=$withval)
+
+MOZ_ARG_WITH_STRING(system-openssl,
+[  --with-system-openssl[=PFX]
+                          Use system openssl libraries [installed at prefix PFX]],
+    OPENSSL_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+
+if test -n "${VAL_DIR}"; then
+    CFLAGS="-I${VAL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${VAL_DIR}/lib $LDFLAGS"
+fi
+if test -z "$VAL_DIR" -o "$VAL_DIR" = no; then
+    SYSTEM_VAL=
+else
+    if test -n "${OPENSSL_DIR}"; then
+        CFLAGS="-I${OPENSSL_DIR}/include $CFLAGS"
+        LDFLAGS="-L${OPENSSL_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(crypto, EVP_md5, OPENSSL_LIBS="-lcrypto", OPENSSL_LIBS="")
+    if test -n "${SRES_DIR}"; then
+        CFLAGS="-I${SRES_DIR}/include $CFLAGS"
+        LDFLAGS="-L${SRES_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(sres, __res_init, SRES_LIBS="-lsres", SRES_LIBS="",
+                 $OPENSSL_LIBS)
+    AC_CHECK_LIB(val, val_gethostbyname,
+                 [SYSTEM_VAL=1
+                  VAL_LIBS="-lval $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  NSPR_LIBS="$NSPR_LIBS $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  AC_DEFINE(MOZ_DNSSEC)], SYSTEM_VAL=,
+                 $SRES_LIBS $OPENSSL_LIBS)
+    echo "XXXXXX: $NSPR_LIBS"
+fi
+
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
+
 dnl system JPEG support
 dnl ========================================================
 MOZ_ARG_WITH_STRING(system-jpeg,
@@ -6690,10 +6747,12 @@
     $COMPILE_CXXFLAGS`
 
 AC_SUBST(SYSTEM_MAKEDEPEND)
+AC_SUBST(SYSTEM_VAL)
 AC_SUBST(SYSTEM_JPEG)
 AC_SUBST(SYSTEM_PNG)
 AC_SUBST(SYSTEM_ZLIB)
 
+AC_SUBST(VAL_LIBS)
 AC_SUBST(JPEG_CFLAGS)
 AC_SUBST(JPEG_LIBS)
 AC_SUBST(ZLIB_CFLAGS)
@@ -6701,6 +6760,7 @@
 AC_SUBST(PNG_CFLAGS)
 AC_SUBST(PNG_LIBS)
 
+AC_SUBST(MOZ_VAL_LIBS)
 AC_SUBST(MOZ_JPEG_CFLAGS)
 AC_SUBST(MOZ_JPEG_LIBS)
 AC_SUBST(MOZ_ZLIB_CFLAGS)
diff -u -r --new-file mozilla/security/nss/cmd/platlibs.mk mozilla.mine/security/nss/cmd/platlibs.mk
--- mozilla/security/nss/cmd/platlibs.mk       2006-02-03 14:14:26.000000000 -0800
+++ mozilla.mine/security/nss/cmd/platlibs.mk  2006-02-03 14:11:26.000000000 -0800
@@ -233,3 +233,5 @@
 endif

 endif # USE_STATIC_LIBS
+
+OS_LIBS += -lval -lsres -lcrypto
diff -u -r --new-file mozilla/nsprpub/config/nspr-config.in mozilla.mine/nsprpub/config/nspr-config.in
--- mozilla/nsprpub/config/nspr-config.in	2005-05-10 18:03:44.000000000 -0700
+++ mozilla.mine/nsprpub/config/nspr-config.in	2006-02-02 22:42:40.000000000 -0800
@@ -138,5 +138,5 @@
 	  libdirs="$libdirs $i"
         fi
       done
-      echo $libdirs @OS_LIBS@
+      echo $libdirs @VAL_LIBS@ @OS_LIBS@
 fi      
diff -u -r --new-file mozilla/docshell/base/nsDocShell.cpp mozilla.mine/docshell/base/nsDocShell.cpp
--- mozilla/docshell/base/nsDocShell.cpp	2005-11-02 18:17:56.000000000 -0800
+++ mozilla.mine/docshell/base/nsDocShell.cpp	2006-02-06 13:12:28.000000000 -0800
@@ -2927,6 +2927,15 @@
         formatStrCount = 1;
         error.AssignLiteral("dnsNotFound");
     }
+    else if (NS_ERROR_DNSSEC_VALIDATION_ERROR == aError) {
+        NS_ENSURE_ARG_POINTER(aURI);
+        // Get the host
+        nsCAutoString host;
+        aURI->GetHost(host);
+        CopyUTF8toUTF16(host, formatStrs[0]);
+        formatStrCount = 1;
+        error.Assign(NS_LITERAL_STRING("dnsDNSSECError"));
+    }
     else if(NS_ERROR_CONNECTION_REFUSED == aError) {
         NS_ENSURE_ARG_POINTER(aURI);
         // Build up the host:port string.
