diff -u -r mozilla/config/autoconf.mk.in mozilla.test/config/autoconf.mk.in
--- mozilla/config/autoconf.mk.in	2005-08-31 13:22:01.000000000 -0700
+++ mozilla.test/config/autoconf.mk.in	2005-08-31 09:13:29.000000000 -0700
@@ -341,12 +341,14 @@
 GTK_CONFIG	= @GTK_CONFIG@
 TK_CFLAGS	= @TK_CFLAGS@
 TK_LIBS		= @TK_LIBS@
+VALIDAT_LIBS	= @VALIDAT_LIBS@
 
 MOZ_TOOLKIT_REGISTRY_CFLAGS = \
 	-DWIDGET_DLL=@WIDGET_DLL@ \
 	-DGFXWIN_DLL=@GFXWIN_DLL@ \
 	$(TK_CFLAGS)
 
+SYSTEM_VALIDAT          = @SYSTEM_VALIDAT@
 MOZ_ENABLE_GTK		= @MOZ_ENABLE_GTK@
 MOZ_ENABLE_GTK2		= @MOZ_ENABLE_GTK2@
 MOZ_ENABLE_XLIB		= @MOZ_ENABLE_XLIB@
diff -u -r mozilla/configure.in mozilla.test/configure.in
--- mozilla/configure.in	2005-08-31 13:22:02.000000000 -0700
+++ mozilla.test/configure.in	2005-08-31 09:13:29.000000000 -0700
@@ -2991,6 +2991,59 @@
 fi
 
 if test -z "$SKIP_LIBRARY_CHECKS"; then
+
+dnl Check for libval, the DNSSEC validation library
+dnl ========================================================
+MOZ_ARG_WITH_STRING(system-val,
+[  --with-system-val[=PFX]
+                          Use system libval [installed at prefix PFX]],
+    VAL_DIR=$withval)
+
+MOZ_ARG_WITH_STRING(system-sres,
+[  --with-system-sres[=PFX]
+                          Use system libsres [installed at prefix PFX]],
+    SRES_DIR=$withval)
+
+MOZ_ARG_WITH_STRING(system-openssl,
+[  --with-system-openssl[=PFX]
+                          Use system openssl libraries [installed at prefix PFX]],
+    OPENSSL_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+
+if test -n "${VAL_DIR}"; then
+    CFLAGS="-I${VAL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${VAL_DIR}/lib $LDFLAGS"
+fi
+if test -z "$VAL_DIR" -o "$VAL_DIR" = no; then
+    SYSTEM_VAL=
+else
+    if test -n "${OPENSSL_DIR}"; then
+        CFLAGS="-I${OPENSSL_DIR}/include $CFLAGS"
+        LDFLAGS="-L${OPENSSL_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(crypto, EVP_md5, OPENSSL_LIBS="-lcrypto", OPENSSL_LIBS="")
+    if test -n "${SRES_DIR}"; then
+        CFLAGS="-I${SRES_DIR}/include $CFLAGS"
+        LDFLAGS="-L${SRES_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(sres, __res_init, SRES_LIBS="-lsres", SRES_LIBS="",
+                 $OPENSSL_LIBS)
+    AC_CHECK_LIB(val, val_gethostbyname,
+                 [SYSTEM_VAL=1
+                  VAL_LIBS="-lval $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  NSPR_LIBS="$NSPR_LIBS $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  AC_DEFINE(MOZ_DNSSEC)], SYSTEM_VAL=,
+                 $SRES_LIBS $OPENSSL_LIBS)
+    echo "XXXXXX: $NSPR_LIBS"
+fi
+
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
+
 dnl system JPEG support
 dnl ========================================================
 MOZ_ARG_WITH_STRING(system-jpeg,
@@ -5559,10 +5612,12 @@
 dnl fi
 
 AC_SUBST(SYSTEM_MAKEDEPEND)
+AC_SUBST(SYSTEM_VAL)
 AC_SUBST(SYSTEM_JPEG)
 AC_SUBST(SYSTEM_PNG)
 AC_SUBST(SYSTEM_ZLIB)
 
+AC_SUBST(VAL_LIBS)
 AC_SUBST(JPEG_CFLAGS)
 AC_SUBST(JPEG_LIBS)
 AC_SUBST(ZLIB_CFLAGS)
@@ -5570,6 +5625,7 @@
 AC_SUBST(PNG_CFLAGS)
 AC_SUBST(PNG_LIBS)
 
+AC_SUBST(MOZ_VAL_LIBS)
 AC_SUBST(MOZ_JPEG_CFLAGS)
 AC_SUBST(MOZ_JPEG_LIBS)
 AC_SUBST(MOZ_ZLIB_CFLAGS)
diff -u -r mozilla/configure.in.orig mozilla.test/configure.in.orig
--- mozilla/docshell/base/nsDocShell.cpp	2005-05-10 13:54:21.000000000 -0700
+++ mozilla.test/docshell/base/nsDocShell.cpp	2005-08-31 09:13:29.000000000 -0700
@@ -2752,6 +2752,15 @@
         formatStrCount = 1;
         error.Assign(NS_LITERAL_STRING("dnsNotFound"));
     }
+    else if (NS_ERROR_DNSSEC_VALIDATION_ERROR == aError) {
+        NS_ENSURE_ARG_POINTER(aURI);
+        // Get the host
+        nsCAutoString host;
+        aURI->GetHost(host);
+        CopyUTF8toUTF16(host, formatStrs[0]);
+        formatStrCount = 1;
+        error.Assign(NS_LITERAL_STRING("dnsDNSSECError"));
+    }
     else if(NS_ERROR_CONNECTION_REFUSED == aError) {
         NS_ENSURE_ARG_POINTER(aURI);
         // Build up the host:port string.
diff -u -r mozilla/docshell/base/nsWebShell.cpp mozilla.test/docshell/base/nsWebShell.cpp
--- mozilla/docshell/base/nsWebShell.cpp	2005-04-05 13:28:27.000000000 -0700
+++ mozilla.test/docshell/base/nsWebShell.cpp	2005-08-31 09:13:29.000000000 -0700
@@ -939,6 +939,7 @@
 
     // Errors to be shown only on top-level frames
     if ((aStatus == NS_ERROR_UNKNOWN_HOST || 
+         aStatus == NS_ERROR_DNSSEC_VALIDATION_ERROR ||
          aStatus == NS_ERROR_CONNECTION_REFUSED ||
          aStatus == NS_ERROR_UNKNOWN_PROXY_HOST || 
          aStatus == NS_ERROR_PROXY_CONNECTION_REFUSED) &&
diff -u -r mozilla/docshell/resources/locale/en-US/appstrings.properties mozilla.test/docshell/resources/locale/en-US/appstrings.properties
--- mozilla/docshell/resources/locale/en-US/appstrings.properties	2004-10-20 09:26:09.000000000 -0700
+++ mozilla.test/docshell/resources/locale/en-US/appstrings.properties	2005-08-31 09:13:29.000000000 -0700
@@ -20,6 +20,7 @@
 malformedURI=The URL is not valid and cannot be loaded.
 fileNotFound=The file %S cannot be found. Please check the location and try again.
 dnsNotFound=%S could not be found. Please check the name and try again.
+dnsDNSSECError=%S failed its DNSSEC security check validation.  Please contact a system administrator for help.
 protocolNotFound=%S is not a registered protocol.
 connectionFailure=The connection was refused when attempting to contact %S.
 netInterrupt=The connection to %S has terminated unexpectedly. Some data may have been transferred.
diff -u -r mozilla/docshell/resources/locale/en-US/netError.dtd mozilla.test/docshell/resources/locale/en-US/netError.dtd
--- mozilla/docshell/resources/locale/en-US/netError.dtd	2003-01-09 10:17:04.000000000 -0800
+++ mozilla.test/docshell/resources/locale/en-US/netError.dtd	2005-08-31 09:13:29.000000000 -0700
@@ -14,6 +14,9 @@
 <!ENTITY dnsNotFound.title "Address Not Found Error">
 <!ENTITY dnsNotFound.longDesc "The address (URL) does not correspond to a known site and could not be loaded. This could be due to a misspelling in the address or because the site does not exist. If the address is known to be valid, or if the problem occurs for many sites, it may be an issue with your proxy service (if you use one) or the directory name service lookup. In such cases you should consult your system documentation, administrator or Internet Service Provider (ISP) as appropriate for further assistance.">
 
+<!ENTITY dnsDNSSECError.title "DNSSEC Validation Error">
+<!ENTITY dnsDNSSECError.longDesc "The address (URL) failed its DNSSEC security check validation.  Please contact a system administrator for help.">
+
 <!ENTITY protocolNotFound.title "Protocol Not Known Error">
 <!ENTITY protocolNotFound.longDesc "The address (URL) starts with a protocol that is not recognized by the browser. A protocol is the part at the front of the address, such as http: or ftp: which tells the browser how to connect to the site. In this instance, the protocol is unknown so loading cannot continue. Check that the address is correct before retrying.">
 
diff -u -r mozilla/embedding/browser/gtk/src/Makefile.in mozilla.test/embedding/browser/gtk/src/Makefile.in
--- mozilla/embedding/browser/gtk/src/Makefile.in	2004-04-08 12:18:25.000000000 -0700
+++ mozilla.test/embedding/browser/gtk/src/Makefile.in	2005-08-31 09:13:29.000000000 -0700
@@ -86,6 +86,7 @@
 
 XP_LIBS		+= \
 		$(PNG_LIBS) \
+		$(VAL_LIBS) \
 		$(JPEG_LIBS) \
 		$(ZLIB_LIBS) \
 		$(MOZ_GDK_PIXBUF_LIBS) \
diff -u -r mozilla/embedding/browser/photon/src/Makefile.in mozilla.test/embedding/browser/photon/src/Makefile.in
--- mozilla/embedding/browser/photon/src/Makefile.in	2004-05-12 09:54:19.000000000 -0700
+++ mozilla.test/embedding/browser/photon/src/Makefile.in	2005-08-31 09:13:29.000000000 -0700
@@ -81,6 +81,7 @@
 XP_LIBS		+= \
 		$(PNG_LIBS) \
 		$(JPEG_LIBS) \
+		$(VAL_LIBS) \
 		$(ZLIB_LIBS) \
 		$(NULL)
 
diff -u -r mozilla/extensions/cookie/jar.mn mozilla.test/extensions/cookie/jar.mn
--- mozilla/extensions/cookie/jar.mn	2004-02-04 06:24:06.000000000 -0800
+++ mozilla.test/extensions/cookie/jar.mn	2005-08-31 09:13:29.000000000 -0700
@@ -8,6 +8,7 @@
     content/cookie/pref-images.xul                 (resources/content/pref-images.xul)
     content/cookie/pref-popups.xul                 (resources/content/pref-popups.xul)
     content/cookie/cookieOverlay.js                (resources/content/cookieOverlay.js)
+    content/cookie/pref-dnssec.xul                 (resources/content/pref-dnssec.xul)
     content/cookie/p3p.xul                         (resources/content/p3p.xul)
     content/cookie/p3pDialog.xul                   (resources/content/p3pDialog.xul)
     content/cookie/cookieAcceptDialog.xul          (resources/content/cookieAcceptDialog.xul)
@@ -30,6 +31,7 @@
     locale/en-US/cookie/pref-cookies.dtd           (resources/locale/en-US/pref-cookies.dtd)
     locale/en-US/cookie/pref-images.dtd            (resources/locale/en-US/pref-images.dtd)
     locale/en-US/cookie/pref-popups.dtd            (resources/locale/en-US/pref-popups.dtd)
+    locale/en-US/cookie/pref-dnssec.dtd            (resources/locale/en-US/pref-dnssec.dtd)
     locale/en-US/cookie/p3p.dtd                    (resources/locale/en-US/p3p.dtd)
     locale/en-US/cookie/cookie.properties          (resources/locale/en-US/cookie.properties)
     locale/en-US/cookie/cookieAcceptDialog.properties  (resources/locale/en-US/cookieAcceptDialog.properties)
diff -u -r mozilla/extensions/cookie/resources/content/cookiePrefsOverlay.xul mozilla.test/extensions/cookie/resources/content/cookiePrefsOverlay.xul
--- mozilla/extensions/cookie/resources/content/cookiePrefsOverlay.xul	2003-03-25 18:02:42.000000000 -0800
+++ mozilla.test/extensions/cookie/resources/content/cookiePrefsOverlay.xul	2005-08-31 09:13:29.000000000 -0700
@@ -46,6 +46,12 @@
                       label="&popups.label;"/> 
       </treerow>
     </treeitem>
+    <treeitem position="3">
+      <treerow>
+        <treecell url="chrome://cookie/content/pref-dnssec.xul"
+                      label="&dnssec.label;"/> 
+      </treerow>
+    </treeitem>
   </treechildren>
     
 </overlay>
diff -u -r mozilla/extensions/cookie/resources/locale/en-US/cookiePrefsOverlay.dtd mozilla.test/extensions/cookie/resources/locale/en-US/cookiePrefsOverlay.dtd
--- mozilla/extensions/cookie/resources/locale/en-US/cookiePrefsOverlay.dtd	2003-01-20 23:37:34.000000000 -0800
+++ mozilla.test/extensions/cookie/resources/locale/en-US/cookiePrefsOverlay.dtd	2005-08-31 09:13:29.000000000 -0700
@@ -1,3 +1,4 @@
 <!ENTITY cookies.label "Cookies">
 <!ENTITY images.label "Images">
 <!ENTITY popups.label "Popup Windows">
+<!ENTITY dnssec.label "DNS Security">
diff -u -r mozilla/layout/base/src/nsPresContext.cpp mozilla.test/layout/base/src/nsPresContext.cpp
--- mozilla/layout/base/src/nsPresContext.cpp	2004-10-04 22:43:57.000000000 -0700
+++ mozilla.test/layout/base/src/nsPresContext.cpp	2005-08-31 09:13:29.000000000 -0700
@@ -64,6 +64,7 @@
 #include "nsIWeakReferenceUtils.h"
 #include "nsCSSRendering.h"
 #include "prprf.h"
+#include "prnetdb.h"
 #include "nsContentPolicyUtils.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsIDOMDocument.h"
@@ -215,6 +216,7 @@
     mPrefs->UnregisterCallback("browser.active_color", nsPresContext::PrefChangedCallback, (void*)this);
     mPrefs->UnregisterCallback("browser.visited_color", nsPresContext::PrefChangedCallback, (void*)this);
     mPrefs->UnregisterCallback("network.image.imageBehavior", nsPresContext::PrefChangedCallback, (void*)this);
+    mPrefs->UnregisterCallback("network.dnssec.dnssecBehavior", nsPresContext::PrefChangedCallback, (void*)this);
     mPrefs->UnregisterCallback("image.animation_mode", nsPresContext::PrefChangedCallback, (void*)this);
 #ifdef IBMBIDI
     mPrefs->UnregisterCallback("bidi.", PrefChangedCallback, (void*)this);
@@ -513,6 +515,15 @@
     nsMemory::Free(animatePref);
   }
 
+#ifdef MOZ_DNSSEC
+  if (NS_SUCCEEDED(mPrefs->GetIntPref("network.dnssec.dnssecBehavior", &prefInt))) {
+    fprintf(stderr, "XYZhere : yes: %d\n", prefInt);
+     PR_set_dnssec_validate_policy(prefInt);
+  } else {
+    fprintf(stderr, "XYZhere : no\n");
+  }
+#endif /* MOZ_DNSSEC */
+
 #ifdef IBMBIDI
   if (NS_SUCCEEDED(mPrefs->GetIntPref("bidi.direction", &prefInt))) {
      SET_BIDI_OPTION_DIRECTION(mBidi, prefInt);
@@ -616,6 +627,7 @@
     mPrefs->RegisterCallback("browser.active_color", nsPresContext::PrefChangedCallback, (void*)this);
     mPrefs->RegisterCallback("browser.visited_color", nsPresContext::PrefChangedCallback, (void*)this);
     mPrefs->RegisterCallback("network.image.imageBehavior", nsPresContext::PrefChangedCallback, (void*)this);
+    mPrefs->RegisterCallback("network.dnssec.dnssecBehavior", nsPresContext::PrefChangedCallback, (void*)this);
     mPrefs->RegisterCallback("image.animation_mode", nsPresContext::PrefChangedCallback, (void*)this);
 #ifdef IBMBIDI
     mPrefs->RegisterCallback("bidi.", PrefChangedCallback, (void*)this);
diff -u -r mozilla/modules/libpr0n/build/Makefile.in mozilla.test/modules/libpr0n/build/Makefile.in
--- mozilla/modules/libpr0n/build/Makefile.in	2004-01-07 05:36:42.000000000 -0800
+++ mozilla.test/modules/libpr0n/build/Makefile.in	2005-08-31 09:13:29.000000000 -0700
@@ -72,6 +72,7 @@
 EXTRA_DSO_LDOPTS = \
 		$(LIBS_DIR) \
 		$(JPEG_LIBS) \
+		$(VAL_LIBS) \
 		$(PNG_LIBS) $(ZLIB_LIBS) \
 		$(EXTRA_DSO_LIBS) \
 		$(MOZ_COMPONENT_LIBS) \
diff -u -r mozilla/netwerk/base/public/nsNetError.h mozilla.test/netwerk/base/public/nsNetError.h
--- mozilla/netwerk/base/public/nsNetError.h	2003-09-11 13:32:14.000000000 -0700
+++ mozilla.test/netwerk/base/public/nsNetError.h	2005-08-31 09:13:29.000000000 -0700
@@ -244,6 +244,9 @@
 #define NS_ERROR_UNKNOWN_HOST \
     NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 30)
 
+#define NS_ERROR_DNSSEC_VALIDATION_ERROR \
+    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 31)
+
 /**
  * The lookup of a proxy hostname failed.
  *
diff -u -r mozilla/netwerk/base/src/nsSocketTransport2.cpp mozilla.test/netwerk/base/src/nsSocketTransport2.cpp
--- mozilla/netwerk/base/src/nsSocketTransport2.cpp	2004-09-29 00:23:11.000000000 -0700
+++ mozilla.test/netwerk/base/src/nsSocketTransport2.cpp	2005-08-31 09:13:29.000000000 -0700
@@ -1136,6 +1136,7 @@
         mCondition != NS_ERROR_PROXY_CONNECTION_REFUSED &&
         mCondition != NS_ERROR_NET_TIMEOUT &&
         mCondition != NS_ERROR_UNKNOWN_HOST &&
+        mCondition != NS_ERROR_DNSSEC_VALIDATION_ERROR &&
         mCondition != NS_ERROR_UNKNOWN_PROXY_HOST)
         return PR_FALSE;
 
@@ -1315,7 +1316,9 @@
         // status contains DNS lookup status
         if (NS_FAILED(status)) {
             // fixup error code if proxy was not found
-            if ((status == NS_ERROR_UNKNOWN_HOST) && !mProxyHost.IsEmpty())
+            if ((status == NS_ERROR_UNKNOWN_HOST ||
+                 status == NS_ERROR_DNSSEC_VALIDATION_ERROR) &&
+                !mProxyHost.IsEmpty())
                 mCondition = NS_ERROR_UNKNOWN_PROXY_HOST;
             else
                 mCondition = status;
diff -u -r mozilla/netwerk/dns/src/nsDNSService2.cpp mozilla.test/netwerk/dns/src/nsDNSService2.cpp
--- mozilla/netwerk/dns/src/nsDNSService2.cpp	2004-09-01 16:44:36.000000000 -0700
+++ mozilla.test/netwerk/dns/src/nsDNSService2.cpp	2005-08-31 09:13:29.000000000 -0700
@@ -116,6 +116,10 @@
     }
     else {
         mIter = nsnull; // no iterations
+        if (!mHostRecord->addr) {
+            mDone = !mIter;
+            return NS_ERROR_NOT_AVAILABLE;
+        }
         NS_ASSERTION(mHostRecord->addr, "no addr");
         memcpy(addr, mHostRecord->addr, sizeof(PRNetAddr));
         // set given port
diff -u -r mozilla/netwerk/dns/src/nsHostResolver.cpp mozilla.test/netwerk/dns/src/nsHostResolver.cpp
--- mozilla/netwerk/dns/src/nsHostResolver.cpp	2004-09-01 16:44:36.000000000 -0700
+++ mozilla.test/netwerk/dns/src/nsHostResolver.cpp	2005-08-31 09:13:29.000000000 -0700
@@ -54,6 +54,7 @@
 #include "pratom.h"
 #include "prthread.h"
 #include "prerror.h"
+#include "prerr.h"
 #include "prcvar.h"
 #include "prtime.h"
 #include "prlong.h"
@@ -641,7 +642,26 @@
 #endif
 
         // convert error code to nsresult.
-        nsresult status = ai ? NS_OK : NS_ERROR_UNKNOWN_HOST;
+        nsresult status;
+        
+        if (!ai) {
+            // handle errors
+            PRErrorCode err = PR_GetError();
+            fprintf(stderr, "nshostres out: ai=%d, err=%d, %d\n",
+                    ai, err, PR_DNSSEC_VALIDATION_ERROR);
+            switch(err) {
+            case PR_DNSSEC_VALIDATION_ERROR:
+                status = NS_ERROR_DNSSEC_VALIDATION_ERROR;
+                break;
+
+            default:
+                status = NS_ERROR_UNKNOWN_HOST;
+                break;
+            }
+        } else {
+            status = NS_OK;
+        }
+        
         resolver->OnLookupComplete(rec, status, ai);
     }
     NS_RELEASE(resolver);
diff -u -r mozilla/nsprpub/config/autoconf.mk.in mozilla.test/nsprpub/config/autoconf.mk.in
--- mozilla/nsprpub/config/autoconf.mk.in	2003-03-22 07:28:52.000000000 -0800
+++ mozilla.test/nsprpub/config/autoconf.mk.in	2005-08-31 09:13:29.000000000 -0700
@@ -34,6 +34,7 @@
 
 LIBNSPR		= @LIBNSPR@
 LIBPLC		= @LIBPLC@
+VAL_LIBS    = @VAL_LIBS@
 
 CROSS_COMPILE	= @CROSS_COMPILE@
 BUILD_OPT	= @MOZ_OPTIMIZE@
diff -u -r mozilla/nsprpub/configure.in mozilla.test/nsprpub/configure.in
--- mozilla/nsprpub/configure.in	2004-09-14 14:14:38.000000000 -0700
+++ mozilla.test/nsprpub/configure.in	2005-08-31 09:13:29.000000000 -0700
@@ -1905,6 +1905,56 @@
 dnl AC_CHECK_LIB(thread, main)
 dnl AC_CHECK_LIB(vms_jackets, main)
 
+dnl Check for libval, the DNSSEC validation library
+dnl ========================================================
+AC_ARG_WITH(system-val,
+[  --with-system-val[=PFX]
+                          Use system libval [installed at prefix PFX]],
+    VAL_DIR=$withval)
+
+AC_ARG_WITH(system-sres,
+[  --with-system-sres[=PFX]
+                          Use system libsres [installed at prefix PFX]],
+    SRES_DIR=$withval)
+
+AC_ARG_WITH(system-openssl,
+[  --with-system-openssl[=PFX]
+                          Use system openssl libraries [installed at prefix PFX]],
+    OPENSSL_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+
+if test -n "${VAL_DIR}"; then
+    CFLAGS="-I${VAL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${VAL_DIR}/lib $LDFLAGS"
+fi
+if test -z "$VAL_DIR" -o "$VAL_DIR" = no; then
+    SYSTEM_VAL=
+else
+    if test -n "${OPENSSL_DIR}"; then
+        CFLAGS="-I${OPENSSL_DIR}/include $CFLAGS"
+        LDFLAGS="-L${OPENSSL_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(crypto, EVP_md5, OPENSSL_LIBS="-lcrypto", OPENSSL_LIBS="")
+    if test -n "${SRES_DIR}"; then
+        CFLAGS="-I${SRES_DIR}/include $CFLAGS"
+        LDFLAGS="-L${SRES_DIR}/lib $LDFLAGS"
+    fi
+    AC_CHECK_LIB(sres, __res_init, SRES_LIBS="-lsres", SRES_LIBS="",
+                 $OPENSSL_LIBS)
+    AC_CHECK_LIB(val, val_gethostbyname,
+                 [SYSTEM_VAL=1
+                  VAL_LIBS="-lval $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  NSPR_LIBS="$NSPR_LIBS $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+                  AC_DEFINE(MOZ_DNSSEC)], SYSTEM_VAL=,
+                 $SRES_LIBS $OPENSSL_LIBS)
+fi
+
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
 
 dnl We don't want anything to link with libdl even if it's present on OS X, 
 dnl since it's not used and not part of the default installation.
@@ -2424,6 +2474,7 @@
 AC_SUBST(OBJECT_MODE)
 AC_SUBST(GC_LEAK_DETECTOR)
 AC_SUBST(ENABLE_STRIP)
+AC_SUBST(VAL_LIBS)
 
 AC_SUBST(USE_PTHREADS)
 AC_SUBST(USE_BTHREADS)
diff -u -r mozilla/nsprpub/pr/include/prerr.h mozilla.test/nsprpub/pr/include/prerr.h
--- mozilla/nsprpub/pr/include/prerr.h	2003-01-20 12:10:28.000000000 -0800
+++ mozilla.test/nsprpub/pr/include/prerr.h	2005-08-31 09:13:29.000000000 -0700
@@ -266,10 +229,11 @@
 /* The library is not loaded */
 #define PR_LIBRARY_NOT_LOADED_ERROR              (-5926L)
 
+/* The DNS record failed DNSSEC validation */
+#define PR_DNSSEC_VALIDATION_ERROR               (-5925L)
+
 /* Placeholder for the end of the list */
-#define PR_MAX_ERROR                             (-5925L)
+#define PR_MAX_ERROR                             (-5924L)
 
 extern void nspr_InitializePRErrorTable(void);
 #define ERROR_TABLE_BASE_nspr (-6000L)
-
-#endif /* prerr_h___ */
diff -u -r mozilla/nsprpub/pr/include/prnetdb.h mozilla.test/nsprpub/pr/include/prnetdb.h
--- mozilla/nsprpub/pr/include/prnetdb.h	2004-09-01 16:44:37.000000000 -0700
+++ mozilla.test/nsprpub/pr/include/prnetdb.h	2005-08-31 09:13:29.000000000 -0700
@@ -491,6 +491,15 @@
 NSPR_API(PRUint32) PR_htonl(PRUint32);
 NSPR_API(PRUint64) PR_htonll(PRUint64);
 
+/***********************************************************************
+** FUNCTIONS: PR_set_dnssec_validate_policy
+**
+** DESCRIPTION: set the DNS resolution policy
+**  
+**   XXX
+***********************************************************************/
+NSPR_API(void) PR_set_dnssec_validate_policy(PRInt32);
+
 PR_END_EXTERN_C
 
 #endif /* prnetdb_h___ */
diff -u -r mozilla/nsprpub/pr/src/misc/prerr.c mozilla.test/nsprpub/pr/src/misc/prerr.c
--- mozilla/nsprpub/pr/src/misc/prerr.c	2003-01-20 12:10:35.000000000 -0800
+++ mozilla.test/nsprpub/pr/src/misc/prerr.c	2005-08-31 09:13:29.000000000 -0700
@@ -114,11 +80,12 @@
 	{"PR_CONNECT_ABORTED_ERROR",    "Connection aborted"},
 	{"PR_HOST_UNREACHABLE_ERROR",    "Host is unreachable"},
 	{"PR_LIBRARY_NOT_LOADED_ERROR",    "The library is not loaded"},
+	{"PR_DNSSEC_VALIDATION_ERROR",    "The DNS record failed DNSSEC validation"},
 	{"PR_MAX_ERROR",    "Placeholder for the end of the list"},
 	{0, 0}
 };
 
-static const struct PRErrorTable et = { text, "prerr", -6000L, 76 };
+static const struct PRErrorTable et = { text, "prerr", -6000L, 77 };
 
 void nspr_InitializePRErrorTable(void) {
     PR_ErrorInstallTable(&et);
diff -u -r mozilla/nsprpub/pr/src/misc/prerr.et mozilla.test/nsprpub/pr/src/misc/prerr.et
--- mozilla/nsprpub/pr/src/misc/prerr.et	2003-01-20 12:10:36.000000000 -0800
+++ mozilla.test/nsprpub/pr/src/misc/prerr.et	2005-08-31 09:13:29.000000000 -0700
@@ -129,6 +129,7 @@
 ec PR_CONNECT_ABORTED_ERROR,    "Connection aborted"
 ec PR_HOST_UNREACHABLE_ERROR,   "Host is unreachable"
 ec PR_LIBRARY_NOT_LOADED_ERROR, "The library is not loaded"
+ec PR_DNSSEC_VALIDATION_ERROR,  "The DNS record failed DNSSEC validation"
 
 ec PR_MAX_ERROR,                "Placeholder for the end of the list"
 
diff -u -r mozilla/nsprpub/pr/src/misc/prerr.properties mozilla.test/nsprpub/pr/src/misc/prerr.properties
--- mozilla/nsprpub/pr/src/misc/prerr.properties	2003-01-20 12:10:37.000000000 -0800
+++ mozilla.test/nsprpub/pr/src/misc/prerr.properties	2005-08-31 09:13:29.000000000 -0700
@@ -109,4 +76,5 @@
 PR_CONNECT_ABORTED_ERROR=Connection aborted
 PR_HOST_UNREACHABLE_ERROR=Host is unreachable
 PR_LIBRARY_NOT_LOADED_ERROR=The library is not loaded
+PR_DNSSEC_VALIDATION_ERROR=The DNS record failed DNSSEC validation
 PR_MAX_ERROR=Placeholder for the end of the list
diff -u -r mozilla/nsprpub/pr/src/misc/prnetdb.c mozilla.test/nsprpub/pr/src/misc/prnetdb.c
--- mozilla/nsprpub/pr/src/misc/prnetdb.c	2004-09-01 16:44:37.000000000 -0700
+++ mozilla.test/nsprpub/pr/src/misc/prnetdb.c	2005-08-31 13:12:19.000000000 -0700
@@ -36,6 +36,10 @@
 
 #include <string.h>
 
+#ifdef MOZ_DNSSEC
+#include <validator.h>
+#endif
+
 /*
  * On Unix, the error code for gethostbyname() and gethostbyaddr()
  * is returned in the global variable h_errno, instead of the usual
@@ -63,8 +67,8 @@
  * - _PR_HAVE_GETHOST_R_POINTER: the gethostbyXXX_r functions return
  *   a struct hostent* pointer.  For example, Solaris and IRIX.
  */
-#if defined(_PR_NO_PREEMPT) || defined(_PR_HAVE_GETHOST_R) \
-    || defined(_PR_HAVE_THREADSAFE_GETHOST)
+#if (defined(_PR_NO_PREEMPT) || defined(_PR_HAVE_GETHOST_R) \
+     || defined(_PR_HAVE_THREADSAFE_GETHOST)) && !defined(MOZ_DNSSEC)
 #define _PR_NO_DNS_LOCK
 #endif
 
@@ -418,7 +422,7 @@
 	 (void)setnetconfig();
 #endif
 #endif
-#if !defined(_PR_NO_DNS_LOCK)
+#if !defined(_PR_NO_LOCK_DNS)
 	_pr_dnsLock = PR_NewLock();
 #endif
 #if !defined(_PR_HAVE_GETPROTO_R)
@@ -431,7 +435,7 @@
 
 void _PR_CleanupNet(void)
 {
-#if !defined(_PR_NO_DNS_LOCK)
+#if !defined(_PR_NO_LOCK_DNS)
     if (_pr_dnsLock) {
         PR_DestroyLock(_pr_dnsLock);
         _pr_dnsLock = NULL;
@@ -626,6 +630,123 @@
 }
 #endif /* !defined(_PR_HAVE_GETPROTO_R) */
 
+#define DNSSEC_FAILURE 0
+#define DNSSEC_SUCCESS 1
+#define DODNSSECDEBUG
+#ifdef DODNSSECDEBUG
+#define DNSSECDEBUG(x) fprintf x
+#else
+#define DNSSECDEBUG(x) 
+#endif
+
+
+/* 2 = ignore, 1 = allow indeterm, 0 = always secure */
+int global_policy = 1;
+void
+PR_set_dnssec_validate_policy(int policy)
+{
+  DNSSECDEBUG((stderr, "DNSSEC Setting policy: %d\n", policy));
+  global_policy = policy;
+}
+
+
+#ifdef MOZ_DNSSEC
+/* XXX: include drop or configurize */
+#include <stdio.h>
+#include <netdb.h>
+
+#define CHECK_RET(x)                            \
+  {                                             \
+    DNSSECDEBUG((stderr,"CHECK_RET    ret: %d\n",x));            \
+    return x;                                   \
+  }                                             \
+
+/* XXX: pass in address type? */
+int dnssec_validate (const char *domain_name) {
+    int dnssec_status;
+    struct hostent *hentry = NULL;
+    
+    /* don't even bother validating when the policy doesn't call for it */
+    if (global_policy == 2)
+        CHECK_RET(DNSSEC_SUCCESS);
+
+    DNSSECDEBUG((stderr, "DNSSECvalidating: %s\n", domain_name));
+    if (strcmp(domain_name, "localhost") == 0)
+        return DNSSEC_SUCCESS;
+    
+    /* attempt a lookup */
+    hentry = val_gethostbyname(domain_name, &dnssec_status);
+
+    /* check the results, or assume indeterminate if we don't know why
+       the above failed */
+    DNSSECDEBUG((stderr, "  val_gethostbyname returned %d/%x\n",
+                 dnssec_status, hentry));
+    if (!hentry)
+        dnssec_status = INDETERMINATE;
+    else
+        dnssec_status = val_get_hostent_dnssec_status(hentry);
+
+    DNSSECDEBUG((stderr, "  val_gethostbyname's dnssec status was %d\n",
+                 dnssec_status));
+
+    if (hentry)
+        val_freehostent(hentry);
+    if (dnssec_check_policy(dnssec_status, global_policy) == DNSSEC_SUCCESS)
+        return DNSSEC_SUCCESS;
+
+    DNSSECDEBUG((stderr, "**********************************************************************\n"));
+    DNSSECDEBUG((stderr, "**********************************************************************\n"));
+    DNSSECDEBUG((stderr, "**********************************************************************\n"));
+    return DNSSEC_FAILURE;
+}
+
+int
+dnssec_check_policy(int dnssec_status, int policytype) 
+{
+  DNSSECDEBUG((stderr, "DNSSEC dnssec_check_policy: %d %d\n",
+               dnssec_status, policytype));
+  if (policytype == 2)
+      CHECK_RET(DNSSEC_SUCCESS);
+  
+  switch (dnssec_status) {
+
+  case VALIDATE_SUCCESS:
+    CHECK_RET(DNSSEC_SUCCESS);
+    
+  case INDETERMINATE:
+    if (policytype == 1)
+        CHECK_RET(DNSSEC_SUCCESS);
+    CHECK_RET(DNSSEC_FAILURE);
+    
+    /* assume everything else is a failure */
+    /* XXX: allow for expired sigs to be declared ok in policy */
+  default:
+    CHECK_RET(DNSSEC_FAILURE);
+  }
+}
+
+struct hostent *
+dnssec_gethostbyname(const char *name) 
+{
+  int dnssec_status;
+  struct hostent *h;
+  h = val_gethostbyname(name, &dnssec_status);
+  if (dnssec_check_policy(dnssec_status, global_policy) == DNSSEC_SUCCESS)
+      return h;
+  if (h)
+      val_freehostent(h);
+  return NULL;
+}
+
+
+#else  /* !MOZ_DNSSEC */
+
+int dnssec_validate (const char *domain_name) {
+  return DNSSEC_SUCCESS;
+}
+
+#endif /* !MOZ_DNSSEC */
+
 /*
  * #################################################################
  * NOTE: tmphe, tmpbuf, bufsize, h, and h_err are local variables
@@ -636,8 +757,12 @@
  */
 #if defined(_PR_HAVE_GETHOST_R_INT)
 
+#ifdef MOZ_DNSSEC
+#define GETHOSTBYNAME(name) dnssec_gethostbyname(name)
+#else
 #define GETHOSTBYNAME(name) \
     (gethostbyname_r(name, &tmphe, tmpbuf, bufsize, &h, &h_err), h)
+#endif
 #define GETHOSTBYNAME2(name, af) \
     (gethostbyname2_r(name, af, &tmphe, tmpbuf, bufsize, &h, &h_err), h)
 #define GETHOSTBYADDR(addr, addrlen, af) \
@@ -646,8 +771,12 @@
 
 #elif defined(_PR_HAVE_GETHOST_R_POINTER)
 
+#ifdef MOZ_DNSSEC
+#define GETHOSTBYNAME(name) dnssec_gethostbyname(name)
+#else
 #define GETHOSTBYNAME(name) \
     gethostbyname_r(name, &tmphe, tmpbuf, bufsize, &h_err)
+#endif
 #define GETHOSTBYNAME2(name, af) \
     gethostbyname2_r(name, af, &tmphe, tmpbuf, bufsize, &h_err)
 #define GETHOSTBYADDR(addr, addrlen, af) \
@@ -655,7 +784,11 @@
 
 #else
 
+#ifdef MOZ_DNSSEC
+#define GETHOSTBYNAME(name) dnssec_gethostbyname(name)
+#else
 #define GETHOSTBYNAME(name) gethostbyname(name)
+#endif
 #define GETHOSTBYNAME2(name, af) gethostbyname2(name, af)
 #define GETHOSTBYADDR(addr, addrlen, af) gethostbyaddr(addr, addrlen, af)
 
@@ -669,11 +802,11 @@
 #if defined(_PR_HAVE_GETHOST_R)
     char localbuf[PR_NETDB_BUF_SIZE];
     char *tmpbuf;
-    struct hostent tmphe;
-    int h_err;
 #endif
 
     if (!_pr_initialized) _PR_ImplicitInitialization();
+    DNSSECDEBUG((stderr, "######################################################################\n"));
+    DNSSECDEBUG((stderr, "DNSSECpr_gethostbyname: %d %s\n", __LINE__, name));
 
 #if defined(_PR_HAVE_GETHOST_R)
     tmpbuf = localbuf;
@@ -695,13 +828,20 @@
 #else
     h = GETHOSTBYNAME(name);
 #endif
-    
-	if (NULL == h)
+
+    /* XXX */
+    DNSSECDEBUG((stderr, "######################################################################\n"));
+    DNSSECDEBUG((stderr, "DNSSECgethostbyname res: line=%d host=%s h_errno=%d\n",
+                 __LINE__, name, h_errno));
+    if (NULL == h)
 	{
+        DNSSECDEBUG((stderr, "********** Status = SUCCESS\n"));
+        DNSSECDEBUG((stderr, "######################################################################\n"));
 	    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, _MD_GETHOST_ERRNO());
 	}
 	else
 	{
+      /* XXX: if dnssec I tihnk we need to free h after the copy */
 		_PRIPAddrConversion conversion = _PRIPAddrNoConversion;
 		rv = CopyHostent(h, &buf, &bufsize, conversion, hp);
 		if (PR_SUCCESS != rv)
@@ -823,6 +963,8 @@
     PRBool did_af_inet = PR_FALSE;
 #endif
 
+    DNSSECDEBUG((stderr, "######################################################################\n"));
+    DNSSECDEBUG((stderr, "DNSSECgetipnodebyname: %d %s\n", __LINE__, name));
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
     if (af != PR_AF_INET && af != PR_AF_INET6) {
@@ -875,6 +1017,8 @@
     }
 #endif
 
+    /* XXX: should be able to map gethostbyname2 -> getaddrinfo with hints */
+
     /* Do not need to lock the DNS lock if getipnodebyname() is called */
 #ifdef _PR_INET6
 #ifdef _PR_HAVE_GETHOSTBYNAME2
@@ -1012,6 +1156,8 @@
 	int error_num;
 #endif
 
+    DNSSECDEBUG((stderr, "######################################################################\n"));
+    DNSSECDEBUG((stderr, "DNSSECgethostbyaddr: %d\n", __LINE__));
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
 	if (hostaddr->raw.family == PR_AF_INET6)
@@ -1780,17 +1926,22 @@
         PR_ASSERT(0 == rv);
         /* clean up after the failed inet_pton() call */
         memset(&addr->ipv6.ip, 0, sizeof(addr->ipv6.ip));
+        /* XXX */
+        DNSSECDEBUG((stderr, "######################################################################\n"));
+        DNSSECDEBUG((stderr, "DNSSECinet_pton: %d %s\n", __LINE__, string));
+        LOCK_DNS();
         rv = inet_pton(AF_INET, string, &addr->inet.ip);
         if (1 == rv)
         {
-            addr->raw.family = AF_INET;
+          addr->raw.family = AF_INET;
         }
         else
         {
-            PR_ASSERT(0 == rv);
-            PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-            status = PR_FAILURE;
+          PR_ASSERT(0 == rv);
+          PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
+          status = PR_FAILURE;
         }
+        UNLOCK_DNS();
     }
 #else /* _PR_HAVE_INET_NTOP */
     rv = StringToV6Addr(string, &addr->ipv6.ip);
@@ -1937,8 +2088,18 @@
 #if defined(_PR_INET6)
 
 typedef struct addrinfo PRADDRINFO;
+
+#ifdef MOZ_DNSSEC
+/*
+XXX future:
+#define GETADDRINFO val_getaddrinfo
+*/
+#define GETADDRINFO getaddrinfo
+#define FREEADDRINFO val_freeaddrinfo
+#else /* !MOZ_DNSSEC */
 #define GETADDRINFO getaddrinfo
 #define FREEADDRINFO freeaddrinfo
+#endif
 
 #elif defined(_PR_INET6_PROBE)
 
@@ -2013,8 +2174,11 @@
 #endif
 }
 
+#ifndef MOZ_DNSSEC
+/* for DNSSEC leave as is */
 #define GETADDRINFO (*_pr_getaddrinfo)
 #define FREEADDRINFO (*_pr_freeaddrinfo)
+#endif
 
 #endif /* _PR_INET6 */
 
@@ -2044,8 +2208,12 @@
         PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
         return NULL;
     }
+    DNSSECDEBUG((stderr, "DNSSECgethostbyname: %d %s\n", __LINE__, hostname));
     rv = PR_GetHostByName(hostname, ai->buf, sizeof ai->buf, &ai->hostent);
     if (rv == PR_FAILURE) {
+      DNSSECDEBUG((stderr, "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"));
+      DNSSECDEBUG((stderr, "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"));
+      DNSSECDEBUG((stderr, "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*\n"));
         PR_Free(ai);
         return NULL;
     }
@@ -2085,6 +2253,21 @@
          * RFC 3493.
          */
 
+        /* XXX */
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo: %d %s\n", __LINE__, hostname));
+
+        LOCK_DNS();
+        if (!dnssec_validate(hostname)) {
+            /* DNSsec validation failed */
+            PR_SetErrorText(0, "Host DNSsec validation failed");
+            PR_SetError(PR_DNSSEC_VALIDATION_ERROR, 0);
+            DNSSECDEBUG((stderr, "DNSSECinet_pton: returning failure %d %s\n",
+                         __LINE__, hostname));
+            UNLOCK_DNS();
+            return NULL;
+        }
+        UNLOCK_DNS();
+
         memset(&hints, 0, sizeof(hints));
         hints.ai_flags = (flags & PR_AI_NOCANONNAME) ? 0: AI_CANONNAME;
         hints.ai_family = (af == PR_AF_INET) ? AF_INET : AF_UNSPEC;
@@ -2099,9 +2282,26 @@
         hints.ai_socktype = SOCK_STREAM;
 
         rv = GETADDRINFO(hostname, NULL, &hints, &res);
-        if (rv == 0)
-            return (PRAddrInfo *) res;
-
+        if (rv == EAI_AGAIN) {
+          /* temporary failure...  odd...  try again? */
+          PR_Sleep(1000);
+          DNSSECDEBUG((stderr, "DNSSECgetaddrinfo reted/trying again: %d %d %d\n",
+                       __LINE__, rv, res));
+          rv = GETADDRINFO(hostname, NULL, &hints, &res);
+        }
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo reted: %d %d %d\n", __LINE__, rv, res));
+
+        if (rv == 0 && res != NULL &&
+            dnssec_check_policy(val_get_addrinfo_dnssec_status(res), global_policy) == DNSSEC_SUCCESS)
+            return res;
+        if (rv == 0) {
+          return (PRAddrInfo *) res;
+        }
+
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo failed: %d %d\n", __LINE__, rv));
+        DNSSECDEBUG((stderr, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&*\n"));
+        DNSSECDEBUG((stderr, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&*\n"));
+        DNSSECDEBUG((stderr, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&*\n"));
         PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, rv);
     }
     return NULL;
diff -u -r mozilla/security/nss/cmd/platlibs.mk mozilla.test/security/nss/cmd/platlibs.mk
--- mozilla/security/nss/cmd/platlibs.mk	2004-10-15 16:52:29.000000000 -0700
+++ mozilla.test/security/nss/cmd/platlibs.mk	2005-08-31 09:52:25.000000000 -0700
@@ -136,6 +136,9 @@
 	-lplc4 \
 	-lplds4 \
 	-lnspr4 \
+	-lval \
+	-lsres \
+	-lcrypto \
 	$(NULL)
 endif
 endif
@@ -221,6 +224,9 @@
 	-lplc4 \
 	-lplds4 \
 	-lnspr4 \
+	-lval \
+	-lsres \
+	-lcrypto \
 	$(NULL)
 
 JAR_LIBS = $(DIST)/lib/$(LIB_PREFIX)jar.$(LIB_SUFFIX) \
diff -u -r mozilla/xpfe/bootstrap/Makefile.in mozilla.test/xpfe/bootstrap/Makefile.in
--- mozilla/xpfe/bootstrap/Makefile.in	2004-06-24 11:58:48.000000000 -0700
+++ mozilla.test/xpfe/bootstrap/Makefile.in	2005-08-31 09:13:29.000000000 -0700
@@ -178,6 +178,10 @@
 LIBS += -lboehm
 endif
 
+ifdef SYSTEM_VAL
+LIBS += @VAL_LIBS@
+endif
+
 ifeq ($(MOZ_WIDGET_TOOLKIT),beos)
 BEOS_PROGRAM_RESOURCE = $(srcdir)/apprunner-beos.rsrc
 CPPSRCS += nsNativeAppSupportBeOS.cpp
diff -u -r mozilla/xpfe/components/prefwindow/resources/content/pref-help.js mozilla.test/xpfe/components/prefwindow/resources/content/pref-help.js
--- mozilla/xpfe/components/prefwindow/resources/content/pref-help.js	2004-01-13 08:37:21.000000000 -0800
+++ mozilla.test/xpfe/components/prefwindow/resources/content/pref-help.js	2005-08-31 09:13:29.000000000 -0700
@@ -36,6 +36,7 @@
   "chrome://communicator/content/pref/pref-security.xul": "sec_gen",
   "chrome://cookie/content/pref-cookies.xul": "cookies_prefs",
   "chrome://cookie/content/pref-images.xul": "images_prefs",
+  "chrome://cookie/content/pref-dnssec.xul": "dnssec_prefs",
   "chrome://cookie/content/pref-popups.xul": "pop_up_blocking",
   "chrome://wallet/content/pref-wallet.xul": "forms_prefs",
   "chrome://pippki/content/pref-masterpass.xul": "passwords_master",
--- /dev/null	2005-08-31 05:32:36.200190288 -0700
+++ mozilla.test/extensions/cookie/resources/locale/en-US/pref-dnssec.dtd	2005-08-31 10:04:17.000000000 -0700
@@ -0,0 +1,18 @@
+<!ENTITY dnssecHeader                    "DNS Security">
+
+<!ENTITY dnsSecurity.label            "DNS Security Policies">
+
+<!--LOCALIZATION NOTE (onStartLegend.label): Don't translate "&brandShortName;".
+    Place "&brandShortName;" in the phrase where the name of the application should
+	 appear
+-->
+<!ENTITY dnssecDetails                   "Require DNS Security when resolving host names.">
+
+<!ENTITY allDNSSecure.label             "Require all DNS lookups to be secure">
+<!ENTITY allDNSSecure.accesskey         "A">
+
+<!ENTITY possibleDNSSecure.label        "Use DNS security if possible.">
+<!ENTITY possibleDNSSecure.accesskey    "P">
+
+<!ENTITY neverDNSSecure.label           "Ignore DNS security.">
+<!ENTITY neverDNSSecure.accesskey       "N">
--- /dev/null	2005-08-31 05:32:36.200190288 -0700
+++ mozilla.test/extensions/cookie/resources/content/pref-dnssec.xul	2005-08-31 10:00:06.000000000 -0700
@@ -0,0 +1,65 @@
+<?xml version="1.0"?> 
+
+<?xml-stylesheet href="chrome://communicator/skin/" type="text/css"?>
+
+<!DOCTYPE page [
+<!ENTITY % brandDTD SYSTEM "chrome://global/locale/brand.dtd" >
+%brandDTD;
+<!ENTITY % prefDnssecDTD SYSTEM "chrome://cookie/locale/pref-dnssec.dtd" >
+%prefDnssecDTD;
+]>
+
+<page id="dnssecPanel" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+      onload="init();"
+      headertitle="&dnssecHeader;">
+          
+  <script type="application/x-javascript" src="chrome://cookie/content/cookieOverlay.js"/>
+
+  <script type="application/x-javascript">
+  <![CDATA[
+  
+  var panel = "chrome://cookie/content/pref-dnssec.xul";
+  var _elementIDs = ["networkDnssecBehaviour"];
+
+  function init()
+  {
+    parent.initPanel('chrome://cookie/content/pref-dnssec.xul');
+
+    setDisables();
+  }
+
+  function setDisables()
+  {
+    var dnssecBehavior = document.getElementById("networkDnssecBehaviour");
+
+    // if mailnews is installed then we will have networkDnssecDisableDnssecInMailNews checkbox
+    var networkDnssecDisableDnssecInMailNews = document.getElementById("networkDnssecDisableDnssecInMailNews");
+    if (networkDnssecDisableDnssecInMailNews)
+      networkDnssecDisableDnssecInMailNews.disabled = (dnssecBehavior.value == 2); 
+  }
+
+  ]]>
+  </script>
+
+  <broadcaster id="haveDnssecBlocking"/>
+  <broadcaster id="haveDnssecBlockingOrMailnews"/>
+
+  <groupbox id="dnssecArea">
+    <caption label="&dnsSecurity.label;"/>
+
+    <description>&dnssecDetails;</description>
+
+    <radiogroup id="networkDnssecBehaviour"
+                prefstring="network.dnssec.dnssecBehavior">
+      <radio value="2" label="&neverDNSSecure.label;"
+             accesskey="&neverDNSSecure.accesskey;"
+             oncommand="setDisables();"/>
+      <radio value="1" label="&possibleDNSSecure.label;"
+             accesskey="&possibleDNSSecure.accesskey;"
+             oncommand="setDisables();"/>
+      <radio value="0" label="&allDNSSecure.label;"
+             accesskey="&allDNSSecure.accesskey;"
+             oncommand="setDisables();"/>
+    </radiogroup>
+  </groupbox>
+</page>
