--- old-mozilla/nsprpub/config/autoconf.mk.in	2006-02-22 15:03:11.000000000 -0800
+++ mozilla/nsprpub/config/autoconf.mk.in	2006-08-23 19:01:13.000000000 -0700
@@ -34,6 +34,7 @@
 
 LIBNSPR		= @LIBNSPR@
 LIBPLC		= @LIBPLC@
+VAL_LIBS    = @VAL_LIBS@
 
 CROSS_COMPILE	= @CROSS_COMPILE@
 BUILD_OPT	= @MOZ_OPTIMIZE@
--- old-mozilla/nsprpub/config/nspr-config.in	2005-05-10 18:03:44.000000000 -0700
+++ mozilla/nsprpub/config/nspr-config.in	2006-08-23 19:01:13.000000000 -0700
@@ -138,6 +138,6 @@
 	  libdirs="$libdirs $i"
         fi
       done
-      echo $libdirs @OS_LIBS@
+      echo $libdirs @VAL_LIBS@ @OS_LIBS@
 fi      
 
--- old-mozilla/nsprpub/configure.in	2006-02-22 15:03:11.000000000 -0800
+++ mozilla/nsprpub/configure.in	2006-08-23 19:01:13.000000000 -0700
@@ -2138,6 +2138,52 @@
 dnl AC_CHECK_LIB(thread, main)
 dnl AC_CHECK_LIB(vms_jackets, main)
 
+dnl Check for libval, the DNSSEC validation library
+dnl ========================================================
+AC_ARG_WITH(system-val,
+[  --with-system-val[=PFX]
+                          Use system libval [installed at prefix PFX]],
+    VAL_DIR=$withval)
+
+AC_ARG_WITH(system-sres,
+[  --with-system-sres[=PFX]
+                          Use system libsres [installed at prefix PFX]],
+    SRES_DIR=$withval)
+
+AC_ARG_WITH(system-openssl,
+[  --with-system-openssl[=PFX]
+                          Use system openssl libraries [installed at prefix PFX]],
+    OPENSSL_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+
+if test -n "${OPENSSL_DIR}"; then
+    CFLAGS="-I${OPENSSL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${OPENSSL_DIR}/lib $LDFLAGS"
+fi
+if test -n "${VAL_DIR}"; then
+    CFLAGS="-I${VAL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${VAL_DIR}/lib $LDFLAGS"
+fi
+if test -n "${SRES_DIR}"; then
+    CFLAGS="-I${SRES_DIR}/include $CFLAGS"
+    LDFLAGS="-L${SRES_DIR}/lib $LDFLAGS"
+fi
+AC_CHECK_LIB(crypto, EVP_md5, OPENSSL_LIBS="-lcrypto", OPENSSL_LIBS="")
+AC_CHECK_LIB(sres, __res_init, SRES_LIBS=" -lpthread -lsres", SRES_LIBS="",
+             $OPENSSL_LIBS -lpthread)
+AC_CHECK_LIB(val-threads, val_gethostbyname,
+             [SYSTEM_VAL=1
+              VAL_LIBS="-lval-threads $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+              NSPR_LIBS="$NSPR_LIBS $VAL_LIBS $SRES_LIBS $OPENSSL_LIBS"
+              AC_DEFINE(MOZ_DNSSEC)], SYSTEM_VAL=,
+             $SRES_LIBS $OPENSSL_LIBS)
+
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
 
 dnl We don't want anything to link with libdl even if it's present on OS X, 
 dnl since it's not used and not part of the default installation.
@@ -2677,6 +2723,7 @@
 AC_SUBST(OBJECT_MODE)
 AC_SUBST(GC_LEAK_DETECTOR)
 AC_SUBST(ENABLE_STRIP)
+AC_SUBST(VAL_LIBS)
 
 AC_SUBST(USE_PTHREADS)
 AC_SUBST(USE_BTHREADS)
--- old-mozilla/nsprpub/pr/include/prnetdb.h.orig	2008-05-08 14:04:48.000000000 -0700
+++ mozilla/nsprpub/pr/include/prnetdb.h	2008-01-09 09:25:07.000000000 -0800
@@ -85,6 +85,13 @@
 #define PR_NETDB_BUF_SIZE 1024
 #endif
 
+enum 
+{
+  PR_DNSSEC_NO_FLAGS = 0,
+  PR_DNSSEC_IS_TRUSTED = 1 << 0,
+  PR_DNSSEC_IS_VALIDATED = 1 << 1
+};
+
 /***********************************************************************
 ** FUNCTION:	
 ** DESCRIPTION:	PR_GetHostByName()
@@ -111,6 +118,33 @@
 
 /***********************************************************************
 ** FUNCTION:	
+** DESCRIPTION:	PR_GetHostByNameExtended()
+** Lookup a host by name and provide extended error information
+**
+** INPUTS:
+**  char *hostname      Character string defining the host name of interest
+**  char *buf           A scratch buffer for the runtime to return result.
+**                      This buffer is allocated by the caller.
+**  PRIntn bufsize      Number of bytes in 'buf'. A recommnded value to
+**                      use is PR_NETDB_BUF_SIZE.
+** OUTPUTS:
+**  PRHostEnt *hostentry
+**                      This structure is filled in by the runtime if
+**                      the function returns PR_SUCCESS. This structure
+**                      is allocated by the caller.
+** RETURN:
+**  PRStatus            PR_SUCCESS if the lookup succeeds. If it fails
+**                      the result will be PR_FAILURE and the reason
+**                      for the failure can be retrieved by PR_GetError().
+**                      This function is identical to the PR_GetHostByName
+**                      function but returns additional error codes via
+**                      PR_GetError() and may return even more in the future.
+***********************************************************************/
+NSPR_API(PRStatus) PR_GetHostByNameExtended(
+    const char *hostname, char *buf, PRIntn bufsize, PRHostEnt *hostentry);
+
+/***********************************************************************
+** FUNCTION:	
 ** DESCRIPTION:	PR_GetIPNodeByName()
 ** Lookup a host by name. Equivalent to getipnodebyname(AI_DEFAULT)
 ** of RFC 2553.
@@ -153,6 +187,44 @@
 
 /***********************************************************************
 ** FUNCTION:	
+** DESCRIPTION:	PR_GetIPNodeByNameExtended()
+** Lookup a host by name. Equivalent to getipnodebyname(AI_DEFAULT)
+** of RFC 2553.
+**
+** INPUTS:
+**  char *hostname      Character string defining the host name of interest
+**  PRUint16 af         Address family (either PR_AF_INET or PR_AF_INET6)
+**  PRIntn flags        Specifies the types of addresses that are searched
+**                      for and the types of addresses that are returned.
+**                      The only supported flag is PR_AI_DEFAULT.
+**  char *buf           A scratch buffer for the runtime to return result.
+**                      This buffer is allocated by the caller.
+**  PRIntn bufsize      Number of bytes in 'buf'. A recommnded value to
+**                      use is PR_NETDB_BUF_SIZE.
+** OUTPUTS:
+**  PRHostEnt *hostentry
+**                      This structure is filled in by the runtime if
+**                      the function returns PR_SUCCESS. This structure
+**                      is allocated by the caller.
+** RETURN:
+**  PRStatus            PR_SUCCESS if the lookup succeeds. If it fails
+**                      the result will be PR_FAILURE and the reason
+**                      for the failure can be retrieved by PR_GetError().
+**                      This function is identical to the PR_GetIPNodeByName
+**                      function but returns additional error codes via
+**                      PR_GetError() and may return even more in the future.
+***********************************************************************/
+NSPR_API(PRStatus) PR_GetIPNodeByNameExtended(
+    const char *hostname,
+    PRUint16 af,
+    PRIntn flags,
+    char *buf,
+    PRIntn bufsize,
+    PRHostEnt *hostentry);
+
+
+/***********************************************************************
+** FUNCTION:	
 ** DESCRIPTION:	PR_GetHostByAddr()
 ** Lookup a host entry by its network address.
 **
@@ -417,6 +489,33 @@
 
 /***********************************************************************
 ** FUNCTION:
+** DESCRIPTION: PR_GetAddrInfoByNameExtended()
+**  Lookup a host by name. Equivalent to getaddrinfo(host, NULL, ...) of
+**  RFC 3493.
+**
+** INPUTS:
+**  char *hostname      Character string defining the host name of interest
+**  PRUint16 af         May be PR_AF_UNSPEC or PR_AF_INET.
+**  PRIntn flags        May be either PR_AI_ADDRCONFIG or
+**                      PR_AI_ADDRCONFIG | PR_AI_NOCANONNAME. Include
+**                      PR_AI_NOCANONNAME to suppress the determination of
+**                      the canonical name corresponding to hostname.
+** RETURN:
+**  PRAddrInfo*         Handle to a data structure containing the results
+**                      of the host lookup. Use PR_EnumerateAddrInfo to
+**                      inspect the PRNetAddr values stored in this object.
+**                      When no longer needed, this handle must be destroyed
+**                      with a call to PR_FreeAddrInfo.  If a lookup error
+**                      occurs, then NULL will be returned.
+**                      This function is identical to the PR_GetAddrInfoByNameFB
+**                      function but returns additional error codes via
+**                      PR_GetError() and may return even more in the future.
+***********************************************************************/
+NSPR_API(PRAddrInfo*) PR_GetAddrInfoByNameExtended(
+    const char *hostname, PRUint16 af, PRIntn flags, PRUint16 *security_flags);
+
+/***********************************************************************
+** FUNCTION:
 ** DESCRIPTION: PR_FreeAddrInfo()
 **  Destroy the PRAddrInfo handle allocated by PR_GetAddrInfoByName().
 **
@@ -494,6 +593,15 @@
 NSPR_API(PRUint32) PR_htonl(PRUint32);
 NSPR_API(PRUint64) PR_htonll(PRUint64);
 
+/***********************************************************************
+** FUNCTIONS: PR_set_dnssec_validate_policy
+**
+** DESCRIPTION: set the DNS resolution policy
+**  
+**   XXX
+***********************************************************************/
+NSPR_API(void) PR_set_dnssec_validate_policy(PRInt32);
+
 PR_END_EXTERN_C
 
 #endif /* prnetdb_h___ */
--- old-mozilla/nsprpub/pr/src/misc/prerr.c.orig	2008-05-20 13:22:26.000000000 -0700
+++ mozilla/nsprpub/pr/src/misc/prerr.c	2008-05-20 15:17:01.000000000 -0700
@@ -118,11 +118,13 @@
 	{"PR_HOST_UNREACHABLE_ERROR",    "Host is unreachable"},
 	{"PR_LIBRARY_NOT_LOADED_ERROR",    "The library is not loaded"},
 	{"PR_CALL_ONCE_ERROR",    "The one-time function was previously called and failed. Its error code is no longer available"},
+	{"PR_DNSSEC_VALIDATION_ERROR",    "The DNS record failed DNSSEC validation"},
+	{"PR_DNSSEC_DNE_ERROR",    "The DNS record does not exist"},
 	{"PR_MAX_ERROR",    "Placeholder for the end of the list"},
 	{0, 0}
 };
 
-static const struct PRErrorTable et = { text, "prerr", -6000L, 77 };
+static const struct PRErrorTable et = { text, "prerr", -6000L, 79 };
 
 void nspr_InitializePRErrorTable(void) {
     PR_ErrorInstallTable(&et);
--- old-mozilla/nsprpub/pr/include/prerr.h.orig	2008-05-20 13:22:26.000000000 -0700
+++ mozilla/nsprpub/pr/include/prerr.h	2008-05-20 15:17:31.000000000 -0700
@@ -272,8 +272,14 @@
 /* The one-time function was previously called and failed. Its error code is no longer available */
 #define PR_CALL_ONCE_ERROR                       (-5925L)

+/* The DNS record failed DNSSEC validation */
+#define PR_DNSSEC_VALIDATION_ERROR               (-5924L)
+
+/* The DNS record failed DNSSEC validation */
+#define PR_DNSSEC_DNE_ERROR                      (-5923L)
+
 /* Placeholder for the end of the list */
-#define PR_MAX_ERROR                             (-5924L)
+#define PR_MAX_ERROR                             (-5923L)

 extern void nspr_InitializePRErrorTable(void);
 #define ERROR_TABLE_BASE_nspr (-6000L)
--- old-mozilla/nsprpub/pr/src/misc/prerr.et.orig	2008-05-20 13:22:26.000000000 -0700
+++ mozilla/nsprpub/pr/src/misc/prerr.et	2008-05-20 15:17:55.000000000 -0700
@@ -134,6 +134,8 @@
 ec PR_HOST_UNREACHABLE_ERROR,   "Host is unreachable"
 ec PR_LIBRARY_NOT_LOADED_ERROR, "The library is not loaded"
 ec PR_CALL_ONCE_ERROR, "The one-time function was previously called and failed. Its error code is no longer available"
+ec PR_DNSSEC_VALIDATION_ERROR,  "The DNS record failed DNSSEC validation"
+ec PR_DNSSEC_DNE_ERROR,         "The DNS record does not exist"
 
 ec PR_MAX_ERROR,                "Placeholder for the end of the list"
 
--- old-mozilla/nsprpub/pr/src/misc/prerr.properties.orig	2008-05-20 13:22:26.000000000 -0700
+++ mozilla/nsprpub/pr/src/misc/prerr.properties	2008-05-20 15:18:17.000000000 -0700
@@ -114,4 +114,6 @@
 PR_HOST_UNREACHABLE_ERROR=Host is unreachable
 PR_LIBRARY_NOT_LOADED_ERROR=The library is not loaded
 PR_CALL_ONCE_ERROR=The one-time function was previously called and failed. Its error code is no longer available
+PR_DNSSEC_VALIDATION_ERROR=The DNS record failed DNSSEC validation
+PR_DNSSEC_DNE_ERROR=The DNS record does not exist
 PR_MAX_ERROR=Placeholder for the end of the list
--- old-mozilla/nsprpub/pr/src/misc/prnetdb.c.orig	2008-05-02 01:18:14.000000000 -0700
+++ mozilla/nsprpub/pr/src/misc/prnetdb.c	2009-02-20 09:41:06.000000000 -0800
@@ -39,6 +39,10 @@
 
 #include <string.h>
 
+#ifdef MOZ_DNSSEC
+#include <validator/validator.h>
+#endif
+
 /*
  * On Unix, the error code for gethostbyname() and gethostbyaddr()
  * is returned in the global variable h_errno, instead of the usual
@@ -66,8 +70,8 @@
  * - _PR_HAVE_GETHOST_R_POINTER: the gethostbyXXX_r functions return
  *   a struct hostent* pointer.  For example, Solaris and IRIX.
  */
-#if defined(_PR_NO_PREEMPT) || defined(_PR_HAVE_GETHOST_R) \
-    || defined(_PR_HAVE_THREADSAFE_GETHOST)
+#if (defined(_PR_NO_PREEMPT) || defined(_PR_HAVE_GETHOST_R) \
+     || defined(_PR_HAVE_THREADSAFE_GETHOST))
 #define _PR_NO_DNS_LOCK
 #endif
 
@@ -636,6 +640,218 @@
 }
 #endif /* !defined(_PR_HAVE_GETPROTO_R) */
 
+#define DNSSEC_FAILURE 0
+#define DNSSEC_SUCCESS 1
+/* START DNSSEC INTERNAL */
+#define DODNSSECDEBUG
+#ifdef DODNSSECDEBUG
+#define DNSSECDEBUG(x) fprintf x;
+#define DNSSECFUNBEGIN()                        \
+  {                                             \
+    fprintf(stderr, "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n"); \
+    fprintf(stderr, "BEGIN  %s:%d: \n  ", __FUNCTION__, __LINE__);       \
+  }
+#define DNSSECFUNDEBUG(x) { DNSSECFUNBEGIN(); DNSSECDEBUG(x); }
+#define DNSSECFUNEXIT()   {                                             \
+    fprintf(stderr, "EXIT   %s:%d:  \n", __FUNCTION__, __LINE__);          \
+    fprintf(stderr, "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"); \
+  }
+#define DNSSECFUNRETURN(retval)    \
+  {                                             \
+    DNSSECDEBUG((stderr, "  returning: %x", (unsigned int) retval));    \
+    if ((int) retval == DNSSEC_SUCCESS) {                                \
+      DNSSECDEBUG((stderr, "  (success)"));                             \
+    } else if ((int) retval == DNSSEC_SUCCESS || (int) retval == -1) {   \
+      DNSSECDEBUG((stderr, "  (FAIL)"));                                \
+    }                                                                   \
+    DNSSECDEBUG((stderr, "\n"));						    \
+    DNSSECFUNEXIT();                                                    \
+    return retval;                                                      \
+  }
+#else
+#define DNSSECDEBUG(x) 
+#define DNSSECFUNDEBUG(x) 
+#define DNSSECFUNEXIT()
+#define DNSSECFUNRETURN(retval) return retval;
+#endif
+/* END DNSSEC INTERNAL */
+
+
+/* 0 = enforce system policy, 1 = ignore, 2 = always secure */
+int global_policy = 0;
+#define DNSSEC_POLICY_ENFORCE_SYS_POLICY 0
+#define DNSSEC_POLICY_IGNORE              1
+#define DNSSEC_POLICY_ALWAYS_SECURE       2
+void
+PR_set_dnssec_validate_policy(int policy)
+{
+  DNSSECFUNDEBUG((stderr, "DNSSEC Setting policy: %d\n", policy));
+  global_policy = policy;
+}
+
+
+#ifdef MOZ_DNSSEC
+/* XXX: include drop or configurize */
+#include <stdio.h>
+#include <netdb.h>
+
+/* prototypes */
+int dnssec_check_policy(int dnssec_status, int policytype);
+/**
+ * dnssec_validate(HOSTNAME)
+ *
+ * attempts to validate HOSTNAME using dnssec.  It will return one of:
+ *
+ * If global_policy = DNSSEC_POLICY_IGNORE
+ *    - DNSSEC_SUCCESS: 
+ *
+ * If global_policy = DNSSEC_POLICY_ENFORCE_SYS_POLICY
+ *    - DNSSEC_SUCCESS if verified
+ *    - DNSSEC_FAILURE if not
+ *
+ * If global_policy = DNSSEC_POLICY_ENFORCE_SYS_POLICY
+ *    - DNSSEC_SUCCESS if verified
+ *    - DNSSEC_FAILURE if not
+ */
+/* XXX: pass in address type? */
+int dnssec_validate (const char *domain_name) {
+    int dnssec_status;
+    struct hostent hentry, *hentryp;
+    char buf[1024];
+    size_t buflen = sizeof(buf);
+    int h_errno;
+    val_status_t val_status;
+
+    DNSSECFUNDEBUG((stderr, "DNSSECvalidating: %s\n", domain_name));
+    
+    /* don't even bother validating when the policy doesn't call for it */
+    if (global_policy == DNSSEC_POLICY_IGNORE) {
+        DNSSECDEBUG((stderr, "  OK: policy is always allow\n"));
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    }
+
+    /* explicitly catch localhost */
+    if (strcmp(domain_name, "localhost") == 0) {
+        DNSSECDEBUG((stderr, "  OK: 'localhost' is always allowed\n"));
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    }
+    
+    /* attempt a lookup */
+    dnssec_status = val_gethostbyname_r(NULL, domain_name, &hentry,
+                                        buf, buflen,&hentryp, &h_errno,
+                                        &val_status);
+
+    /* check the results, or assume indeterminate if we don't know why
+       the above failed */
+    DNSSECDEBUG((stderr, "  val_gethostbyname returned %d,val_st=%d,errno=%d,ptr=%x\n", dnssec_status, val_status, h_errno, (unsigned int) hentryp));
+    if (!hentryp && val_status == VAL_DONT_KNOW)  // Should never happen?
+        val_status = VAL_BOGUS;
+
+    DNSSECDEBUG((stderr, "  val_gethostbyname's dnssec status was %d\n", dnssec_status));
+
+    if (dnssec_check_policy(val_status, global_policy) == DNSSEC_SUCCESS)
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+
+    DNSSECFUNRETURN(DNSSEC_FAILURE);
+}
+
+int
+dnssec_check_policy(int val_status, int policytype) 
+{
+  DNSSECFUNDEBUG((stderr, "input: policy=%d, status=%d = %s\n", policytype, val_status, p_val_error(val_status)));
+
+  /*
+   * POLICY: if val_status == VAL_AC_UNSET then return SUCCESS (unknown host)
+   *   (this is already an error)
+   */
+  if (val_status == VAL_AC_UNSET)
+      DNSSECFUNRETURN(DNSSEC_SUCCESS);
+
+  /*
+   * POLICY: ignore errors
+   */
+  if (policytype == DNSSEC_POLICY_IGNORE)
+      DNSSECFUNRETURN(DNSSEC_SUCCESS);
+
+  /*
+   * POLICY: require only when possible
+   *   -- IE, trust the policy specified in dnssec-tools's dnsval.conf
+   */
+  if (policytype == DNSSEC_POLICY_ENFORCE_SYS_POLICY) {
+    if (val_istrusted(val_status))
+        DNSSECFUNRETURN(DNSSEC_SUCCESS);
+    DNSSECFUNRETURN(DNSSEC_FAILURE);
+  }
+  
+  /*
+   * POLICY: always secure.
+   *    -- IE, require all lookups to return only secure results
+   */
+  
+  if (val_isvalidated(val_status))
+      DNSSECFUNRETURN(DNSSEC_SUCCESS);
+  DNSSECFUNRETURN(DNSSEC_FAILURE);
+}
+
+struct hostent *
+dnssec_gethostbyname(const char *name,
+                     struct hostent *ret, char *buf, size_t buflen,
+                     struct hostent **result, int *h_errnop)
+{
+  val_status_t val_status;
+  int ret_stat;
+  
+  DNSSECFUNDEBUG((stderr, "input: name=%s\n", name));
+  ret_stat = val_gethostbyname_r(NULL, name, ret, buf, buflen, result, h_errnop,
+                                 &val_status);
+  if (!ret_stat) {
+    DNSSECDEBUG((stderr, "  ERROR: ret_stat=%d returned\n", ret_stat));
+    DNSSECFUNRETURN(NULL);
+  }
+  
+  if (dnssec_check_policy(val_status, global_policy) == DNSSEC_SUCCESS) {
+    DNSSECDEBUG((stderr, "  policy = success\n"));
+    DNSSECFUNRETURN(ret);
+  }
+  /* XXX: if ret exists (but policy says no), free it? */
+  DNSSECDEBUG((stderr, "  failed to lookup host\n"));
+  DNSSECFUNRETURN(NULL);
+}
+
+struct hostent *
+dnssec_gethostbyname2(const char *name, int af,
+                     struct hostent *ret, char *buf, size_t buflen,
+                     struct hostent **result, int *h_errnop)
+{
+  val_status_t val_status;
+  int ret_stat;
+  
+  DNSSECFUNDEBUG((stderr, "input: name=%s\n", name));
+  ret_stat = val_gethostbyname2_r(NULL, name, af, 
+                                  ret, buf, buflen, result, h_errnop,
+                                  &val_status);
+  if (!ret_stat) {
+    DNSSECDEBUG((stderr, "  ERROR: ret_stat=%d returned\n", ret_stat));
+    DNSSECFUNRETURN(NULL);
+  }
+  
+  if (dnssec_check_policy(val_status, global_policy) == DNSSEC_SUCCESS) {
+    DNSSECDEBUG((stderr, "  policy = success\n"));
+    DNSSECFUNRETURN(ret);
+  }
+  /* XXX: if ret exists (but policy says no), free it? */
+  DNSSECDEBUG((stderr, "  failed to lookup host\n"));
+  DNSSECFUNRETURN(NULL);
+}
+
+#else  /* !MOZ_DNSSEC */
+
+int dnssec_validate (const char *domain_name) {
+  return DNSSEC_SUCCESS;
+}
+
+#endif /* !MOZ_DNSSEC */
+
 /*
  * #################################################################
  * NOTE: tmphe, tmpbuf, bufsize, h, and h_err are local variables
@@ -671,7 +887,47 @@
 
 #endif  /* definition of GETHOSTBYXXX */
 
-PR_IMPLEMENT(PRStatus) PR_GetHostByName(
+/* override functions if MOZ_DNSSEC is enabled */
+#ifdef MOZ_DNSSEC
+
+/* We do this in a special section to allow the GETHOSTBYADDR to be
+   pulled above as normal.  Unfortunately, even though the DNSSEC APIs
+   are thread safe, if GETHOSTBYADDR is not then we'll still perform
+   safe locking because this code doesn't differentiate between calls
+   at all.
+*/
+#undef GETHOSTBYNAME
+#undef GETHOSTBYNAME2
+
+#define GETHOSTBYNAME(name) \
+    (dnssec_gethostbyname(name, &tmphe, tmpbuf, bufsize, &h, &h_err), h)
+#define GETHOSTBYNAME2(name, af)                                           \
+  (dnssec_gethostbyname2(name, af, &tmphe, tmpbuf, bufsize, &h, &h_err), h)
+
+#endif /* MOZ_DNSSEC */
+
+/* note: not DNSSEC specific, but only currently needed for DNSSEC */
+/* converts a return value from one which may include other (newer)
+   DNS error codes like those provided by DNSSEC validation to
+   something which older code can still understand */
+static void simplify_return_value(void)
+{
+  PRErrorCode errcode = PR_GetError();
+  switch(errcode) {
+    /* Pass the original codes */
+  case PR_DNSSEC_VALIDATION_ERROR:
+    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, 0);
+    break;
+  case PR_DNSSEC_DNE_ERROR:
+    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, 0);
+    break;
+  default:
+    /* everything else can pass on as before */
+    break;
+  }
+}
+
+PR_IMPLEMENT(PRStatus) PR_GetHostByNameExtended(
     const char *name, char *buf, PRIntn bufsize, PRHostEnt *hp)
 {
 	struct hostent *h;
@@ -684,6 +940,7 @@
 #endif
 
     if (!_pr_initialized) _PR_ImplicitInitialization();
+    DNSSECFUNDEBUG((stderr, "input=%s\n", name));
 
 #if defined(_PR_HAVE_GETHOST_R)
     tmpbuf = localbuf;
@@ -693,7 +950,7 @@
         if (NULL == tmpbuf)
         {
             PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
-            return rv;
+            DNSSECFUNRETURN(rv);
         }
     }
 #endif
@@ -702,12 +959,17 @@
 
 	h = GETHOSTBYNAME(name);
     
-	if (NULL == h)
-	{
+
+    /* XXX */
+    DNSSECDEBUG((stderr, "DNSSECgethostbyname results: host=%s h_errno=%d\n", name, h_errno));
+    if (NULL == h)
+  	{
+        DNSSECDEBUG((stderr, "********** Status = LOOKUP_ERROR\n"));
 	    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, _MD_GETHOST_ERRNO());
 	}
 	else
 	{
+        DNSSECDEBUG((stderr, "********** Status = SUCCESS\n"));
 		_PRIPAddrConversion conversion = _PRIPAddrNoConversion;
 		rv = CopyHostent(h, &buf, &bufsize, conversion, hp);
 		if (PR_SUCCESS != rv)
@@ -718,7 +980,17 @@
     if (tmpbuf != localbuf)
         PR_Free(tmpbuf);
 #endif
-	return rv;
+    DNSSECFUNRETURN(rv);
+}
+
+PR_IMPLEMENT(PRStatus) PR_GetHostByName(
+    const char *name, char *buf, PRIntn bufsize, PRHostEnt *hp)
+{
+    PRStatus ret;
+    DNSSECFUNDEBUG((stderr, "input=%s\n", name));
+    ret = PR_GetHostByNameExtended(name, buf, bufsize, hp);
+    simplify_return_value();
+    return ret;
 }
 
 #if !defined(_PR_INET6) && \
@@ -808,7 +1080,7 @@
 }
 #endif
 
-PR_IMPLEMENT(PRStatus) PR_GetIPNodeByName(
+PR_IMPLEMENT(PRStatus) PR_GetIPNodeByNameExtended(
     const char *name, PRUint16 af, PRIntn flags,
     char *buf, PRIntn bufsize, PRHostEnt *hp)
 {
@@ -829,11 +1101,12 @@
     PRBool did_af_inet = PR_FALSE;
 #endif
 
+    DNSSECFUNDEBUG((stderr, "input=%s\n", name));
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
     if (af != PR_AF_INET && af != PR_AF_INET6) {
         PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-        return PR_FAILURE;
+        DNSSECFUNRETURN(PR_FAILURE);
     }
 
 #if defined(_PR_INET6) && defined(_PR_HAVE_GETHOSTBYNAME2)
@@ -876,11 +1149,13 @@
         if (NULL == tmpbuf)
         {
             PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
-            return rv;
+            DNSSECFUNRETURN(rv);
         }
     }
 #endif
 
+    /* XXX: should be able to map gethostbyname2 -> getaddrinfo with hints */
+
     /* Do not need to lock the DNS lock if getipnodebyname() is called */
 #ifdef _PR_INET6
 #ifdef _PR_HAVE_GETHOSTBYNAME2
@@ -934,6 +1209,7 @@
     
 	if (NULL == h)
 	{
+      DNSSECDEBUG((stderr, "  lookup failed\n"));
 #if defined(_PR_INET6) && defined(_PR_HAVE_GETIPNODEBYNAME)
 	    PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, error_num);
 #elif defined(_PR_INET6_PROBE) && defined(_PR_HAVE_GETIPNODEBYNAME)
@@ -992,7 +1268,18 @@
         PR_Free(tmpbuf);
 #endif
 
-	return rv;
+    DNSSECFUNRETURN(rv);
+}
+
+PR_IMPLEMENT(PRStatus) PR_GetIPNodeByName(
+    const char *name, PRUint16 af, PRIntn flags,
+    char *buf, PRIntn bufsize, PRHostEnt *hp)
+{
+  PRStatus ret;
+  DNSSECFUNDEBUG((stderr, "input=%s\n", name));
+  ret = PR_GetIPNodeByName(name, af, flags, buf, bufsize, hp);
+  simplify_return_value();
+  return ret;
 }
 
 PR_IMPLEMENT(PRStatus) PR_GetHostByAddr(
@@ -1014,6 +1301,7 @@
 	int error_num;
 #endif
 
+    DNSSECFUNDEBUG((stderr, "input=%x", (unsigned int) hostaddr));
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
 	if (hostaddr->raw.family == PR_AF_INET6)
@@ -1152,7 +1440,7 @@
         PR_Free(tmpbuf);
 #endif
 
-	return rv;
+	DNSSECFUNRETURN(rv);
 }
 
 /******************************************************************************/
@@ -1830,11 +2118,20 @@
  * provide getaddrinfo in all versions that NSPR cares to support.
  */
 
-#if defined(_PR_HAVE_GETADDRINFO)
+#ifdef MOZ_DNSSEC
+#define GETADDRINFO(a,b,c,d) val_getaddrinfo(NULL, a, b, c, d, &val_status)
+#define FREEADDRINFO freeaddrinfo
+typedef struct addrinfo PRADDRINFO;
+typedef struct addrinfo DNSSECPRADDRINFO;
+
+#define GETNAMEINFO getnameinfo
+
+#elif defined(_PR_HAVE_GETADDRINFO)
 
 #if defined(_PR_INET6)
 
 typedef struct addrinfo PRADDRINFO;
+typedef struct addrinfo DNSSECPRADDRINFO;
 #define GETADDRINFO getaddrinfo
 #define FREEADDRINFO freeaddrinfo
 #define GETNAMEINFO getnameinfo
@@ -1935,8 +2232,6 @@
 #endif
 }
 
-#define GETADDRINFO (*_pr_getaddrinfo)
-#define FREEADDRINFO (*_pr_freeaddrinfo)
 #define GETNAMEINFO (*_pr_getnameinfo)
 
 #endif /* _PR_INET6 */
@@ -1962,46 +2257,59 @@
 {
     PRStatus rv;
     PRAddrInfoFB *ai;
+    DNSSECFUNDEBUG((stderr, "input=%s", hostname));
     /* fallback on PR_GetHostByName */
     ai = PR_NEW(PRAddrInfoFB);
     if (!ai) {
         PR_SetError(PR_OUT_OF_MEMORY_ERROR, 0);
         return NULL;
     }
-    rv = PR_GetHostByName(hostname, ai->buf, sizeof ai->buf, &ai->hostent);
+    DNSSECDEBUG((stderr, "DNSSECgethostbyname: %d %s\n", __LINE__, hostname));
+    rv = PR_GetHostByNameExtended(hostname, ai->buf, sizeof ai->buf, &ai->hostent);
     if (rv == PR_FAILURE) {
         PR_Free(ai);
-        return NULL;
+        DNSSECFUNRETURN(NULL);
     }
     ai->has_cname = !(flags & PR_AI_NOCANONNAME);
 
-    return (PRAddrInfo *) ai;
+    DNSSECFUNRETURN((PRAddrInfo *) ai);
 }
 #endif /* !_PR_HAVE_GETADDRINFO || _PR_INET6_PROBE */
 
-PR_IMPLEMENT(PRAddrInfo *) PR_GetAddrInfoByName(const char  *hostname,
-                                                PRUint16     af,
-                                                PRIntn       flags)
-{
+PR_IMPLEMENT(PRAddrInfo *) PR_GetAddrInfoByNameExtended(const char  *hostname,
+                                                        PRUint16     af,
+                                                        PRIntn       flags,
+                                                        PRUint16     *security_flags)
+{
+#ifdef MOZ_DNSSEC
+  val_status_t val_status;
+#endif
+    DNSSECFUNDEBUG((stderr, "input=%s\n", hostname));
+
+    /* wipe the security flags */
+    if (security_flags)
+        *security_flags = PR_DNSSEC_NO_FLAGS;
+    
     /* restrict input to supported values */
     if ((af != PR_AF_INET && af != PR_AF_UNSPEC) ||
         (flags & ~ PR_AI_NOCANONNAME) != PR_AI_ADDRCONFIG) {
         PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-        return NULL;
+        DNSSECFUNRETURN(NULL);
     }
 
     if (!_pr_initialized) _PR_ImplicitInitialization();
 
 #if !defined(_PR_HAVE_GETADDRINFO)
-    return pr_GetAddrInfoByNameFB(hostname, af, flags);
+    DNSSECFUNRETURN(pr_GetAddrInfoByNameFB(hostname, af, flags));
 #else
 #if defined(_PR_INET6_PROBE)
     if (!_pr_ipv6_is_present()) {
-        return pr_GetAddrInfoByNameFB(hostname, af, flags);
+      DNSSECFUNRETURN(pr_GetAddrInfoByNameFB(hostname, af, flags));
     }
 #endif
     {
-        PRADDRINFO *res, hints;
+        PRADDRINFO hints;
+        DNSSECPRADDRINFO *res;
         PRStatus rv;
 
         /*
@@ -2024,17 +2332,72 @@
         hints.ai_socktype = SOCK_STREAM;
 
         rv = GETADDRINFO(hostname, NULL, &hints, &res);
-        if (rv == 0)
-            return (PRAddrInfo *) res;
+        if (rv == EAI_AGAIN) {
+          /* temporary failure...  odd...  try again? */
+          PR_Sleep(1000);
+          DNSSECDEBUG((stderr, "DNSSECgetaddrinfo reted/trying again: %d %d\n", rv, (unsigned int) res));
+          rv = GETADDRINFO(hostname, NULL, &hints, &res);
+        }
+        DNSSECDEBUG((stderr, "DNSSECgetaddrinfo returned: %d\n", (unsigned int) res));
+
+#ifdef MOZ_DNSSEC
+        if (dnssec_check_policy(val_status, global_policy) != DNSSEC_SUCCESS) {
+          /* DNSsec validation failed */
+          PR_SetErrorText(0, "Host DNSsec validation failed");
+          PR_SetError(PR_DNSSEC_VALIDATION_ERROR, 0);
+          DNSSECDEBUG((stderr, "DNSSECgetaddrinfo: returning failure line:%d %s => val_status:%d\n", __LINE__, hostname, val_status));
+          if(res)
+              FREEADDRINFO(res);
+          DNSSECFUNRETURN(NULL);
+        }
+
+        if (!res && val_isvalidated(val_status)) {
+          /* DNSSEC has proven that the record does not exist; we
+             return a different error message to show that the lookup
+             succeeded and there is officially no results */
+          PR_SetErrorText(0, "Address does not exist");
+          PR_SetError(PR_DNSSEC_DNE_ERROR, 0);
+          DNSSECDEBUG((stderr, "DNSSECgetaddrinfo: returning DNE failure:%d %s => val_status:%d\n", __LINE__, hostname, val_status));
+          DNSSECFUNRETURN(NULL);
+        }
+
+        /* set the security flags to how the results were achieved */
+        if (security_flags) {
+          if (val_isvalidated(val_status))
+              *security_flags |= PR_DNSSEC_IS_VALIDATED;
+          
+          if (val_istrusted(val_status))
+              *security_flags |= PR_DNSSEC_IS_TRUSTED;
+        }
+#endif
+
+        if (rv == 0) {
+          DNSSECFUNRETURN((PRAddrInfo *) res);
+        }
 
         PR_SetError(PR_DIRECTORY_LOOKUP_ERROR, rv);
     }
-    return NULL;
+    DNSSECFUNRETURN(NULL);
 #endif
 }
 
+PR_IMPLEMENT(PRAddrInfo *) PR_GetAddrInfoByName(const char  *hostname,
+                                                PRUint16     af,
+                                                PRIntn       flags)
+{
+  struct PRAddrInfo *result;
+  DNSSECFUNDEBUG((stderr, "input=%s\n", hostname));
+  result = PR_GetAddrInfoByNameExtended(hostname, af, flags, NULL);
+  simplify_return_value();
+  DNSSECFUNRETURN(result);
+}
+
+
 PR_IMPLEMENT(void) PR_FreeAddrInfo(PRAddrInfo *ai)
 {
+#if defined(MOZ_DNSSEC)
+         FREEADDRINFO((DNSSECPRADDRINFO *) ai);
+#elif defined(_PR_HAVE_GETADDRINFO)
 #if defined(_PR_HAVE_GETADDRINFO)
 #if defined(_PR_INET6_PROBE)
     if (!_pr_ipv6_is_present())
@@ -2045,6 +2408,7 @@
 #else
     PR_Free((PRAddrInfoFB *) ai);
 #endif
+#endif
 }
 
 PR_IMPLEMENT(void *) PR_EnumerateAddrInfo(void             *iterPtr,
@@ -2052,9 +2416,9 @@
                                           PRUint16          port,
                                           PRNetAddr        *result)
 {
-#if defined(_PR_HAVE_GETADDRINFO)
+#if defined(_PR_HAVE_GETADDRINFO) || defined(MOZ_DNSSEC)
     PRADDRINFO *ai;
-#if defined(_PR_INET6_PROBE)
+#if defined(_PR_INET6_PROBE) && !defined(MOZ_DNSSEC)
     if (!_pr_ipv6_is_present()) {
         /* using PRAddrInfoFB */
         PRIntn iter = (PRIntn)(PRPtrdiff) iterPtr;
@@ -2066,9 +2430,9 @@
 #endif
 
     if (iterPtr)
-        ai = ((PRADDRINFO *) iterPtr)->ai_next;
+        ai = ((DNSSECPRADDRINFO *) iterPtr)->ai_next;
     else
-        ai = (PRADDRINFO *) base;
+        ai = (DNSSECPRADDRINFO *) base;
 
     while (ai && ai->ai_addrlen > sizeof(PRNetAddr))
         ai = ai->ai_next;
@@ -2124,6 +2488,9 @@
     int rv;  /* 0 for success, or the error code EAI_xxx */
     PRNetAddr laddr;
     PRStatus status = PR_SUCCESS;
+#ifdef MOZ_DNSSEC
+    val_status_t val_status;
+#endif
 
     if (NULL == addr)
     {
@@ -2173,6 +2540,7 @@
     PRStatus status = PR_SUCCESS;
     PRIntn rv;
 
+    DNSSECFUNDEBUG((stderr,"input=%s\n",string));
 #if defined(_PR_HAVE_INET_NTOP)
     rv = inet_pton(AF_INET6, string, &addr->ipv6.ip);
     if (1 == rv)
@@ -2184,23 +2552,26 @@
         PR_ASSERT(0 == rv);
         /* clean up after the failed inet_pton() call */
         memset(&addr->ipv6.ip, 0, sizeof(addr->ipv6.ip));
+        /* XXX */
+        LOCK_DNS();
         rv = inet_pton(AF_INET, string, &addr->inet.ip);
         if (1 == rv)
         {
-            addr->raw.family = AF_INET;
+          addr->raw.family = AF_INET;
         }
         else
         {
-            PR_ASSERT(0 == rv);
-            PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
-            status = PR_FAILURE;
+          PR_ASSERT(0 == rv);
+          PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
+          status = PR_FAILURE;
         }
+        UNLOCK_DNS();
     }
 #else /* _PR_HAVE_INET_NTOP */
     rv = StringToV6Addr(string, &addr->ipv6.ip);
     if (1 == rv) {
         addr->raw.family = PR_AF_INET6;
-        return PR_SUCCESS;
+        DNSSECFUNRETURN(PR_SUCCESS);
     }
     PR_ASSERT(0 == rv);
     /* clean up after the failed StringToV6Addr() call */
@@ -2218,7 +2589,7 @@
     }
 #endif /* _PR_HAVE_INET_NTOP */
 
-    return status;
+    DNSSECFUNRETURN(status);
 }
 #endif /* !_PR_HAVE_GETADDRINFO || _PR_INET6_PROBE || DARWIN */
 
--- old-mozilla/nsprpub/config/nspr-config-pc.in.dnssec	2009-12-03 17:21:24.362680176 -0500
+++ mozilla/nsprpub/config/nspr-config-pc.in	2009-12-03 23:38:40.228599744 -0500
@@ -138,6 +138,6 @@
 	  libdirs="$libdirs $i"
         fi
       done
-      echo $libdirs `pkg-config --variable=os_libs nspr`
+      echo $libdirs @VAL_LIBS@ `pkg-config --variable=os_libs nspr`
 fi      
 
--- ./mozilla/nsprpub/pr/src/Makefile.in.orig	2009-08-04 14:07:35.000000000 -0400
+++ ./mozilla/nsprpub/pr/src/Makefile.in	2009-12-07 16:14:51.260358923 -0500
@@ -213,7 +213,7 @@
 EXTRA_LIBS	= -L$(dist_libdir) -lboehm
 endif
 
-EXTRA_LIBS += $(OS_LIBS)
+EXTRA_LIBS += $(OS_LIBS) $(VAL_LIBS)
 
 #
 # Define platform-dependent OBJS
