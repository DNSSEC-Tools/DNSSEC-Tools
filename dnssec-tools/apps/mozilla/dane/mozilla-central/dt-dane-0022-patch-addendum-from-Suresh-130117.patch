From e40e08ea5792366cee8aee8e1f874f3a8384919b Mon Sep 17 00:00:00 2001
From: Robert Story <rstory@localhost>
Date: Tue, 22 Jan 2013 12:37:22 -0500
Subject: [PATCH 22/22] DANE patch addendum from Suresh; 130117

---
 .../en-US/chrome/pipnss/nsserrors.properties       |  3 ++
 .../manager/ssl/src/SSLServerCertVerification.cpp  | 14 ++++++++
 security/nss/lib/ssl/SSLerrs.h                     | 10 ++++++
 security/nss/lib/ssl/ssldane.c                     | 40 +++++++---------------
 security/nss/lib/ssl/sslerr.h                      |  6 ++--
 5 files changed, 43 insertions(+), 30 deletions(-)

diff --git a/security/manager/locales/en-US/chrome/pipnss/nsserrors.properties b/security/manager/locales/en-US/chrome/pipnss/nsserrors.properties
index 188222a..2c796c0 100644
--- a/security/manager/locales/en-US/chrome/pipnss/nsserrors.properties
+++ b/security/manager/locales/en-US/chrome/pipnss/nsserrors.properties
@@ -122,6 +122,9 @@ SSL_ERROR_NEXT_PROTOCOL_DATA_INVALID=SSL received invalid NPN extension data.
 SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_SSL2=SSL feature not supported for SSL 2.0 connections.
 SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_SERVERS=SSL feature not supported for servers.
 SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_CLIENTS=SSL feature not supported for clients.
+SSL_ERROR_DANE_QUERY_FAILED=Could not fetch a DANE record or prove its absence.
+SSL_ERROR_DANE_UNAUTHORIZED=DANE certificate mismatch.
+SSL_ERROR_DANE_INIT_FAILED=SSL DANE Support could not be initialized.
 SEC_ERROR_IO=An I/O error occurred during security authorization.
 SEC_ERROR_LIBRARY_FAILURE=security library failure.
 SEC_ERROR_BAD_DATA=security library: received bad data.
diff --git a/security/manager/ssl/src/SSLServerCertVerification.cpp b/security/manager/ssl/src/SSLServerCertVerification.cpp
index 19a5b6c..6dab105 100644
--- a/security/manager/ssl/src/SSLServerCertVerification.cpp
+++ b/security/manager/ssl/src/SSLServerCertVerification.cpp
@@ -421,6 +421,20 @@ CreateCertErrorRunnable(PRErrorCode defaultErrorCodeToReport,
     return nullptr;
   }
 
+  // if we have a DANE validation failure don't do anything else
+  if (defaultErrorCodeToReport == SSL_ERROR_DANE_INIT_FAILED) {
+    PR_SetError(SSL_ERROR_DANE_INIT_FAILED, 0);
+    return nullptr;
+  }
+  if (defaultErrorCodeToReport == SSL_ERROR_DANE_QUERY_FAILED) {
+    PR_SetError(SSL_ERROR_DANE_QUERY_FAILED, 0);
+    return nullptr;
+  }
+  if (defaultErrorCodeToReport == SSL_ERROR_DANE_UNAUTHORIZED) {
+    PR_SetError(SSL_ERROR_DANE_UNAUTHORIZED, 0);
+    return nullptr;
+  }
+
   if (defaultErrorCodeToReport == 0) {
     NS_ERROR("No error code set during certificate validation failure.");
     PR_SetError(PR_INVALID_STATE_ERROR, 0);
diff --git a/security/nss/lib/ssl/SSLerrs.h b/security/nss/lib/ssl/SSLerrs.h
index 12dceaa..bd9b2d9 100644
--- a/security/nss/lib/ssl/SSLerrs.h
+++ b/security/nss/lib/ssl/SSLerrs.h
@@ -400,3 +400,13 @@ ER3(SSL_ERROR_RX_UNEXPECTED_HELLO_VERIFY_REQUEST, (SSL_ERROR_BASE + 123),
 
 ER3(SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_VERSION, (SSL_ERROR_BASE + 124),
 "SSL feature not supported for the protocol version.")
+
+ER3(SSL_ERROR_DANE_QUERY_FAILED, (SSL_ERROR_BASE + 125),
+"Could not fetch a DANE record or prove its absence.")
+
+ER3(SSL_ERROR_DANE_UNAUTHORIZED, (SSL_ERROR_BASE + 126),
+"DANE certificate mismatch.")
+
+ER3(SSL_ERROR_DANE_INIT_FAILED, (SSL_ERROR_BASE + 127),
+"SSL DANE Support could not be initialized.")
+
diff --git a/security/nss/lib/ssl/ssldane.c b/security/nss/lib/ssl/ssldane.c
index e0dd41a..a295c92 100644
--- a/security/nss/lib/ssl/ssldane.c
+++ b/security/nss/lib/ssl/ssldane.c
@@ -43,27 +43,22 @@ SECStatus SSL_DANECheck(void * pinarg, const char *hostname, int32_t port, CERTC
     struct val_danestatus *danestatus = NULL;
     struct val_danestatus *dane_cur = NULL;
     int dane_retval;
-    int have_dane = 0;
     CERTCertDBHandle *certdb;
-	SECStatus rv = SECSuccess; /* don't ask */
 
     fprintf(stderr, "DANE: checking if disabled\n");
 	if (disabled) {
-        rv = SECSuccess;
-        goto done;
+        goto success;
 	}
 
     fprintf(stderr, "DANE: checking if initialized\n");
 	if (!initSuccess) {
 		PORT_SetError(SSL_ERROR_DANE_INIT_FAILED);
-        rv = SECFailure;
-        goto done;
+        return SECFailure;
 	}
 
 	if (!hostname) {
 		PORT_SetError(SSL_ERROR_BAD_CERT_DOMAIN);
-        rv = SECFailure;
-        goto done;
+        return SECFailure;
 	}
 
     daneparams.port = port;
@@ -87,7 +82,6 @@ SECStatus SSL_DANECheck(void * pinarg, const char *hostname, int32_t port, CERTC
 
     dane_cur = danestatus;
     while(dane_cur)  {
-        have_dane = 1;
         *do_pathval = 1;
     
         fprintf(stderr, "DANE check s,t,u=%d,%d,%d\n",
@@ -116,8 +110,7 @@ SECStatus SSL_DANECheck(void * pinarg, const char *hostname, int32_t port, CERTC
                                 (const unsigned char *)node->cert->derCert.data,
                                 node->cert->derCert.len) == VAL_DANE_NOERROR) {
                         fprintf(stderr, "DANE: val_dane_match() success\n");
-                        rv = SECSuccess;
-                        goto done;
+                        goto success;
                     }
                 }
                 fprintf(stderr, "DANE: val_dane_match() failed\n");
@@ -133,8 +126,7 @@ SECStatus SSL_DANECheck(void * pinarg, const char *hostname, int32_t port, CERTC
                                   (const unsigned char *)cert->derCert.data,
                                   cert->derCert.len) == VAL_DANE_NOERROR) {
                     fprintf(stderr, "DANE: val_dane_match() success\n");
-                    rv = SECSuccess;
-                    goto done;
+                    goto success;
                 }
                 fprintf(stderr, "DANE: val_dane_match() failed\n");
                 break;
@@ -154,8 +146,7 @@ SECStatus SSL_DANECheck(void * pinarg, const char *hostname, int32_t port, CERTC
                         CERT_VerifyCertNow(certdb,
                             cert, PR_TRUE, certUsageSSLServer, pinarg)) {
                     fprintf(stderr, "DANE: val_dane_match() success\n");
-                    rv = SECSuccess;
-                    goto done;
+                    goto success;
                 }
                 fprintf(stderr, "DANE: val_dane_match() failed\n");
                 break;
@@ -168,19 +159,14 @@ SECStatus SSL_DANECheck(void * pinarg, const char *hostname, int32_t port, CERTC
         dane_cur = dane_cur->next;
 	}
 
-    rv = SECFailure; 
-
-done:
     val_free_dane(danestatus);
-    if (have_dane) {
-        if (rv == SECSuccess)
-            fprintf(stderr, "DANE: Passed validation\n");
-        else {
-            fprintf(stderr, "DANE: validation failed\n");
-	        PORT_SetError(SSL_ERROR_DANE_UNAUTHORIZED);
-        }
-    }
+    fprintf(stderr, "DANE: validation failed\n");
+	PORT_SetError(SSL_ERROR_DANE_UNAUTHORIZED);
+    return SECFailure;
 
-	return rv;
+success:
+    val_free_dane(danestatus);
+    fprintf(stderr, "DANE: Passed validation\n");
+	return SECSuccess;
 }
 
diff --git a/security/nss/lib/ssl/sslerr.h b/security/nss/lib/ssl/sslerr.h
index 1f44861..34db0f9 100644
--- a/security/nss/lib/ssl/sslerr.h
+++ b/security/nss/lib/ssl/sslerr.h
@@ -188,9 +188,9 @@ SSL_ERROR_RX_UNEXPECTED_HELLO_VERIFY_REQUEST = (SSL_ERROR_BASE + 123),
 
 SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_VERSION = (SSL_ERROR_BASE + 124),
 
-SSL_ERROR_DANE_INIT_FAILED  = (SSL_ERROR_BASE + 125),
-SSL_ERROR_DANE_QUERY_FAILED = (SSL_ERROR_BASE + 126),
-SSL_ERROR_DANE_UNAUTHORIZED = (SSL_ERROR_BASE + 127),
+SSL_ERROR_DANE_QUERY_FAILED = (SSL_ERROR_BASE + 125),
+SSL_ERROR_DANE_UNAUTHORIZED = (SSL_ERROR_BASE + 126),
+SSL_ERROR_DANE_INIT_FAILED  = (SSL_ERROR_BASE + 127),
 
 SSL_ERROR_END_OF_LIST	/* let the c compiler determine the value of this. */
 } SSLErrorCodes;
-- 
1.7.11.7

