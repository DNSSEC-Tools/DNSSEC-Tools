diff -rwup mozilla-1.9.2.old/config/autoconf.mk.in mozilla-1.9.2/config/autoconf.mk.in
--- mozilla-1.9.2.old/config/autoconf.mk.in	2010-04-02 12:02:18.000000000 -0400
+++ mozilla-1.9.2/config/autoconf.mk.in	2010-06-15 11:46:06.000000000 -0400
@@ -292,7 +292,7 @@ OS_COMPILE_CFLAGS = $(OS_CPPFLAGS) @COMP
 OS_COMPILE_CXXFLAGS = $(OS_CPPFLAGS) @COMPILE_CXXFLAGS@
 
 OS_INCLUDES	= $(NSPR_CFLAGS) $(NSS_CFLAGS) $(JPEG_CFLAGS) $(PNG_CFLAGS) $(ZLIB_CFLAGS)
-OS_LIBS		= @LIBS@
+OS_LIBS		= @VAL_LIBS@ @LIBS@
 ACDEFINES	= @MOZ_DEFINES@
 
 WARNINGS_AS_ERRORS = @WARNINGS_AS_ERRORS@
diff -rwup mozilla-1.9.2.old/configure.in mozilla-1.9.2/configure.in
--- mozilla-1.9.2.old/configure.in	2010-04-02 12:02:18.000000000 -0400
+++ mozilla-1.9.2/configure.in	2010-06-15 12:36:10.000000000 -0400
@@ -3116,6 +3116,47 @@ case $target in
 	;;
 esac
 
+dnl Check for libval, the DNSSEC validation library
+dnl ========================================================
+AC_ARG_WITH(system-val,
+[  --with-system-val[=PFX]
+                          Use system libval [installed at prefix PFX]],
+    VAL_DIR=$withval)
+
+AC_ARG_WITH(system-sres,
+[  --with-system-sres[=PFX]
+                          Use system libsres [installed at prefix PFX]],
+    SRES_DIR=$withval)
+
+AC_ARG_WITH(system-openssl,
+[  --with-system-openssl[=PFX]
+                          Use system openssl libraries [installed at prefix PFX]],
+    OPENSSL_DIR=$withval)
+
+if test -n "${OPENSSL_DIR}"; then
+    CFLAGS="-I${OPENSSL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${OPENSSL_DIR}/lib $LDFLAGS"
+fi
+if test -n "${VAL_DIR}"; then
+    CFLAGS="-I${VAL_DIR}/include $CFLAGS"
+    LDFLAGS="-L${VAL_DIR}/lib $LDFLAGS"
+fi
+if test -n "${SRES_DIR}"; then
+    CFLAGS="-I${SRES_DIR}/include $CFLAGS"
+    LDFLAGS="-L${SRES_DIR}/lib $LDFLAGS"
+fi
+VAL_LIBS=""
+AC_CHECK_LIB(crypto, EVP_md5, OPENSSL_LIBS="-lcrypto", OPENSSL_LIBS="")
+AC_CHECK_LIB(sres, response_recv, SRES_LIBS="-lsres -lpthread", SRES_LIBS="",
+             $OPENSSL_LIBS -lpthread)
+AC_CHECK_LIB(val-threads, val_gethostbyname,
+             [VAL_LIBS="-lval-threads $SRES_LIBS $OPENSSL_LIBS"
+              AC_DEFINE(MOZ_DNSSEC)],, $SRES_LIBS $OPENSSL_LIBS)
+LIBS="$VAL_LIBS $LIBS"
+NSPR_LIBS="$NSPR_LIBS $VAL_LIBS"
+AC_SUBST(VAL_LIBS)
+AC_SUBST(MOZ_DNSSEC)
+
 dnl We don't want to link with libdl even if it's present on OS X, since
 dnl it's not used and not part of the default installation.
 dnl The same goes for BeOS.
diff -rwup mozilla-1.9.2.old/docshell/base/nsDocShell.cpp mozilla-1.9.2/docshell/base/nsDocShell.cpp
--- mozilla-1.9.2.old/docshell/base/nsDocShell.cpp	2010-04-02 12:02:20.000000000 -0400
+++ mozilla-1.9.2/docshell/base/nsDocShell.cpp	2010-06-15 12:42:53.000000000 -0400
@@ -3545,6 +3545,26 @@ nsDocShell::DisplayLoadError(nsresult aE
         formatStrCount = 1;
         error.AssignLiteral("dnsNotFound");
     }
+    else if (NS_ERROR_DNSSEC_VALIDATION_ERROR == aError) {
+        NS_ENSURE_ARG_POINTER(aURI);
+        // Get the host
+        nsCAutoString host;
+        nsCOMPtr<nsIURI> innermostURI = NS_GetInnermostURI(aURI);
+        innermostURI->GetHost(host);
+        CopyUTF8toUTF16(host, formatStrs[0]);
+        formatStrCount = 1;
+        error.AssignLiteral("dnsDNSSECValidationError");
+    }
+    else if (NS_ERROR_DNSSEC_DNE_ERROR == aError) {
+        NS_ENSURE_ARG_POINTER(aURI);
+        // Get the host
+        nsCAutoString host;
+        nsCOMPtr<nsIURI> innermostURI = NS_GetInnermostURI(aURI);
+        innermostURI->GetHost(host);
+        CopyUTF8toUTF16(host, formatStrs[0]);
+        formatStrCount = 1;
+        error.AssignLiteral("dnsDNSSECDNEError");
+    }
     else if(NS_ERROR_CONNECTION_REFUSED == aError) {
         NS_ENSURE_ARG_POINTER(aURI);
         addHostPort = PR_TRUE;
@@ -5906,6 +5926,8 @@ nsDocShell::EndPageLoad(nsIWebProgress *
 
         // Errors to be shown only on top-level frames
         if ((aStatus == NS_ERROR_UNKNOWN_HOST || 
+             aStatus == NS_ERROR_DNSSEC_VALIDATION_ERROR ||
+             aStatus == NS_ERROR_DNSSEC_DNE_ERROR ||
              aStatus == NS_ERROR_CONNECTION_REFUSED ||
              aStatus == NS_ERROR_UNKNOWN_PROXY_HOST || 
              aStatus == NS_ERROR_PROXY_CONNECTION_REFUSED) &&
diff -rwup mozilla-1.9.2.old/netwerk/base/public/nsNetError.h mozilla-1.9.2/netwerk/base/public/nsNetError.h
--- mozilla-1.9.2.old/netwerk/base/public/nsNetError.h	2010-01-20 22:30:57.000000000 -0500
+++ mozilla-1.9.2/netwerk/base/public/nsNetError.h	2010-04-14 12:42:03.000000000 -0400
@@ -265,6 +265,12 @@
  * DNS specific error codes:
  */
 
+#define NS_ERROR_DNSSEC_VALIDATION_ERROR \
+    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 34)
+
+#define NS_ERROR_DNSSEC_DNE_ERROR \
+    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 35)
+
 /**
  * The lookup of a hostname failed.  This generally refers to the hostname
  * from the URL being loaded.
diff -rwup mozilla-1.9.2.old/netwerk/base/src/nsSocketTransport2.cpp mozilla-1.9.2/netwerk/base/src/nsSocketTransport2.cpp
--- mozilla-1.9.2.old/netwerk/base/src/nsSocketTransport2.cpp	2010-04-02 12:02:40.000000000 -0400
+++ mozilla-1.9.2/netwerk/base/src/nsSocketTransport2.cpp	2010-06-15 12:51:11.000000000 -0400
@@ -70,6 +70,8 @@
 #include "nsIPipe.h"
 #include "nsIProgrammingLanguage.h"
 #include "nsIClassInfoImpl.h"
+#include "nsIDNSService.h"
+#include "nsISupportsPrimitives.h"
 
 #if defined(XP_WIN) || defined(MOZ_ENABLE_LIBCONIC)
 #include "nsNativeConnectionHelper.h"
@@ -1437,11 +1439,28 @@ nsSocketTransport::OnSocketEvent(PRUint3
             // For SOCKS proxies (mProxyTransparent == true), the socket 
             // transport resolves the real host here, so there's no fixup 
             // (see bug 226943).
-            if ((status == NS_ERROR_UNKNOWN_HOST) && !mProxyTransparent &&
+            if ((status == NS_ERROR_UNKNOWN_HOST ||
+                 status == NS_ERROR_DNSSEC_VALIDATION_ERROR ||
+                 status == NS_ERROR_DNSSEC_DNE_ERROR) && !mProxyTransparent &&
                 !mProxyHost.IsEmpty())
                 mCondition = NS_ERROR_UNKNOWN_PROXY_HOST;
             else
                 mCondition = status;
+
+            switch (status) {
+            case NS_ERROR_UNKNOWN_HOST:
+                LOG(("NS_ERROR_UNKNOWN_HOST"));
+                break;
+            case NS_ERROR_DNSSEC_DNE_ERROR:
+                LOG(("NS_ERROR_DNSSEC_DNE_ERROR"));
+                break;
+            case NS_ERROR_DNSSEC_VALIDATION_ERROR:
+                LOG(("NS_ERROR_DNSSEC_VALIDATION_ERROR"));
+                break;
+            default:
+                LOG(("NS ERROR UNKNOWN"));
+                break;
+            }
         }
         else if (mState == STATE_RESOLVING)
             mCondition = InitiateSocket();
diff -rwup mozilla-1.9.2.old/netwerk/dns/src/nsDNSService2.cpp mozilla-1.9.2/netwerk/dns/src/nsDNSService2.cpp
--- mozilla-1.9.2.old/netwerk/dns/src/nsDNSService2.cpp	2010-04-02 12:02:40.000000000 -0400
+++ mozilla-1.9.2/netwerk/dns/src/nsDNSService2.cpp	2010-06-15 13:02:54.000000000 -0400
@@ -144,6 +144,7 @@ nsDNSRecord::GetNextAddr(PRUint16 port, 
             // Both mHostRecord->addr_info and mHostRecord->addr are null.
             // This can happen if mHostRecord->addr_info expired and the
             // attempt to reresolve it failed.
+            mDone = !mIter;
             return NS_ERROR_NOT_AVAILABLE;
         }
         memcpy(addr, mHostRecord->addr, sizeof(PRNetAddr));
@@ -240,13 +241,11 @@ nsDNSAsyncRequest::OnLookupComplete(nsHo
     // the caller to be able to addref/release multiple times without
     // destroying the record prematurely.
     nsCOMPtr<nsIDNSRecord> rec;
-    if (NS_SUCCEEDED(status)) {
-        NS_ASSERTION(hostRecord, "no host record");
+    // create the instance even if status is not success, since this
+    // might be an error/non-existence condition we want to propagate up 
         rec = new nsDNSRecord(hostRecord);
         if (!rec)
             status = NS_ERROR_OUT_OF_MEMORY;
-    }
-
     mListener->OnLookupComplete(this, rec, status);
     mListener = nsnull;
 
diff -rwup mozilla-1.9.2.old/netwerk/dns/src/nsHostResolver.cpp mozilla-1.9.2/netwerk/dns/src/nsHostResolver.cpp
--- mozilla-1.9.2.old/netwerk/dns/src/nsHostResolver.cpp	2010-04-02 12:02:40.000000000 -0400
+++ mozilla-1.9.2/netwerk/dns/src/nsHostResolver.cpp	2010-06-15 14:27:16.000000000 -0400
@@ -58,6 +58,7 @@
 #include "pratom.h"
 #include "prthread.h"
 #include "prerror.h"
+#include "prerr.h"
 #include "prcvar.h"
 #include "prtime.h"
 #include "prlong.h"
@@ -174,7 +175,7 @@ private:
 // this macro filters out any flags that are not used when constructing the
 // host key.  the significant flags are those that would affect the resulting
 // host record (i.e., the flags that are passed down to PR_GetAddrInfoByName).
-#define RES_KEY_FLAGS(_f) ((_f) & nsHostResolver::RES_CANON_NAME)
+#define RES_KEY_FLAGS(_f) ((_f) & (nsHostResolver::RES_CANON_NAME|nsHostResolver::RES_EXTENDED_ERRS))
 
 nsresult
 nsHostRecord::Create(const nsHostKey *key, nsHostRecord **result)
@@ -210,6 +211,8 @@ nsHostRecord::Create(const nsHostKey *ke
     PR_INIT_CLIST(&rec->callbacks);
     rec->negative = PR_FALSE;
     memcpy((char *) rec->host, key->host, hostLen);
+    rec->security_status_flags = 0;
+    rec->status = NS_OK;
 
     *result = rec;
     return NS_OK;
@@ -503,6 +506,8 @@ nsHostResolver::ResolveHost(const char  
     if (!net_IsValidHostName(nsDependentCString(host)))
         return NS_ERROR_UNKNOWN_HOST;
 
+    flags = flags | RES_EXTENDED_ERRS;
+
     // if result is set inside the lock, then we need to issue the
     // callback before returning.
     nsRefPtr<nsHostRecord> result;
@@ -541,12 +546,13 @@ nsHostResolver::ResolveHost(const char  
                 // put reference to host record on stack...
                 result = he->rec;
                 if (he->rec->negative) {
-                    status = NS_ERROR_UNKNOWN_HOST;
                     if (!he->rec->resolving) 
                         // return the cached failure to the caller, but try and refresh
                         // the record in the background
                         IssueLookup(he->rec);
                 }
+                // use the cached status value 
+                status = he->rec->status;
             }
             // if the host name is an IP address literal and has been parsed,
             // go ahead and use it.
@@ -823,6 +829,7 @@ nsHostResolver::OnLookupComplete(nsHostR
             rec->expiration += 1;                 /* one minute for negative cache */
             rec->negative = PR_TRUE;
         }
+        rec->status = status;
         rec->resolving = PR_FALSE;
         
         if (rec->usingAnyThread) {
@@ -881,14 +888,44 @@ nsHostResolver::ThreadFunc(void *arg)
         if (!(rec->flags & RES_CANON_NAME))
             flags |= PR_AI_NOCANONNAME;
 
+        if (rec->flags & RES_EXTENDED_ERRS) {
+            ai = PR_GetAddrInfoByNameExtended(rec->host, rec->af, flags,
+                                              &(rec->security_status_flags));
+#if defined(RES_RETRY_ON_FAILURE)
+            if (!ai && rs.Reset())
+                ai = PR_GetAddrInfoByName(rec->host, rec->af, flags);
+#endif
+        } else {
         ai = PR_GetAddrInfoByName(rec->host, rec->af, flags);
 #if defined(RES_RETRY_ON_FAILURE)
         if (!ai && rs.Reset())
             ai = PR_GetAddrInfoByName(rec->host, rec->af, flags);
 #endif
+        }
 
         // convert error code to nsresult.
-        nsresult status = ai ? NS_OK : NS_ERROR_UNKNOWN_HOST;
+        nsresult status;
+
+        if (!ai) {
+            // handle errors
+            PRErrorCode err = PR_GetError();
+            switch(err) {
+            case PR_DNSSEC_VALIDATION_ERROR:
+                status = NS_ERROR_DNSSEC_VALIDATION_ERROR;
+                break;
+
+            case PR_DNSSEC_DNE_ERROR:
+                status = NS_ERROR_DNSSEC_DNE_ERROR;
+                break;
+
+            default:
+                status = NS_ERROR_UNKNOWN_HOST;
+                break;
+            }
+        } else {
+            status = NS_OK;
+        }
+
         resolver->OnLookupComplete(rec, status, ai);
         LOG(("lookup complete for %s ...\n", rec->host));
     }
diff -rwup mozilla-1.9.2.old/netwerk/dns/src/nsHostResolver.h mozilla-1.9.2/netwerk/dns/src/nsHostResolver.h
--- mozilla-1.9.2.old/netwerk/dns/src/nsHostResolver.h	2010-01-20 22:30:58.000000000 -0500
+++ mozilla-1.9.2/netwerk/dns/src/nsHostResolver.h	2010-05-05 14:18:55.000000000 -0400
@@ -116,10 +116,12 @@ public:
                                 Negative cache entries are valid just like any other
                                 (though never for more than 60 seconds), but a use
                                 of that negative entry forces an asynchronous refresh. */
+    nsresult    status;
 
     PRUint32     expiration; /* measured in minutes since epoch */
+    PRUint16    security_status_flags; /* DNSSEC information (bitmask) */
 
-    PRBool HasResult() const { return addr_info || addr || negative; }
+    PRBool HasResult() const { return addr_info || addr || negative || security_status_flags; }
 
 private:
     friend class nsHostResolver;
@@ -226,7 +228,8 @@ public:
         RES_CANON_NAME   = 1 << 1,
         RES_PRIORITY_MEDIUM   = 1 << 2,
         RES_PRIORITY_LOW  = 1 << 3,
-        RES_SPECULATE     = 1 << 4   
+        RES_SPECULATE     = 1 << 4,
+        RES_EXTENDED_ERRS = 1 << 5
     };
 
 private:
diff -rwup mozilla-1.9.2.old/netwerk/protocol/http/src/nsHttpChannel.cpp mozilla-1.9.2/netwerk/protocol/http/src/nsHttpChannel.cpp
--- mozilla-1.9.2.old/netwerk/protocol/http/src/nsHttpChannel.cpp	2010-04-02 12:02:53.000000000 -0400
+++ mozilla-1.9.2/netwerk/protocol/http/src/nsHttpChannel.cpp	2010-06-15 14:01:19.000000000 -0400
@@ -83,6 +83,7 @@
 #include "nsAuthInformationHolder.h"
 #include "nsICacheService.h"
 #include "nsDNSPrefetch.h"
+#include "nsIDNSService.h"
 #include "nsNetSegmentUtils.h"
 
 // True if the local cache should be bypassed when processing a request.
@@ -5222,6 +5223,14 @@ nsHttpChannel::OnStopRequest(nsIRequest 
     LOG(("nsHttpChannel::OnStopRequest [this=%p request=%p status=%x]\n",
         this, request, status));
 
+    if (mStatus == NS_ERROR_DNSSEC_VALIDATION_ERROR) {
+        gHttpHandler->OnDNSSECResponseUntrusted(this);
+    } else if (NS_FAILED(mStatus)) {
+        gHttpHandler->OnDNSSECResponseError(this);
+    } else { 
+        gHttpHandler->OnDNSSECResponseTrusted(this);
+    }
+
     // honor the cancelation status even if the underlying transaction completed.
     if (mCanceled || NS_FAILED(mStatus))
         status = mStatus;
diff -rwup mozilla-1.9.2.old/netwerk/protocol/http/src/nsHttpHandler.h mozilla-1.9.2/netwerk/protocol/http/src/nsHttpHandler.h
--- mozilla-1.9.2.old/netwerk/protocol/http/src/nsHttpHandler.h	2010-01-20 22:30:58.000000000 -0500
+++ mozilla-1.9.2/netwerk/protocol/http/src/nsHttpHandler.h	2010-05-05 13:56:54.000000000 -0400
@@ -192,6 +192,19 @@ public:
         NotifyObservers(chan, NS_HTTP_ON_EXAMINE_MERGED_RESPONSE_TOPIC);
     }
 
+    void OnDNSSECResponseUntrusted(nsIHttpChannel *chan)
+    {
+        NotifyObservers(chan, "dnssec-status-untrusted");
+    }
+    void OnDNSSECResponseError(nsIHttpChannel *chan)
+    {
+        NotifyObservers(chan, "dnssec-status-error");
+    }
+    void OnDNSSECResponseTrusted(nsIHttpChannel *chan)
+    {
+        NotifyObservers(chan, "dnssec-status-trusted");
+    }
+
     // Called by channels before a redirect happens. This notifies both the
     // channel's and the global redirect observers.
     nsresult OnChannelRedirect(nsIChannel* oldChan, nsIChannel* newChan,
