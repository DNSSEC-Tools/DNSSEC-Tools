.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "val_getaddrinfo 3"
.TH val_getaddrinfo 3 "2008-05-26" "perl v5.8.8" "Programmer's Manual"
.SH "NAME"
\&\fIval_getaddrinfo()\fR \- get DNSSEC\-validated network
address and service translation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <validator.h>
.Ve
.PP
.Vb 6
\&  int val_getaddrinfo(const struct val_context *ctx,
\&                      const char *nodename,
\&                      const char *servname,
\&                      const struct addrinfo *hints,
\&                      struct addrinfo **res,
\&                      val_status_t * val_status);
.Ve
.PP
.Vb 9
\&  int val_getnameinfo(val_context_t * ctx,
\&                      const struct sockaddr *sa,
\&                      socklen_t salen,
\&                      char *host,
\&                      size_t hostlen,
\&                      char *serv,
\&                      size_t servlen,
\&                      int flags,
\&                      val_status_t * val_status);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fI\fIval_getaddrinfo()\fI\fR and \fIval_getnameinfo\fR perform \s-1DNSSEC\s0 validation of \s-1DNS\s0
queries.  They are intended to be DNSSEC-aware replacements for
\&\fI\fIgetaddrinfo\fI\|(3)\fR and \fI\fIgetnameinfo\fI\|(3)\fR.
.PP
\&\fI\fIval_getaddrinfo()\fI\fR  returns a network address value of type \fIstruct
addrinfo\fR in the \fIres\fR parameter.  \fIval_getnameinfo\fR is used to convert a
\&\fIsockaddr\fR structure to a pair of host name and service strings.
.PP
\&\fIval_status\fR gives the combined validation status value for all
answers returned by the each of the functions.  \fI\fIval_istrusted()\fI\fR and
\&\fI\fIval_isvalidated()\fI\fR can be used to determine the trustworthiness of data and
\&\fI\fIp_val_status()\fI\fR can be used to display the status value to the user in \s-1ASCII\s0
format (See \fI\fIlibval\fI\|(3)\fR more for information).
.PP
The \fIctx\fR parameter specifies the validation context, which can be set to \s-1NULL\s0
for default values (see \fI\fIlibval\fI\|(3)\fR and \fIdnsval.conf\fR for more details on validation
contexts and validation policy).
.PP
The \fInodename\fR, \fIservname\fR, and \fIhints\fR parameters have similar
syntax and semantics as the corresponding parameters for the original
\&\fI\fIgetaddrinfo()\fI\fR function.  The \fIres\fR parameter is similar to the
\&\fIres\fR parameter for \fI\fIgetaddrinfo()\fI\fR.  Please see the manual
page for \fI\fIgetaddrinfo\fI\|(3)\fR for more details about these parameters.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The \fI\fIval_getaddrinfo()\fI\fR function returns 0 on success and a non-zero error
code on failure.  \fI*res\fR will point to a dynamically allocated linked list
of \fIaddrinfo\fR structures on success and will be \s-1NULL\s0 if no answer was
available.
.PP
The \fIval_status\fR parameter gives an indication for trustworthiness of data. If
\&\fI*res\fR is \s-1NULL\s0, this value gives an indication of whether the non-existence of
data can be trusted or not.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 3
\& #include <stdio.h>
\& #include <stdlib.h>
\& #include <validator.h>
.Ve
.PP
.Vb 4
\& int main(int argc, char *argv[])
\& {
\&          struct addrinfo *ainfo = NULL;
\&          int retval;
.Ve
.PP
.Vb 4
\&          if (argc < 2) {
\&                  printf("Usage: %s <hostname>\en", argv[0]);
\&                  exit(1);
\&          }
.Ve
.PP
.Vb 1
\&          retval = val_getaddrinfo(NULL, argv[1], NULL, NULL, &ainfo);
.Ve
.PP
.Vb 1
\&          if ((retval == 0) && (ainfo != NULL)) {
.Ve
.PP
.Vb 3
\&                  printf("Validation Status = %d [%s]\en",
\&                         ainfo->ai_val_status,
\&                         p_val_status(ainfo->ai_val_status));
.Ve
.PP
.Vb 2
\&                  freeaddrinfo(ainfo);
\&          }
.Ve
.PP
.Vb 2
\&          return 0;
\& }
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004\-2008 \s-1SPARTA\s0, Inc.  All rights reserved.
See the \s-1COPYING\s0 file included with the DNSSEC-Tools package for details.
.SH "AUTHORS"
.IX Header "AUTHORS"
Abhijit Hayatnagarkar, Michael Baer
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fI\fIgetaddrinfo\fI\|(3)\fR
.PP
\&\fI\fIval_gethostbyname\fI\|(3)\fR, \fI\fIval_res_query\fI\|(3)\fR
.PP
\&\fI\fIlibval\fI\|(3)\fR
.PP
http://dnssec\-tools.sourceforge.net
