=pod

=head1 NAME

query_send, response_rcv, get - 
send queries and receive responses from a DNS name server.

clone_ns, clone_ns_list, free_name_server, free_name_servers -
Manage name servers

print_response - Display answers returned from the name server

=head1 SYNOPSIS

  #include <resolver.h>

  int query_send(const char    *name,
            const u_int16_t     type,
            const u_int16_t     class,
            struct name_server  *nslist,
            int                 *trans_id);

  int response_recv(int         *trans_id,
            struct name_server  **respondent,
            u_int8_t            **response,
            u_int32_t           *response_length);

  int get(const char          *name_n,
          const u_int16_t     type_h,
          const u_int16_t     class_h,
          struct name_server  *nslist,
          struct name_server  **respondent,
          u_int8_t            **response,
          u_int32_t           *response_length);

  int clone_ns(struct name_server **cloned_ns, struct name_server *ns);

  int clone_ns_list(struct name_server **ns_list, struct name_server *orig_ns_list);

  void free_name_server(struct name_server **ns);

  void free_name_servers(struct name_server **ns);

  void print_response(u_int8_t *response, int response_length);

=head1 DESCRIPTION

The B<query_send()> function can be used to send a query comprised of the
<I<name, class, type>> tuple to the name servers specified in I<nslist>.
I<trans_id> provides a handle to this transaction within the I<libsres> library.

The B<response_recv()> function returns the answers, if available, from the
name server that responds for the query identified by I<trans_id>.
The response is available in I<response> and the responding name server is
returned in I<respondent>.  The length of the response in bytes is returned
in I<response_length>.

The B<get()> function provides a wrapper around the B<query_send()> and
B<response_recv()> functions.  It blocks until a response is received
from some name server or until the request times out.  The I<libsres> library does
not automatically follow referrals; responses containing referrals are 
treated as valid responses.

The memory pointed to by I<*respondent> is internally allocated by the I<libsres> library
and this must be freed by the invoker using B<free_name_server()>.
An entire list of name servers can be freed using B<free_name_servers()>.
A copy of the name server can be created using B<clone_ns> and a copy of a name server list
can be made using B<clone_ns_list>.

B<print_response()> provides a convenient way to display answers returned
in I<response> by the name server.

I<struct name_server> is defined in B<resolver.h> as follows.

  struct name_server
  {
        u_int8_t *ns_name_n;
        void *ns_tsig;
        u_int32_t ns_security_options;
        u_int32_t ns_status;
        struct name_server *ns_next;
        int ns_number_of_addresses;
        struct sockaddr ns_address[1];
        u_long  ns_options;
        int ns_retrans;
        int ns_retry;
  };


=over 4

=item I<ns_name_n>

The name of the zone for which this name server is authoritative.  

=item I<ns_tsig>

The I<tsig> key that should be used to protect messages sent to this name
server.  This field is currently unused and must be set to NULL.

=item I<ns_security_options>

The security options for the zone.  This field is currently unused and must be set to
ZONE_USE_NOTHING.

=item I<ns_status>

The status of the zone.  This field indicates how the zone information was obtained. 
The invoker must set this value to SR_ZI_STATUS_UNSET. Zone information that was
obtained through referrals have a value of SR_ZI_STATUS_LEARNED for this field. 

=item I<ns_next>

The address of the next name server in the list.

=item I<ns_number_of_addresses>

The number of elements in the array I<ns_addresses>.  This field is
currently unused.

=item I<ns_addresses>

The IP address of the name server.  Currently, only IPv4 addresses can be
stored.

=item I<ns_options>

Specifies additional resolver flags. Currently defined flags are RES_RECURSE, which sets the 'Recursion
Desired' flag; RES_USE_DNSSEC, which sets the DNSSEC OK' bit in the EDNS0 header and RES_DEBUG, which
enables debugging.  

=item I<ns_retrans>

Specifies the retransmission interval in seconds for queries sent to un-responsive name servers. 

=item I<ns_retry>

Specifies the maximum number of attempts that must be made to obtain a name from an un-responsive name
server before giving up. 

=back

=head1 OTHER SYMBOLS EXPORTED

The I<libsres> library also exports the following BIND functions, documentation for which can be found in
the BIND sources and documentation manuals:
nametoclass
nametotype
ns_name_ntop
ns_name_pton
ns_name_unpack
ns_parse_ttl
p_class
p_section
p_type

=head1 RETURN VALUES

=over 4

=item SR_UNSET

No error.

=item SR_CALL_ERROR

An invalid parameter was passed to B<get()>, B<query_send()>, or
B<response_recv()>.

=item SR_MEMORY_ERROR

Memory allocation failed.

=item SR_NO_ANSWER

No answers were received from any name server.

=item SR_NO_ANSWER_YET

No answer currently available; the query is still active.

=item SR_MKQUERY_INTERNAL_ERROR

An internal error was encountered while trying to construct a
query message.

=item SR_SEND_INTERNAL_ERROR

An internal error was encountered while trying to send the
message to the name server(s).

=item SR_RCV_INTERNAL_ERROR

An internal error was encountered while trying to receive
responses from a name server.

=item SR_WRONG_ANSWER

The header bits did not correctly identify the message as a response.

=item SR_HEADER_BADSIZE

The length and count of records in the header were incorrect.

=item SR_NXDOMAIN

The queried name did not exist.

=item SR_FORMERR

The name server was not able to parse the query message.

=item SR_SERVFAIL

The name server was not reachable.

=item SR_NOTIMPL

A particular functionality is not yet implemented.

=item SR_REFUSED

The name server refused to answer this query.

=item SR_GENERIC_FAILURE

Other failure returned by the name server and reflected in the
returned message RCODE.

=back

=head1 CURRENT STATUS

There is currently no support for IPv6.

There is limited support for specifying resolver policy; members of the
I<struct name_server> are still subject to change.

=head1 COPYRIGHT

Copyright 2004-2006 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the dnssec-tools package for details.

=head1 SEE ALSO

B<libval(3)>

http://dnssec-tools.sourceforge.net

=cut
