dnl Process this file with autoconf to produce a configure script.
dnl

dnl provide it a file to simply check for its existence.
AC_INIT([dnssec-tools-validator], [0.2], [dnssec-tools-users@lists.sourceforge.net])
AC_PREREQ([2.59])

AC_CONFIG_HEADER(include/validator-config.h)

AC_PATH_PROG([PERLPROG],perl)
AC_PATH_PROG(AR, ar)
AC_PATH_PROG(RM, rm)

# libtool info
AC_PROG_LIBTOOL

# useful stuff for installation
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# system check
AC_CANONICAL_TARGET

#
# save the configure arguments
#
AC_DEFINE_UNQUOTED(LIBVAL_CONFIGURE_OPTIONS,"$ac_configure_args", [Configure options])
CONFIGURE_OPTIONS="\"$ac_configure_args\""
AC_SUBST(CONFIGURE_OPTIONS)

dnl ----------------------------------------------------------------------
dnl
VAL_RESOLV_CONF=/etc/resolv.conf
AC_ARG_WITH(resolv-conf,
[  --with-resolv-conf=FILE resolver config file (/etc/resolv.conf).],
    [VAL_RESOLV_CONF=$with_resolv_conf])
AC_DEFINE_UNQUOTED(VAL_RESOLV_CONF,"$VAL_RESOLV_CONF", [resolver config file])
AC_SUBST(VAL_RESOLV_CONF)

VAL_ROOT_HINTS=/etc/root.hints
AC_ARG_WITH(root-hints,
[  --with-root-hints=FILE  root.hints config file (/etc/root.hints).],
    [VAL_ROOT_HINTS=$with_root_hints])
AC_DEFINE_UNQUOTED(VAL_ROOT_HINTS,"$VAL_ROOT_HINTS", ["root hints file"])
AC_SUBST(VAL_ROOT_HINTS)

VAL_CONFIGURATION_FILE=/etc/dnsval.conf
AC_ARG_WITH(dnsval-conf,
[  --with-dnsval-conf=FILE dnsval config file (/etc/dnsval.conf).],
    [VAL_CONFIGURATION_FILE=$with_dnsval_conf])
AC_DEFINE_UNQUOTED(VAL_CONFIGURATION_FILE,"$VAL_CONFIGURATION_FILE", [dnsval configuration file])
AC_SUBST(VAL_CONFIGURATION_FILE)

dnl ----------------------------------------------------------------------
dnl
AC_ARG_WITH(cflags,
[  --with-cflags=CFLAGS    use CFLAGS as compile time arguments.],
    [CFLAGS=$with_cflags; export CFLAGS])

case $target_os in
    solaris*)
        AC_MSG_CHECKING([whether we need _REENTRANT for str*_r])
        AC_MSG_RESULT([yes])
        CFLAGS="$CFLAGS -D_REENTRANT"
        ;;
    *)
        ;;
esac


dnl ----------------------------------------------------------------------
dnl
AH_TEMPLATE([LIBVAL_NSEC3], [Define if NSEC3 is required.])
AC_ARG_WITH(nsec3,
[  --with-nsec3            Enable NSEC3.],
    [AC_DEFINE(LIBVAL_NSEC3)])

dnl ----------------------------------------------------------------------
dnl perl specific arguments
dnl
AC_ARG_WITH(perl-build-args,
[  --with-perl-perl-args=ARGS           Add ARGS to building perl Makefiles.],
	PERLARGS="$withval"
)
AC_SUBST(PERLARGS)

dnl ----------------------------------------------------------------------
dnl openssl
dnl
AC_ARG_WITH(openssl,
[  --with-openssl=PATH     Look for openssl in PATH/{lib,include}.],
    if test "x$withval" != "xyes"; then
      opensslpathset=1
      AC_ADD_SEARCH_PATH($withval)
    fi
)
AC_ARG_ENABLE(openssl,,
        AC_MSG_ERROR([ Invalid option. Use --with-openssl/--without-openssl instead ]) )
AC_ARG_WITH(ssl,,
        AC_MSG_ERROR([ Invalid option. Use --with-openssl/--without-openssl instead ]) )
AC_ARG_ENABLE(ssl,,
        AC_MSG_ERROR([ Invalid option. Use --with-openssl/--without-openssl instead ]) )

dnl openssl defaults to /usr/local/ssl, so add it to the search path.
if test "x$opensslpathset" != "x1"; then
    AC_ADD_SEARCH_PATH(/usr/local/ssl)
fi

AC_CHECK_LIB(crypto, EVP_md5,,
        AC_MSG_ERROR("OpenSSL not found. get it from http://www.openssl.org.")
)

dnl add any libraries that may be dependencies
AC_CHECK_LIB(nsl, inet_ntop)
AC_CHECK_LIB(socket, gai_strerror)

AH_TEMPLATE([HAVE_NSAP_ADDR],
            [Define if libc contains inet_nsap_ntoa.])
AC_CHECK_LIB(c, inet_nsap_ntoa, AC_DEFINE(HAVE_NSAP_ADDR), )
    
AH_TEMPLATE([HAVE_GETHOSTBYNAME2],
            [Define if libc contains gethostbyname2.])
AC_CHECK_LIB(c, gethostbyname2, AC_DEFINE(HAVE_GETHOSTBYNAME2), )

AH_TEMPLATE([HAVE_HSTRERROR],
            [Define if libc contains hstrerror.])
AC_CHECK_LIB(c, hstrerror, AC_DEFINE(HAVE_HSTRERROR), )

AC_CHECK_HEADERS(openssl/bio.h openssl/evp.h)

# error and die if we couldn't find it.
if test "x$ac_cv_lib_crypto_EVP_md5" != "xyes" -o "x$ac_cv_header_openssl_bio_h" != "xyes" -o "x$ac_cv_header_openssl_evp_h" != "xyes"; then
	AC_MSG_ERROR("OpenSSL not found. get it from http://www.openssl.org.")
fi

dnl ----------------------------------------------------------------------
AC_ARG_WITH(threads,
[  --without-threads       Don't use threads.])

LIBVAL_SUFFIX=""
AH_TEMPLATE([VAL_NO_THREADS],
            [Define if you do not want to use threads.])
if test "x$with_threads" = "xno"; then
    AC_DEFINE(VAL_NO_THREADS, 1)
else

    AC_CHECK_LIB(pthread, pthread_rwlock_init,
        LIBS="$LIBS -lpthread"
        LIBVAL_SUFFIX="-threads",
        AC_DEFINE(VAL_NO_THREADS, 1))
fi
AC_SUBST(LIBVAL_SUFFIX)

dnl ----------------------------------------------------------------------
AC_SUBST(LIBS)

dnl ----------------------------------------------------------------------
AC_MSG_CHECKING([for developer gcc flags])
DEVFLAGS=""
if test -d $srcdir/.svn; then
  # disable --enable-shared by default in cvs/developer cases.
  # don't do anything if option set via cmdline
  if test "${enable_shared+set}" != set; then
    enable_shared=no
  fi

  if test "x$GCC" = "xyes"; then
    DEVFLAGS="-Wall -Winline -Wstrict-prototypes -Wwrite-strings -Wcast-qual -Wno-char-subscripts"
  fi
fi
AC_MSG_RESULT($DEVFLAGS)
AC_SUBST(DEVFLAGS)

dnl ----------------------------------------------------------------------
AC_CHECK_HEADERS(sys/filio.h getopt.h netinet/in.h)
AC_CHECK_DECLS([getopt_long_only, getopt_long],,,[
#include <unistd.h>
#if HAVE_GETOPT_H
#include <getopt.h>
#endif
])

dnl ----------------------------------------------------------------------
AC_CHECK_HEADERS(arpa/nameser.h arpa/nameser_compat.h)

AC_CACHE_CHECK(for struct HEADER in arpa/nameser.h, ac_cv_nameser_has_header,
[AC_EGREP_CPP(HEADER, [
#include <arpa/nameser.h>
],  ac_cv_nameser_has_header="yes", ac_cv_nameser_has_header="no")])
if test "x$ac_cv_nameser_has_header" = "xyes" ; then
  AC_DEFINE([NAMESER_HAS_HEADER], 1, [Define if <arpa/nameser.h> has HEADER. ])
fi

AC_CHECK_STRUCT_FOR([
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_ARPA_NAMESER_H
#include <arpa/nameser.h>
#endif
], __ns_msg, _msg_ptr, no)
AH_TEMPLATE([STRUCT___NS_MSG_HAS__MSG_PTR],
            [Define if struct __ns_msg had _msg_ptr.])

AC_CHECK_STRUCT_FOR([
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_ARPA_NAMESER_H
#include <arpa/nameser.h>
#endif
], __ns_msg, _ptr, no)
AH_TEMPLATE([STRUCT___NS_MSG_HAS__PTR],
            [Define if struct __ns_msg had _ptr.])

dnl ----------------------------------------------------------------------
dnl check for non-portable functions 
dnl
AC_CHECK_FUNCS(strerror_r)

dnl ---------------------------------------------------------------------- 
AC_CHECK_TYPES([ns_cert_types],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_ARPA_NAMESER_H
#include <arpa/nameser.h>
#endif
])

dnl check for varios ns_* decls (record types or functions)
AC_CHECK_DECLS([ns_t_a,ns_t_kx,ns_r_badsig,ns_parse_ttl,ns_name_pton,ns_name_unpack,ns_name_ntop,ns_samename],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_ARPA_NAMESER_H
#include <arpa/nameser.h>
#endif
])
AH_BOTTOM([
/*
 * OpenBSD has t_*, but not ns_t_*
 */
#if ! HAVE_DECL_NS_T_A
#include "val_ns_types.h"
#endif

/*
 * FreeBSD is missing ns_t_kx, ns_t_cert, ns_t_a6, ns_t_dname, ns_t_sink, ns_t_tsig, ns_t_zxfr
 * for now, assume if the first is missing, the rest are too. If we hit system that has some
 * but not others, tweak accordingly.
 */
#if defined HAVE_DECL_NS_T_KX && !HAVE_DECL_NS_T_KX
#define ns_t_kx      36  /* Key Exchange */
#define ns_t_cert    37  /* Certification record */
#define ns_t_a6      38  /* IPv6 address (deprecates AAAA) */
#define ns_t_dname   39  /* Non-terminal DNAME (for IPv6) */
#define ns_t_sink    40  /* Kitchen sink (experimentatl) */
#define ns_t_tsig    250 /* Transaction signature. */
#define ns_t_zxfr    256 /* BIND-specific, nonstandard. */
#endif /* HAVE_NS_T_KX */

/*
 * FreeBSD is missing ns_r_badsig, ns_r_badkey, ns_r_badtime
 * for now, assume if the first is missing, the rest are too. If we hit system that has some
 * but not others, tweak accordingly.
 */
#if defined HAVE_DECL_NS_R_BADSIG && !HAVE_DECL_NS_R_BADSIG
#define ns_r_badsig      16
#define ns_r_badkey      17
#define ns_r_badtime     18
#endif /* HAVE_NS_R_BADSIG */
])

AC_CHECK_DECLS([p_rcode,p_section],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#if HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#include <resolv.h>
])


dnl ----------------------------------------------------------------------
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_TYPES([int8_t, uint8_t, u_int8_t])
AC_CHECK_TYPES([int16_t, uint16_t, u_int16_t])
AC_CHECK_TYPES([int32_t, uint32_t, u_int32_t])

AH_BOTTOM([
#define MAX_TEST_RESULTS 10

#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
/* define u_int32_t if not available */
#ifndef HAVE_U_INT32_T
#ifdef HAVE_UINT32_T
typedef uint32_t        u_int32_t;
#else
#ifdef INT32_T
typedef unsigned INT32_T u_int32_t;
#else
typedef unsigned int     u_int32_t;
#endif
#endif
#endif /* !HAVE_U_INT32_T */

/* define u_int16_t if not available */
#ifndef HAVE_U_INT16_T
#ifdef HAVE_UINT16_T
typedef uint16_t        u_int16_t;
#else
#ifdef INT16_T
typedef unsigned INT16_T u_int16_t;
#else
typedef unsigned short     u_int16_t;
#endif
#endif
#endif /* !HAVE_U_INT16_T */]

/* define u_int8_t if not available */
#ifndef HAVE_U_INT8_T
#ifdef HAVE_UINT8_T
typedef uint8_t        u_int8_t;
#else
#ifdef INT8_T
typedef unsigned INT8_T u_int8_t;
#else
typedef unsigned short     u_int8_t;
#endif
#endif
#endif /* !HAVE_U_INT8_T */])

dnl ----------------------------------------------------------------------

case "$host" in
 *-*-sunos4*)
    AC_DEFINE(SPRINTF_CHAR, 1, [*s*printf() functions are char*])
    ;;
esac

dnl ----------------------------------------------------------------------

AC_CONFIG_FILES([
 Makefile:Makefile.top:Makefile.in
 libsres/Makefile:Makefile.top:libsres/Makefile.in:Makefile.bot
 libval/Makefile:Makefile.top:libval/Makefile.in:Makefile.bot
 doc/Makefile:Makefile.top:doc/Makefile.in:Makefile.bot
 apps/Makefile:Makefile.top:apps/Makefile.in:Makefile.bot
])
AC_CONFIG_FILES([libval-config:libval-config.in], [chmod +x libval-config])
AC_CONFIG_COMMANDS([default], echo timestamp > stamp-h)
AC_OUTPUT
