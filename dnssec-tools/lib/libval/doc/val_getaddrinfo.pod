=pod

=head1 NAME

val_getaddrinfo, free_val_addrinfo - get DNSSEC-validated network address
and service translation

=head1 SYNOPSIS

  #include <validator.h>

  int val_getaddrinfo(const struct val_context *ctx,
                      const char *nodename,
                      const char *servname,
                      const struct addrinfo *hints,
                      struct val_addrinfo **res);

  void val_freeaddrinfo(struct val_addrinfo *ainfo);

=head1 DESCRIPTION

B<val_getaddrinfo()> is a DNSSEC-aware function intended as a replacement
for B<getaddrinfo(3)>.  It performs DNSSEC validation of DNS queries.  It
returns a network address value of type I<struct val_addrinfo> in the I<res>
parameter.

  struct val_addrinfo {
          int ai_flags;
          int ai_family;
          int ai_socktype;
          int ai_protocol;
          size_t ai_addrlen;
          struct sockaddr *ai_addr;
          char * ai_canonname;
          struct val_addrinfo *ai_next;
          val_status_t val_status;
  };

The I<val_addrinfo> structure is similar to the I<addrinfo> structure (see
B<getaddrinfo(3)>), and has an additional field I<val_status> that represents
the validation status for that particular record.  The B<val_istrusted()>
function can be used to determine whether this validation status represents a
trusted value.

The I<ctx> parameter of type I<val_context> represents the validation context,
which can be NULL for default value. The caller can use this parameter to
control the resolver and validator policies used during validation.
(See B<get_context(3)> for information on creating a validation context.)

The I<nodename>, I<servname> and I<hints> parameters are similar in
meaning and syntax as the corresponding parameters for the original
B<getaddrinfo()> function.  The I<res> parameter is similar to the
I<res> parameter for B<getaddrinfo()>, except that it is of type
I<struct val_addrinfo> instead of I<struct addrinfo>. Please see the manual
page for B<getaddrinfo(3)> for more details about these parameters. 

B<free_val_addrinfo()> frees the memory allocated for a I<val_addrinfo> linked
list.

=head1 RETURN VALUES

The B<val_getaddrinfo()> function returns 0 on success and a non-zero error
code on failure.  I<*res> will point to a dynamically allocated linked list
of I<val_addrinfo> structures on success, and will be B<NULL> on error.  The
memory for the value returned in I<*res> can be released using the
B<free_val_addrinfo()> function.

=head1 EXAMPLE

 #include <stdio.h>
 #include <stdlib.h>
 #include <validator.h>

 int main(int argc, char *argv[])
 {
          int val_status = ERROR;
          struct val_addrinfo *ainfo = NULL;
          int retval;

          if (argc < 2) {
                  printf("Usage: %s <hostname>\n", argv[0]);
                  exit(1);
          }
 
          retval = val_getaddrinfo(NULL, argv[1], NULL, NULL, &ainfo);

          if ((retval == 0) && (ainfo != NULL)) {

                  printf("Validation Status = %d [%s]\n",
                         ainfo->val_status,
                         p_val_error(ainfo->val_status));

                  free_val_addrinfo(ainfo);
          }

          return 0;
 }

=head1 COPYRIGHT

Copyright 2004-2005 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the DNSSEC-Tools package for details.

=head1 AUTHORS

Abhijit Hayatnagarkar

=head1 SEE ALSO

B<getaddrinfo(3)>

B<get_context(3)>, B<val_gethostbyname(3)>, B<val_query(3)>

B<p_val_error()>, B<val_istrusted()>

http://dnssec-tools.sourceforge.net

=cut
