=pod

=head1 NAME

val_query - DNSSEC-validated resolution of DNS queries

=head1 SYNOPSIS

  #include <validator.h>

  int val_query(const val_context_t *ctx,
                const char *dname,
                const u_int16_t class,
                const u_int16_t type,
                const u_int8_t flags,
                struct val_response *resp,
                int *resp_count)

=head1 DESCRIPTION

The B<val_query()> function is a DNSSEC-aware replacement for B<res_query(3)>.
It performs DNSSEC validation of DNS queries.

The I<ctx> parameter is the validator context and can be set to NULL for
default settings.  More information about this field can be found in
B<libval(3)>.

The I<dname> parameter specifies the domain name, I<class> specifies the
DNS class and I<type> specifies the DNS type.  The I<flags> parameter is
reserved for future use, and must be set to 0 at present.

The I<val_query()> function returns results in I<resp> which encapsultes the
results into the following structure:

  struct val_response {
        unsigned char *response;
        int response_length;
        val_status_t val_status;
  }; 

I<response> and I<response_length> fields are functionally similar to the
I<answer> and I<anslen> parameters in B<res_query(3)>.  I<resp> is an array
and must be allocated by the user to be of sufficient size to hold all the
answers returned by the DNS name server.  Each element in the I<resp> array
will contain an answer corresponding to a single RRSet in the DNS reply.

If DNSSEC validation succeeds for a given RRSet, a value of
B<VALIDATE_SUCCESS> is returned in the I<val_status> field of the
I<val_response> structure for that RRSet. Other values are returned in case
of errors.  See B<val_errors.h> for a listing of possible error codes.  The
B<p_val_error()> function can be used to return a brief string description
of the error code.  The B<val_istrusted()> function can be used to determine
if the error code represents a value which indicates that the response can
be trusted.

The number of answers actually available is returned in the I<resp_count>
parameter.  In case I<resp> is not large enough to hold all answers returned
from B<val_query()>, it returns an error code of B<NO_SPACE> and
I<resp_count> is set to the total number of answers available.  Applications
may re-query after reallocating I<resp> to hold that many answers.  For
queries that are not of type C<ns_t_any> it is generally sufficient to
allocate an array of three elements for *I<resp>.

=head1 RETURN VALUES

The B<val_query()> function returns B<NO_ERROR> on success.  It returns
B<NO_SPACE> if the application has not allocated enough memory to hold all
results returned by the validator.  This function internally invokes
B<resolve_n_check()>, and errors from this function may also be returned.
See B<libval(3)> for more details.

=head1 EXAMPLES
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <strings.h>
 #include <arpa/nameser.h>
 #include <validator.h>
 
 #define BUFLEN 8096
 #define RESPCOUNT 3

 int main(int argc, char *argv[])
 {
          int dnssec_status = ERROR;
          int retval;
	  int i;
          int class = ns_c_in;
          int type = ns_t_a;
          struct val_response resp[RESPCOUNT];
          int resp_count = RESPCOUNT;
          char buf0[BUFLEN];
	  char buf1[BUFLEN];
          char buf2[BUFLEN];

          if (argc < 2) {
                  printf("Usage: %s <domain-name>\n", argv[0]);
                  exit(1);
          }
 
          bzero(buf0, BUFLEN);
          bzero(buf1, BUFLEN);
          bzero(buf2, BUFLEN);

          resp[0].response = buf0;
          resp[1].response = buf1;
          resp[2].response = buf2;

          resp[0].response_length = BUFLEN;
          resp[1].response_length = BUFLEN;
          resp[2].response_length = BUFLEN;

          retval = val_query(NULL, argv[1], class, type, 0, resp,
                             &resp_count);

          if (retval == NO_ERROR) {
                  for (i=0; i<resp_count; i++) {
                          printf("Validation Status = %d [%s]\n", resp[i].val_status,
                                 p_val_error(resp[i].val_status));
                  }
          }

          return 0;
 }

=head1 COPYRIGHT

Copyright 2004-2006 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the DNSSEC-Tools package for details.

=head1 AUTHORS

Abhijit Hayatnagarkar, Suresh Krishnaswamy.

=head1 SEE ALSO

B<res_query(3)>

B<get_context(3)>, B<val_getaddrinfo(3)>, B<val_gethostbyname(3)>

I<p_val_error>, I<val_istrusted>

B<libval(3)>

http://dnssec-tools.sourceforge.net

=cut
