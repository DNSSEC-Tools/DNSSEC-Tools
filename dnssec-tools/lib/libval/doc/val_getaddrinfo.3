.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "val_getaddrinfo 3"
.TH val_getaddrinfo 3 "2005-08-26" "perl v5.8.5" "Programmer's Manual"
.SH "NAME"
val_getaddrinfo, val_x_getaddrinfo, val_get_addrinfo_dnssec_status,
val_dupaddrinfo, val_freeaddrinfo \- get DNSSEC\-validated network address
and service translation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <validator.h>
.Ve
.PP
.Vb 3
\&  int val_getaddrinfo(const char *nodename, const char *servname,
\&                    const struct addrinfo *hints,
\&                    struct addrinfo **res);
.Ve
.PP
.Vb 4
\&  int val_x_getaddrinfo(const struct val_context *ctx,
\&                    const char *nodename, const char *servname,
\&                    const struct addrinfo *hints,
\&                    struct addrinfo **res);
.Ve
.PP
.Vb 1
\&  int val_get_addrinfo_dnssec_status(const struct addrinfo *ainfo);
.Ve
.PP
.Vb 1
\&  struct addrinfo* val_dupaddrinfo(const struct addrinfo *ainfo);
.Ve
.PP
.Vb 1
\&  void val_freeaddrinfo(struct addrinfo *ainfo);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fI\fIval_getaddrinfo()\fI\fR is a DNSSEC-aware version of \fI\fIgetaddrinfo\fI\|(3)\fR.  It
performs \s-1DNSSEC\s0 validation of \s-1DNS\s0 queries.  It returns a network address value
of type \fIaddrinfo\fR.  (See \fI\fIgetaddrinfo\fI\|(3)\fR for more information on
\&\fIaddrinfo\fR.)
.PP
\&\fI\fIval_x_getaddrinfo()\fI\fR performs the same function as \fI\fIval_getaddrinfo()\fI\fR,
but is optimized for multiple calls.  The two routines take the same
parameters, but \fI\fIval_x_getaddrinfo()\fI\fR takes an additional parameter \fIctx\fR,
of type \fIval_context\fR, which passes the validation context for use in call
optimization.  The \fIctx\fR parameter also gives the caller more control over
the resolver and validator policies.  If a \fB\s-1NULL\s0\fR value is passed for the
\&\fIctx\fR parameter, the default validation context is used.  (See
\&\fI\fIget_context\fI\|(3)\fR for information on creating a validation context.)
\&\fI\fIval_getaddrinfo()\fI\fR is equivalent to calling \fI\fIval_x_getaddrinfo()\fI\fR with a
\&\fB\s-1NULL\s0\fR \fIctx\fR parameter.
.PP
\&\fI\fIval_dupaddrinfo()\fI\fR duplicates the \fIaddrinfo\fR structure and its auxiliary
data.  It performs a deep copy; i.e., the internal strings, arrays, and other
structures are also copied.
.PP
\&\fI\fIval_freeaddrinfo()\fI\fR frees a \fIaddrinfo\fR structure, such as those returned
by the \fI\fIval_getaddrinfo()\fI\fR, \fI\fIval_x_getaddrinfo()\fI\fR and \fI\fIval_dupaddrinfo()\fI\fR
functions.
.PP
\&\fI\fIval_get_addrinfo_dnssec_status()\fI\fR extracts the \s-1DNSSEC\s0 validation status
from the returned \fIaddrinfo\fR structure.  This function must be called only
for the values returned from \fI\fIval_getaddrinfo()\fI\fR, \fI\fIval_x_getaddrinfo()\fI\fR,
and \fI\fIval_dupaddrinfo()\fI\fR functions.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The \fI\fIval_getaddrinfo()\fI\fR and \fI\fIval_x_getaddrinfo()\fI\fR functions return a value
of type \fIaddrinfo\fR on success, and \fB\s-1NULL\s0\fR on error.  The memory for the
returned value is dynamically allocated by these functions.  Hence, the caller
must only call the \fI\fIval_freeaddrinfo()\fI\fR function on the returned value in
order to avoid memory leaks.
.PP
The \fI\fIval_get_addrinfo_dnssec_status()\fI\fR function returns the result of the
\&\s-1DNSSEC\s0 validation.  The possible values for the \s-1DNSSEC\s0 status are given in
\&\fBval_errors.h\fR.
.PP
The \fI\fIval_dupaddrinfo()\fI\fR function returns a copy of the specified \fIaddrinfo\fR
structure.  The returned value must be freed using \fI\fIval_freeaddrinfo()\fI\fR to
avoid memory leaks.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 2
\& #include <stdio.h>
\& #include <validator.h>
.Ve
.PP
.Vb 4
\& int main(int argc, char *argv[])
\& {
\&          int dnssec_status = ERROR;
\&          struct addrinfo *ainfo = NULL;
.Ve
.PP
.Vb 4
\&          if (argc < 2) {
\&                  printf("Usage: %s <hostname>\en", argv[0]);
\&                  exit(1);
\&          }
.Ve
.PP
.Vb 1
\&          ainfo = val_getaddrinfo(argv[1]);
.Ve
.PP
.Vb 2
\&          if (ainfo) {
\&                  dnssec_status = val_get_addrinfo_dnssec_status(h);
.Ve
.PP
.Vb 4
\&                  printf("DNSSEC Status = %d [%s]\en", dnssec_status,
\&                         p_val_error(dnssec_status));
\&                  val_freeaddrinfo(h);
\&          }
.Ve
.PP
.Vb 2
\&          return 0;
\& }
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004\-2005 \s-1SPARTA\s0, Inc.  All rights reserved.
See the \s-1COPYING\s0 file included with the DNSSEC-Tools package for details.
.SH "AUTHORS"
.IX Header "AUTHORS"
Abhijit Hayatnagarkar
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgethostbyname\fR(3)
.PP
\&\fI\fIget_context\fI\|(3)\fR, \fI\fIval_duphostent\fI\|(3)\fR, \fI\fIval_freehostent\fI\|(3)\fR,
\&\fI\fIval_gethostbyname\fI\|(3)\fR, \fI\fIval_query\fI\|(3)\fR, \fI\fIval_x_gethostbyname\fI\|(3)\fR,
\&\fI\fIval_x_query\fI\|(3)\fR
.PP
\&\fIp_val_error\fR,
.PP
http://dnssec\-tools.sourceforge.net
