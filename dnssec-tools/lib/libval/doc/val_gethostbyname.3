.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "val_gethostbyname 3"
.TH val_gethostbyname 3 "2006-01-16" "perl v5.8.6" "Programmer's Manual"
.SH "NAME"
val_gethostbyname, val_gethostbyname2, val_gethostbyname_r,
val_gethostbyname2_r \- get DNSSEC\-validated network host entry
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <validator.h>
.Ve
.PP
.Vb 4
\&  extern int h_errno;
\&  struct hostent *val_gethostbyname(const val_context_t *ctx,
\&                                    const char *name,
\&                                    val_status_t *val_status);
.Ve
.PP
.Vb 4
\&  struct hostent *val_gethostbyname2(const val_context_t *ctx,
\&                                     const char *name,
\&                                     int af,
\&                                     val_status_t *val_status);
.Ve
.PP
.Vb 8
\&  int val_gethostbyname_r(const val_context_t *ctx,
\&                          const char *name,
\&                          struct hostent *ret,
\&                          char *buf,
\&                          size_t buflen,
\&                          struct hostent **result,
\&                          int *h_errnop,
\&                          val_status_t *val_status);
.Ve
.PP
.Vb 9
\&  int val_gethostbyname2_r(const val_context_t *ctx,
\&                           const char *name,
\&                           int af,
\&                           struct hostent *ret,
\&                           char *buf,
\&                           size_t buflen,
\&                           struct hostent **result,
\&                           int *h_errnop,
\&                           val_status_t *val_status);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fB\f(BIval_gethostbyname()\fB\fR, \fB\f(BIval_gethostbyname2()\fB\fR, \fB\f(BIval_gethostbyname_r()\fB\fR
and \fB\f(BIval_gethostbyname2_r()\fB\fR functions are DNSSEC-aware versions of the
\&\fB\f(BIgethostbyname\fB\|(3)\fR, \fB\f(BIgethostbyname2\fB\|(3)\fR, \fBgethostbyname_r\fR and
\&\fBgethostbyname2_r\fR functions respectively.  They performs \s-1DNSSEC\s0 validation
of \s-1DNS\s0 queries.  They return a network host entry value of type
\&\fIstruct hostent\fR.  (See \fB\f(BIgethostbyname\fB\|(3)\fR for more information on type
\&\fIstruct hostent\fR).
.PP
The \fB\f(BIval_gethostbyname()\fB\fR and \fB\f(BIval_gethostbyname_r()\fB\fR functions support only
IPv4 addresses, whereas \fB\f(BIval_gethostbyname2()\fB\fR and \fBval_gethostbyname2_r\fR
support both IPv4 and IPv6 addresses.
.PP
The \fB\f(BIval_gethostbyname_r()\fB\fR and \fB\f(BIval_gethostbyname2_r()\fB\fR are reentrant
versions, and can be safely used in multi-threaded applications.
.PP
The \fIctx\fR parameter specifies the validation context which can be set to \s-1NULL\s0
for default values.  The caller can use it to control the resolver and
validator policies.  Using a non-NULL validator context over multiple calls
can also provide some optimization.  (See \fB\f(BIget_context()\fB\fR for information on
creating a validation context.)
.PP
The \fB\f(BIval_gethostbyname()\fB\fR and \fB\f(BIval_gethostbyname2()\fB\fR functions set the
global h_errno variable to return the resolver error code.  The reentrant
versions \fB\f(BIval_gethostbyname_r()\fB\fR and \fB\f(BIval_gethostbyname2_r()\fB\fR use the
\&\fIh_errnop\fR parameter to return this value.  This ensures
thread safety, by avoiding the global \fIh_errno\fR variable.  \fIh_errnop\fR must
not be \fB\s-1NULL\s0\fR.  (See the man page for \fB\f(BIgethostbyname\fB\|(3)\fR for possible values
of \fIh_errno\fR.)
.PP
The \fIname\fR, \fIaf\fR, \fIret\fR, \fIbuf\fR, \fIbuflen\fR and \fIresult\fR parameters have
the same meaning and syntax as the corresponding parameters for the original
\&\fBgethostbyname*()\fR functions.  Please see the manual page for
\&\fB\f(BIgethostbyname\fB\|(3)\fR for more details about these parameters.
.PP
The \fIval_status\fR parameter is used to return the validator error code.  The
\&\fB\f(BIval_istrusted()\fB\fR function can be used to determine if this error code
represents a positive trust value.  \fIval_status\fR must not be \fB\s-1NULL\s0\fR.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
The \fB\f(BIval_gethostbyname()\fB\fR and \fB\f(BIval_gethostbyname2()\fB\fR functions return a
pointer to a \fIhostent\fR structure when they can resolve the given host name
(with or without \s-1DNSSEC\s0 validation), and \fB\s-1NULL\s0\fR on error.  The memory for
the returned value is may be statically allocated by these two functions.
Hence, the caller must not free the memory for the returned value.
.PP
The \fB\f(BIval_gethostbyname_r()\fB\fR and \fB\f(BIval_gethostbyname2_r()\fB\fR functions return
0 when they can resolve the given host name (with or without \s-1DNSSEC\s0
validation), and a non-zero error-code on failure.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 3
\& #include <stdio.h>
\& #include <stdlib.h>
\& #include <validator.h>
.Ve
.PP
.Vb 4
\& int main(int argc, char *argv[])
\& {
\&          int val_status;
\&          struct hostent *h = NULL;
.Ve
.PP
.Vb 4
\&          if (argc < 2) {
\&                  printf("Usage: %s <hostname>\en", argv[0]);
\&                  exit(1);
\&          }
.Ve
.PP
.Vb 7
\&          h = val_gethostbyname(NULL, argv[1], &val_status);
\&          printf("h_errno = %d [%s]\en", h_errno,
\&                 hstrerror(h_errno));
\&          if (h) {
\&                  printf("Validation Status = %d [%s]\en", val_status,
\&                         p_val_error(val_status));
\&          }
.Ve
.PP
.Vb 2
\&          return 0;
\& }
.Ve
.SH "NOTES"
.IX Header "NOTES"
The current versions of these functions do not read the order-of-look-up from
\&\fB/etc/hosts.conf\fR.  This functionality will be provided in future versions. 
At present, the default order is set to consult the \fB/etc/hosts\fR file first,
and then query \s-1DNS\s0.
.PP
The current versions of these functions do not support \s-1NIS\s0 lookups.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004\-2005 \s-1SPARTA\s0, Inc.  All rights reserved.
See the \s-1COPYING\s0 file included with the DNSSEC-Tools package for details.
.SH "AUTHORS"
.IX Header "AUTHORS"
Abhijit Hayatnagarkar, Suresh Krishnaswamy.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fB\f(BIgethostbyname\fB\|(3)\fR, \fB\f(BIgethostbyname2\fB\|(3)\fR, \fB\f(BIgethostbyname_r\fB\|(3)\fR,
\&\fB\f(BIgethostbyname2_r\fB\|(3)\fR
.PP
\&\fB\f(BIget_context\fB\|(3)\fR, \fB\f(BIval_getaddrinfo\fB\|(3)\fR, \fB\f(BIfree_val_addrinfo\fB\|(3)\fR,
\&\fB\f(BIval_query\fB\|(3)\fR 
.PP
\&\fB\f(BIp_val_error()\fB\fR, \fB\f(BIval_istrusted()\fB\fR
.PP
http://dnssec\-tools.sourceforge.net
