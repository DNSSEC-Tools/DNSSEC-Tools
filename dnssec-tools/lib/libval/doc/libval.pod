=pod
                                                                                
=head1 NAME

resolve_n_check, free_query_chain, free_assertion_chain, 
free_result_chain - query and validate answers from a DNS name server

get_context, destroy_context, switch_effective_policy - manage validator context

p_val_error - display error information

=head1 SYNOPSIS

#include <validator.h>

int resolve_n_check( val_context_t          *context,
                     u_char                 *domain_name_n,
                     const u_int16_t        type,
                     const u_int16_t        class,
                     const u_int8_t         flags,
                     struct query_chain     **queries,
                     struct assertion_chain **assertions,
                     struct val_result      **results);

void free_query_chain(struct query_chain **queries);

void free_assertion_chain(struct assertion_chain **assertions);

void free_result_chain(struct val_result **results);

int get_context(const char *label, val_context_t **newcontext);

int switch_effective_policy(val_context_t *ctx, const char *label);

void destroy_context(val_context_t *context);

char *p_val_error(int valerrno);

=head1 DESCRIPTION

The B<resolve_n_check()> method can be used to query a set of name
servers for the <I<domain_name_n>, I<type>, I<class>> tuple and 
to verify and validate the response. Verification is the step of 
checking the RRSIGs and validation includes performing 
verification up the chain of trust all the way to a trust 
anchor. The I<domain_name_n> parameter is the queried name in 
DNS wire format. The conversion from host format to DNS wire format 
can be done using the  B<ns_name_pton()> function exported by 
the libsres library.

Answers returned by B<resolve_n_check()> are made available 
in the *I<results> array.  Each answer is a 
distinct RRset; multiple RRs within the RRset are
treated as the same answer. Multiple answers are possible when
I<type> is C<ns_t_any> or when a proof of non-existence is 
returned in which case RRsets of type C<ns_t_nsec> and 
C<ns_t_soa> are also returned. 

Individual elements in *I<results> point to corresponding 
elements in the **I<assertions> linked list. The assertions contain
the actual RRsets returned by the name server in response to the
query. The **I<queries> linked-list provides a handle to
the query that returned the data present within an assertion.

The three dimensions of results, assertions and queries allow the
invoking application to select the level of detail it needs to 
investigate the DNSSEC validation status of a particular response. 
Most applications would only require *I<results> since this provides a 
single error code for representing the authenticity of returned 
data. Other more intrusive applications such as a DNSSEC 
troubleshooting utility may look at the individual assertions 
to identify what particular component in the chain-of-trust led 
to validation failure if any.

*I<queries>, *I<assertions> and *I<results> must be initially set
to NULL.  The libval library internally allocates memory for these 
parameters  so they must be freed by the invoking application 
using the B<free_query_chain()>, B<free_assertion_chain()> 
and B<free_result_chain()> interfaces respectively. 

The first parameter to B<resolve_n_check()> is the validator context. 
Applications can create a new validator context using the
B<get_context()> method. This method parses the resolver and validator 
configuration files and creates the handle I<newcontext> to this parsed 
information. Information stored as part of validator context includes 
the validation policy and resolver policy. Validator policy is 
applied hierarchically based on the name used to identify a particular 
policy fragment. 

C<browser> and C<mozilla.browser> are examples of a 
hierarchical ordering of policy, where the configuration 
under the identifier of C<mozilla.browser> may be used to override 
generic browser policy with mozilla-specific options. Applications may
switch their default policy to a policy that lies below (C<mozilla:browser> 
lies below C<browser>) the originally defined label using the 
B<switch_effective_policy()> method. In both of the B<resolve_n_check()> 
and B<switch_effective_policy()>, the I<label> parameter is a simple string that
must match with another string that appears as the policy definition
identifier in the validator configuration file. It is a simple text string
with the C<:> character used as the delimiter between two levels in the
hierarchy. The C<:> label by itself refers to the default policy in the 
configuration file. C<NULL> may also be used to represent the label for
the default policy.


=head1 DATA STRUCTURES

=over 4

=item I<struct val_result> { 

    struct assertion_chain *as;
    int status;
    int trusted;
    struct val_result *next;

};


=over 4

=item I<as> 

The assertion pointed to by the result. 

=item I<trusted> 

If set, this indicates that the chain-of-trust for this answer led up
to trust anchor. This field is used internally and must not be used
by applications. It may go away in the future.

=item I<next> 

Used internally and must not be used by applications. 
It will go away in the future.

=item I<status> 

Can be one of the following:


	BARE_RRSIG
		No DNSSEC validation possible, query was for an RRSIG.

	VALIDATE_SUCCESS
		Answer received and validated successfully.
		
	BOGUS_UNPROVABLE 
		Could not build a chain of trust for a failure condition.

	BOGUS_PROVABLE
		Failure condition that was provable.

	VALIDATION_ERROR
		Did not have sufficient or relevant data to complete validation, 
		or encountered some DNS error.
		
	NONEXISTENT_NAME        
		No name present, trusted, and proof present.

	NONEXISTENT_TYPE
		No type exists for name, trusted, and proof present.

	INCOMPLETE_PROOF
		Proof does not have all required components to prove non-existence.

	BOGUS_PROOF
		Proof of non-existence cannot be validated.

	INDETERMINATE_DS
		Can't prove that the DS is trusted.

	INDETERMINATE_PROOF
		Some intermediate Proof of non-existence obtained
		dont know if answer exists and proof is bogus
		or answer is bogus.

	INDETERMINATE_ERROR
		Sequence of errors.

	INDETERMINATE_TRUST
		Don't know if trust is absent or answer is bogus. 

	INDETERMINATE_ZONE
		Dont know if zone is unsigned or sigs have been stripped.


Error values in **I<results> returned by the validator can be displayed 
in a more user friendly format using the B<p_val_error()> method.

=back

=back

=over 4

=item I<struct assertion_chain> {

    u_int16_t ac_state;
    struct rrset_rec *ac_data;
    struct query_chain *ac_pending_query;
    struct assertion_chain *ac_more_data;
    struct assertion_chain *ac_trust;
    struct assertion_chain *ac_next;
};

=over 4

=item I<ac_state> 

This contains the validation state of the assertion. Upon completion 
of the B<resolve_n_check()> call this field will contain the error
or success code for DNSSEC validation over the current assertion. This
field may contain the following values:

	DNSKEY_NOMATCH
		RRSIG was created by a DNSKEY that does not exist in the apex keyset.

	WRONG_LABEL_COUNT
		The number of labels on the signature is greater than the the count given in
		the RRSIG RDATA.

	SECURITY_LAME
		RRSIG created by a key that does not exist in the parent DS record set.

	NOT_A_ZONE_KEY
		The key used to verify the RRSIG is not a zone key, but some other key such as
		the public key used for TSIG.

	RRSIG_NOTYETACTIVE
		The RRSIG's inception time is in the future.

	RRSIG_EXPIRED
		The RRSIG has expired.		

	ALGO_NOT_SUPPORTED
		Algorithm in DNSKEY or RRSIG or DS is not supported.

	UNKNOWN_ALGO
		Unknown DNSKEY or RRSIG or DS algorithm
	
	RRSIG_VERIFIED
		The RRSIG verified successfully.

	RRSIG_VERIFY_FAILED
		The RRSIG did not verify.
	
	NOT_VERIFIED
		Different RRSIGs failed for different reasons

	KEY_TOO_LARGE
		The zone is using a key size that is too large as per local policy.

	KEY_TOO_SMALL
		The zone is using a key size that is too small as per local policy

	KEY_NOT_AUTHORIZED
		The zone is using a key that is not authorized as per local policy.
	
	ALGO_REFUSED
		Algorithm in DNSKEY or RRSIG or DS is not allowed as per local policy

	CLOCK_SKEW
		Verified but with clock skew taken into accoun

	DUPLICATE_KEYTAG
		Two DNSKEYs have the same keytag

	NO_PREFERRED_SEP
		There is no DNSKEY in the parent DS set that our local policy allows us to
		traverse

	WRONG_RRSIG_OWNER
		The RRSIG and the data that it purportedly covers have differing notions of
		owner name

	RRSIG_ALGO_MISMATCH
		 The DNSKEY and RRSIG pair have a mismatch in their algorithm.

	KEYTAG_MISMATCH
		 The DNSKEY and RRSIG pair have a mismatch in the key tags.
		
	VERIFIED
		The signature verified OK.

	LOCAL_ANSWER
		Answer was obtained locally. This is currently not implemented.

	TRUST_KEY
		The key present in this assertion is trusted.

	TRUST_ZONE
		The zone in this assertion is trusted.

	BARE_RRSIG
		Query was for an RRSIG.

In cases where data is insufficient to generate a validation result, 
I<ac_state> may also contain the following status values. The final 
validation result in such circumstances is VALIDATION_ERROR.

	DATA_MISSING
		No data was returned in the response. Based on what data was queried
		for this also covers cases where the DNSKEY or DS are missing.
	
	RRSIG_MISSING
		Could not find an RRSIG that matched the query type.

	NO_TRUST_ANCHOR
		No trust anchor at current level and no possiblity
		for finding any up this tree.

	UNTRUSTED_ZONE
		The zone has been configured as un-trusted.
	
	IRRELEVANT_PROOF
		An NSEC received does not contribute towards proving
		non-existence.

	DNSSEC_VERSION_ERROR
		DNSSEC version error. Not implemented.		

	TOO_MANY_LINKS
		Too many links were traversed in going up the chain-of-trust. 
		Not implemented.

	UNKNOWN_DNSKEY_PROTO
		The protocol field in the DNSKEY is not set to 3 (DNSSEC).	

	FLOOD_ATTACK_DETECTED
		Detected multiple (conflicting) answers for the same query. 
		Possible spoofing attack. Not implemented.

	CONFLICTING_ANSWERS	
		Multiple answers received for a query which conflict.

	SR_REFERRAL_ERROR
		Some error encountered while following referrals.

	SR_MISSING_GLUE
		Glue was missing

	All other resolver errors returned by libsres(3)


=item I<ac_data> 

This field contains a pointer to an RRset obtained from the DNS response.

=item I<ac_pending_query> 

This field contains a pointer to an element in the **I<queries> 
linked list. In order to validate a resource record, the
validator may have to send additional queries for data not returned 
as part of the original answer. Dependencies such as these are 
reflected in the I<ac_pending_query> field. 

=item I<ac_more_data> 

Certain queries may return more than one RRset as part of the answer.
This field points to the next RRset in the DNS response.

=item I<ac_trust> 

This field points to an assertion that either contains a DNSKEY RRset that
can be used to verify RRSIGs over the current record, or contains a DS
RRset that can be used to build the chain-of-trust towards a trust
anchor. 

=item I<ac_next> 

This field points to the next element in the **I<assertions> linked-list.

=back

=back

=over 4

=item I<struct query_chain> {

    u_char qc_name_n[MAXCDNAME];
    u_int16_t qc_type_h;
    u_int16_t qc_class_h;
    u_int16_t qc_state; /* DOS, TIMED_OUT, etc */
    struct name_server *qc_ns_list;
    struct delegation_info *qc_referral;
    int qc_trans_id;
    struct assertion_chain *qc_as;
    struct query_chain *qc_next;
};

=over 4

=item I<qc_name_n>

Contains the queried name in DNS wire format.

=item I<qc_type_h>

Contains the queried type.

=item I<qc_class_h>

Contains the queried class.

=item I<qc_state>

This field contains the current status of the query. Upon completion
of the B<resolve_n_check()> call this field will either be Q_ANSWERED, 
which says that the query was answered, and the returned response in present in
he assertion pointed to by I<qc_as>, or a value greater than Q_ERROR_BASE in which
case the error value is one of those returned by the resolver as defined in 
B<libsres(3)> offset by Q_ERROR_BASE. For example, if the resolver returned 
an error of SR_SERVFAIL, this value would contain the value 
Q_ERROR_BASE+SR_SERVFAIL.

=item I<qc_ns_list>

Contains the list of name servers towards which the query is directed.
Details on the I<struct name_server> structure may be found in the 
man page for B<libsres(3)>

=item I<qc_referral>

Points to referral information. This field is used internally and may
go away in future. 

=item I<qc_trans_id>

The identifier that the resolver uses to keep track of the query. Additional
information about the query transaction ID may be found in the man page 
for B<libsres(3)>.

=item I<qc_as>

This field points to an assertion that contains the response returned by 
the DNS name server for this query.

=item I<qc_next>

Points to the next element in the **I<queries> linked-list.

=back

=back 

=head1 RETURN VALUES

=over 4

=item B<resolve_n_check()> can return one of the following values:

=over 4

=item NO_ERROR

No error was encountered.

=item ERROR   

Generic error encountered.

=item NOT_IMPLEMENTED 

Functionality not yet implemented. 

=item OUT_OF_MEMORY 

Could not allocate memory.

=item BAD_ARGUMENT

Bad arguments passed as parameters.

=item INTERNAL_ERROR

Encountered some internal error.

=item NO_PERMISSION 

No permission to perform operation. Currently not implemented.

=item RESOURCE_UNAVAILABLE

Some resource (crypto possibly) was unavailable. Currently not implemented.

=item NO_SPACE

Not enough space in *I<results> for storing all available answers.

=back

=back

=over 4

=item B<get_context()> can return one of the following values:

=over 4

=item NO_ERROR

No error was encountered.

=item OUT_OF_MEMORY 

Could not allocate memory.

=item CONF_PARSE_ERROR

Error in parsing some configuration file.

=item NO_POLICY

Could not find one or both of the configuration files 
/etc/resolv.conf and /etc/dnsval.conf.

=back

=back

=over 4

=item B<switch_effective_policy()> can return one of the following values:

=over 4

=item NO_ERROR

No error was encountered.

=item OUT_OF_MEMORY 

Could not allocate memory.

=item UNKNOWN_LOCALE

Could not identify the policy to which we need to switch.

=back

=back

=head1 FILES

The validator library reads configuration information from two separate files,
/etc/resolv.conf and /etc/dnsval.conf.

=over 4

=item /etc/resolv.conf

Only the "nameserver" option is supported in the resolv.conf file. This option
is used to specify the IP address of the name server to which queries must be
sent by default. For example,

nameserver 10.0.0.1

=item /etc/dnsval.conf

This file contains a sequence of the following "policy-fragments":

<label> <KEYWORD> <additional-data>; 

label is the context to which this policy applies
and KEYWORD is the specific policy component that is 
being configured. The format of additional-data depends on the 
keyword specified.

Policy fragments are indexed by the label and keyword. If multiple
policy fragments are defined for the same label and keyword combination
then the last definition in the file is used.  

Currently two different keywords are specified:

=over 4

=item trust-anchor

Specifies the trust anchors for a sequence of zones. The additional
data portion for this keyword is a sequence of the zone name and a 
quoted string containing the RDATA portion for the trust anchor's 
DNSKEY. An example is:

=over 4
	
=item mozilla trust-anchor

=over 4

=item fruits.netsec.tislabs.com.   

"257 3 5 AQO8XS4y9r77X9SHBmrxMoJf1Pf9AT9Mr/L5BBGtO9/e9f/zl4FFgM2l B6M2XEm6mp6mit4tzpB/sAEQw1McYz6bJdKkTiqtuWTCfDmgQhI6/Ha0 EfGPNSqnY 99FmbSeWNIRaa4fgSCVFhvbrYq1nXkNVyQPeEVHkoDNCAlr qOA3lw=="

=item netsec.tislabs.com.         

"257 3 5 AQO8XS4y9r77X9SHBmrxMoJf1Pf9AT9Mr/L5BBGtO9/e9f/zl4FFgM2l B6M2XEm6mp6mit4tzpB/sAEQw1McYz6bJdKkTiqtuWTCfDmgQhI6/Ha0 EfGPNSqnY 99FmbSeWNIRaa4fgSCVFhvbrYq1nXkNVyQPeEVHkoDNCAlr qOA3lw=="

;

=back

=back

=item zone-security-expectation

Specifies the local security expection for a zone. The additional
data portion for this keyword is a sequence of the zone name and 
its trust status - trusted or untrusted. An example is:

mozilla zone-security-expectation wesh.fruits.netsec.tislabs.com untrusted;		 


=back


=back

=head1 CURRENT STATUS

There is currently no support for IPv6. 
The library is not thread-safe. 
The caching functionality is very basic and no timeout logic currently exists. 
There are a number of feature enhancements that still remain to be done.

=head1 COPYRIGHT
                                                                                
Copyright 2004-2005 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the dnssec-tools package for details.

=head1 SEE ALSO

B<libsres(3)>

B<val_x_query(3)>

http://dnssec-tools.sourceforge.net

=cut	
