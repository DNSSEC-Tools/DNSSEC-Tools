=pod

=head1 NAME

val_gethostbyname, val_gethostbyname2, val_gethostbyname_r,
val_gethostbyname2_r - get DNSSEC-validated network host entry

=head1 SYNOPSIS

  #include <validator.h>

  extern int h_errno;
  struct hostent *val_gethostbyname(const val_context_t *ctx,
                                    const char *name,
                                    val_status_t *val_status);

  struct hostent *val_gethostbyname2(const val_context_t *ctx,
                                     const char *name,
                                     int af,
                                     val_status_t *val_status);

  int val_gethostbyname_r(const val_context_t *ctx,
                          const char *name,
                          struct hostent *ret,
                          char *buf,
                          size_t buflen,
                          struct hostent **result,
                          int *h_errnop,
                          val_status_t *val_status);

  int val_gethostbyname2_r(const val_context_t *ctx,
                           const char *name,
                           int af,
                           struct hostent *ret,
                           char *buf,
                           size_t buflen,
                           struct hostent **result,
                           int *h_errnop,
                           val_status_t *val_status);

=head1 DESCRIPTION

The B<val_gethostbyname()>, B<val_gethostbyname2()>, B<val_gethostbyname_r()>
and B<val_gethostbyname2_r()> functions are DNSSEC-aware versions of the
B<gethostbyname(3)>, B<gethostbyname2(3)>, B<gethostbyname_r> and
B<gethostbyname2_r> functions respectively.  They performs DNSSEC validation
of DNS queries.  They return a network host entry value of type
I<struct hostent>.  (See B<gethostbyname(3)> for more information on type
I<struct hostent>).

The B<val_gethostbyname()> and B<val_gethostbyname_r()> functions support only
IPv4 addresses, whereas B<val_gethostbyname2()> and B<val_gethostbyname2_r>
support both IPv4 and IPv6 addresses.

The B<val_gethostbyname_r()> and B<val_gethostbyname2_r()> are reentrant
versions, and can be safely used in multi-threaded applications.

The I<ctx> parameter specifies the validation context which can be set to NULL
for default values.  The caller can use it to control the resolver and
validator policies.  Using a non-NULL validator context over multiple calls
can also provide some optimization.  (See B<get_context()> for information on
creating a validation context.)

The B<val_gethostbyname()> and B<val_gethostbyname2()> functions set the
global h_errno variable to return the resolver error code.  The reentrant
versions B<val_gethostbyname_r()> and B<val_gethostbyname2_r()> use the
I<h_errnop> parameter to return this value.  This ensures
thread safety, by avoiding the global I<h_errno> variable.  I<h_errnop> must
not be B<NULL>.  (See the man page for B<gethostbyname(3)> for possible values
of I<h_errno>.)

The I<name>, I<af>, I<ret>, I<buf>, I<buflen> and I<result> parameters have
the same meaning and syntax as the corresponding parameters for the original
B<gethostbyname*()> functions.  Please see the manual page for
B<gethostbyname(3)> for more details about these parameters.

The I<val_status> parameter is used to return the validator error code.  The
B<val_istrusted()> function can be used to determine if this error code
represents a trusted value.  I<val_status> must not be B<NULL>.

=head1 RETURN VALUE

The B<val_gethostbyname()> and B<val_gethostbyname2()> functions return a
pointer to a I<hostent> structure when they can resolve the given host name
(with or without DNSSEC validation), and B<NULL> on error.  The memory for
the returned value is may be statically allocated by these two functions.
Hence, the caller must not free the memory for the returned value.

The B<val_gethostbyname_r()> and B<val_gethostbyname2_r()> functions return
0 when they can resolve the given host name (with or without DNSSEC
validation), and a non-zero error-code on failure.

=head1 EXAMPLE
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <validator.h>
 
 int main(int argc, char *argv[])
 {
          int val_status;
          struct hostent *h = NULL;

          if (argc < 2) {
                  printf("Usage: %s <hostname>\n", argv[0]);
                  exit(1);
          }
 
          h = val_gethostbyname(NULL, argv[1], &val_status);
          printf("h_errno = %d [%s]\n", h_errno,
                 hstrerror(h_errno));
          if (h) {
                  printf("Validation Status = %d [%s]\n", val_status,
                         p_val_error(val_status));
          }

          return 0;
 }

=head1 NOTES

The current versions of these functions do not read the order-of-look-up from
B</etc/hosts.conf>.  This functionality will be provided in future versions. 
At present, the default order is set to consult the B</etc/hosts> file first,
and then query DNS.

The current versions of these functions do not support NIS lookups.

=head1 COPYRIGHT

Copyright 2004-2006 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the DNSSEC-Tools package for details.

=head1 AUTHORS

Abhijit Hayatnagarkar, Suresh Krishnaswamy.

=head1 SEE ALSO

B<gethostbyname(3)>, B<gethostbyname2(3)>, B<gethostbyname_r(3)>,
B<gethostbyname2_r(3)>

B<get_context(3)>, B<val_getaddrinfo(3)>, B<free_val_addrinfo(3)>,
B<val_query(3)> 

B<p_val_error()>, B<val_istrusted()>

http://dnssec-tools.sourceforge.net

=cut
