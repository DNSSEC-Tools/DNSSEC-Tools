# Copyright 2004 Sparta, Inc.  All rights reserved.
# See the COPYING file included with the dnssec-tools package for details.
#
# This file checks aspects of parent/child relationships
#


name: DNS_MULTIPLE_NS
level: 2
minnsrecords: 2
help: minnsrecords: minimum number of NS records that must be present for a delegation
ruletype: name
class: Warning
test:
  return "Only " . ($#{$_[0]->{'NS'}}+1) . 
     " NS record(s) for $_[2] found, but at least " .
     $_[1]->{'minnsrecords'} . " are suggested/required"
        if (exists($_[0]->{'NS'}) && 
           $#{$_[0]->{'NS'}}+1 < $_[1]->{'minnsrecords'});

name: DNSSEC_SUB_NOT_SECURE
level: 3
ruletype: name
test:
  "sub-domain $_[2] is not securely delegated.  It is missing a DS record."
  if ($current_domain ne $_[2]                         &&  # not the root
      exists($_[0]->{'NS'}) && $#{$_[0]->{'NS'}} > -1  &&  # is a sub
      exists($_[0]->{'RRSIG'})                         &&  # DS||NSEC signed
      !exists($_[0]->{'DS'})                               # No DS
     );

name: DNSSEC_DNSKEY_PARENT_HAS_VALID_DS
level: 4
live: true
type: DNSKEY
test:
  my $keyrr = $_[0];
  $keyrr->setkeytag();
  my $dsrr = create Net::DNS::RR::DS($keyrr);
  my @DSs = live_query($keyrr->name, "DS");
  return "Parent zone has no DS records for $keyrr->{name}" if ($#DSs == -1);
  map { print $_->verify($keyrr),"\n"; return if ($_->verify($keyrr)); } @DSs;
  return "DNSKEY record for $keyrr->{name} (keytag = " .
         $keyrr->keytag . 
         ") does not have a matching DS record in the live parent zone";

# XXX: check parent has DS record for this zone

# XXX: check that child has key matching DS records in this zone.

# XXX: check that a parent has a DS record matching every DNSKEY
