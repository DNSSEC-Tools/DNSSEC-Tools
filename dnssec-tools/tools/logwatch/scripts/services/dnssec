#!/usr/bin/perl

use strict;

my $detail = $ENV{'LOGWATCH_DETAIL_LEVEL'};
my $daterange = $ENV{'LOGWATCH_DATE_RANGE'};
my $tempdir = $ENV{'LOGWATCH_TEMP_DIR'};
my $debuglevel = $ENV{'LOGWATCH_DEBUG'};

#print "\nDetail level = " . $detail . "\n";
#print "\nDate range = " . $daterange . "\n";
#print "\nTemp dir = " . $tempdir . "\n";
#print "\nDebug level = " . $debuglevel . "\n";
my $valComplete = 0;
my $resValOK = 0;
my $nonextValOK = 0;
my $valFail;
my $valOK;
my $attPosRespVal;
my $attNegRespVal;
my $attInsecurityProof;
my $insecurityProofFail;
my $rdataFail;
my $rdataSuccess;
my $markingAsSecure;
my $nonExtProof;
my $noValidSig;

while (defined(my $ThisLine = <STDIN>)) {
   if ($ThisLine =~ /validation completion event/) {
      $valComplete++;
   } elsif ($ThisLine =~ /validation OK/) {
      $resValOK++;
   } elsif ($ThisLine =~ /nonexistence validation OK/) {
      $nonextValOK++;
   } elsif ($ThisLine =~ /validation failed/) {
      $valFail++;
   } elsif ($ThisLine =~ /validation OK/) {
      $valOK++;
   } elsif ($ThisLine =~ /attempting positive response validation/) {
      $attPosRespVal++;
   } elsif ($ThisLine =~ /attempting negative response validation/) {
      $attNegRespVal++;
   } elsif ($ThisLine =~ /attempting insecurity proof/) {
      $attInsecurityProof++;
   } elsif ($ThisLine =~ /insecurity proof failed/) {
      $insecurityProofFail++;
   } elsif ($ThisLine =~ /verify rdataset: RRSIG failed to verify/) {
      $rdataFail++;
   } elsif ($ThisLine =~ /verify rdataset: success/) {
      $rdataSuccess++;
   } elsif ($ThisLine =~ /marking as/) {
      $markingAsSecure++;
   } elsif ($ThisLine =~ /nonexistence proof found/) {
      $nonExtProof++;
   } elsif ($ThisLine =~ /validating (\S+)\s+(\S+): no valid signature found/) {
# $1 is the host, $2 is the type of query
      print "No valid signature found for host $1, query type $2\n";
      $noValidSig++;
   }
}

if ($noValidSig > 0) {
   print "No Valid Signature received " . $noValidSig . " times\n";
}
if ($detail >= 5) {
   if ($markingAsSecure > 0) {
      print "Marking as secure " . $markingAsSecure . " times\n";
   }
   if ($rdataSuccess > 0) {
      print "Verified rdataset succeeded " . $rdataSuccess . " times\n";
   }
   if ($rdataFail > 0) {
      print "Verified rdataset failed " . $rdataFail . " times\n";
   }
   if ($insecurityProofFail > 0) {
      print "Insecurity proof failed " . $insecurityProofFail . " times\n";
   }
   if ($attInsecurityProof > 0) {
      print "Insecurity proof attempted " . $attInsecurityProof . " times\n";
   }
   if ($valFail > 0) {
      print "Validation failed " . $valFail . " times\n";
   }
   if ($valOK > 0) {
      print "Validation OK " . $valOK . " times\n";
   }
   if ($attPosRespVal > 0) {
      print "Attempted positive response validation " . $attPosRespVal . " times\n";
   }
   if ($attNegRespVal > 0) {
      print "Attempted negative response validation " . $attNegRespVal . " times\n";
   }
   if ($nonExtProof > 0) {
      print "Nonexistence proof found " . $nonExtProof . " times\n";
   }
}
exit (0);

# vi: shiftwidth=3 tabstop=3 et

