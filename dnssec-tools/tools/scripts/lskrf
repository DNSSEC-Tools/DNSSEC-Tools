#!/usr/bin/perl
#
# Copyright 2005 SPARTA, Inc.  All rights reserved.  See the COPYING
# file distributed with this software for details
#
#
# lskrf
#
#	This script lists the keyrecs in a keyrec file.
#

use strict;

use Getopt::Long;

use Net::DNS::SEC::Tools::keyrec;
use Net::DNS::SEC::Tools::tooloptions;

#######################################################################

#
# Data required for command line options.
#
my %options = ();			# Filled option array.
my @opts =
(
	"all",				# List all keyrecs.
	"zones",			# List zone keyrecs.
	"keys",				# List key keyrecs.
	"ksk",				# List KSK keyrecs.
	"zsk",				# List ZSK keyrecs.
	"cur",				# List current key keyrecs.
	"new",				# List new key keyrecs.
	"pub",				# List published key keyrecs.
	"obs",				# List obsolete key keyrecs.

	"ref",				# List referenced key keyrecs.
	"unref",			# List unreferenced key keyrecs.
	"valid",			# List unexpired zone keyrecs.
	"expired",			# List expired zone keyrecs.

	"count",			# Only give a count of matching keyrecs.
	"nodate",			# Don't show the date.
	"terse",			# Give terse output.
	"long",				# Give long output.

	"help",				# Give a usage message and exit.
);

#
# Flag values for the various options.  Variable/option connection should
# be obvious.
#
my $allflag;
my $zonesflag;
my $keysflag;
my $kskflag;
my $zskflag;
my $zcurflag;
my $znewflag;
my $zpubflag;
my $zobsflag;

my $refflag;
my $unrefflag;
my $validflag;
my $expiredflag;

my $cntflag;
my $nodateflag;
my $terse;
my $long;

my $count   = 0;			# Record-match count.

#######################################################################


my @krnames;				# List of keyrecs in the file.

my %zones    = ();			# Names of zone keyrecs.
my %allkeys  = ();			# Names of all keyrecs.
my %kskkeys  = ();			# Names of KSK keyrecs.
my %zskkeys  = ();			# Names of ZSK keyrecs.
my %zcurkeys = ();			# Names of current ZSK keyrecs.
my %znewkeys = ();			# Names of new ZSK keyrecs.
my %zpubkeys = ();			# Names of published ZSK keyrecs.
my %zobskeys = ();			# Names of obsolete ZSK keyrecs.

my $ret;				# Return code from main().

$ret = main();
exit($ret);

#-----------------------------------------------------------------------------
#
# Routine:	main()
#
sub main()
{
	my $argc = @ARGV;		# Number of command line arguments.
	my $errors = 0;			# Total error count.

	#
	# Check our options.
	#
	doopts($argc);

	#
	# Read the keyrec files.
	#
	while($argc > 0)
	{
		getkeyrecs($ARGV[0]);
		shift @ARGV;
		$argc = @ARGV;
	}

	#
	# Give the output.
	#
	showzones()	if($zonesflag);
	showkeys();

	#
	# If the matching-record count should be given, give the count in
	# requested format.
	#
	if($cntflag)
	{
		if($terse)
		{
			print "$count\n";
		}
		else
		{
			my $plural = "s";
			$plural = "" if($count == 1);

			print "$count matching record$plural\n";
		}
	}
	return(0);
}

#-----------------------------------------------------------------------------
#
# Routine:	doopts()
#
# Purpose:	This routine shakes and bakes our command line options.
#		A bunch of option variables are set according to the specified
#		options.  Then a little massaging is done to make sure that
#		the proper actions are taken.  A few options imply others, so
#		the implied options are set if the implying options are given.
#
sub doopts
{
	my $argc = shift;			# Command line argument count.

	#
	# Parse the options.
	#
	GetOptions(\%options,@opts);

	#
	# Set our option variables based on the parsed options.
	#
	$allflag	= $options{'all'}	|| 0;
	$zonesflag	= $options{'zones'}	|| 0;
	$keysflag	= $options{'keys'}	|| 0;
	$kskflag	= $options{'ksk'}	|| 0;
	$zskflag	= $options{'zsk'}	|| 0;
	$zcurflag	= $options{'cur'}	|| 0;
	$znewflag	= $options{'new'}	|| 0;
	$zpubflag	= $options{'pub'}	|| 0;
	$zobsflag	= $options{'obs'}	|| 0;

	$refflag	= $options{'ref'}	|| 0;
	$unrefflag	= $options{'unref'}	|| 0;
	$validflag	= $options{'valid'}	|| 0;
	$expiredflag	= $options{'expired'}	|| 0;

	$cntflag	= $options{'count'}	|| 0;
	$nodateflag	= $options{'nodate'}	|| 0;
	$terse		= $options{'terse'}	|| 0;
	$long		= $options{'long'}	|| 0;

	#
	# Give a usage flag if asked.
	#
	usage() if(defined($options{'help'}));

	#
	# Ensure we were given a keyrec file to check.
	#
	$argc = @ARGV;
	if($argc == 0)
	{
		usage();
		exit(1);
	}

	#
	# If the valid-zone or the expired-zone option was given, but the
	# zones specifier wasn't, we'll assume they want all the zones listed.
	#
	if(($validflag || $expiredflag)	 && !$zonesflag)
	{
		$zonesflag = 1;
	}

	#
	# If the referenced-keys option or the unreferenced-keys option was
	# given, but none of the key specifiers were, then we'll assume
	# they want all the keys listed.
	#
	if(($refflag || $unrefflag)				&&
	   (!$keysflag && !$kskflag  && !$zskflag &&
	    !$zcurflag && !$znewflag && !$zpubflag && !$zobsflag))
	{
		$keysflag = 1;
	}

	#############################################################
	#
	# WARNING:  Code order beyond this point is critical.  Do *NOT* modify
	#	    anything in the rest of this routine if you are an idiot.
	#

	#
	# Select all records if the "-all" option was given.  This option
	# overrides almost everything.
	#
	if($allflag)
	{
		$zonesflag  = 1;
		$keysflag   = 1;

		$refflag     = 0;
		$unrefflag   = 0;
		$validflag   = 0;
		$expiredflag = 0;

	}

	#
	# Set the appropriate keys flags.  The obsolete keys must be
	# explicitly requested.  The all-keys flag won't pick it up.
	#
	if($keysflag)
	{
		$kskflag = 1;
		$zskflag = 1;
	}

	if($zskflag)
	{
		$zcurflag = 1;
		$znewflag = 1;
		$zpubflag = 1;
	}
}

#-----------------------------------------------------------------------------
#
# Routine:	getkeyrecs()
#
# Purpose:	This routine reads the specified keyrec file and puts each
#		keyrec into the appropriate keyrec hash table.  There are
#		hashes for zones, KSK keys, ZSK keys, current ZSKs, new ZSKs,
#		published ZSKs, obsolete ZSKs, and all keys.
#
sub getkeyrecs
{
	my $krfile = shift;			# Keyrec file.

	keyrec_read($krfile);

	@krnames = keyrec_names();

	foreach my $krn (sort(@krnames))
	{
		my $kr;				# Reference to keyrec.
		my %keyrec;			# Keyrec.
		my $type;			# Keyrec's type.

		$kr = keyrec_fullrec($krn);
		%keyrec = %$kr;

		$type = $keyrec{'keyrec_type'};

		if($type eq 'zone')
		{
			$zones{$krn} = $kr;
		}
		elsif($type eq 'ksk')
		{
			$allkeys{$krn} = $kr;
			$kskkeys{$krn} = $kr;
		}
		elsif($type eq 'zskcur')
		{
			$allkeys{$krn} = $kr;
			$zcurkeys{$krn} = $kr;
			$zskkeys{$krn} = $kr;
		}
		elsif($type eq 'zsknew')
		{
			$allkeys{$krn} = $kr;
			$znewkeys{$krn} = $kr;
			$zskkeys{$krn} = $kr;
		}
		elsif($type eq 'zskpub')
		{
			$allkeys{$krn} = $kr;
			$zpubkeys{$krn} = $kr;
			$zskkeys{$krn} = $kr;
		}
		elsif($type eq 'zskobs')
		{
			$zobskeys{$krn} = $kr;
			$zskkeys{$krn} = $kr;
		}
	}
}

#-----------------------------------------------------------------------------
#
# Routine:	showzones()
#
# Purpose:	This routine displays zone data.  It has three output formats:
#
#			normal	A zone label, the zone name, the zone file,
#				and the zone's signing date are displayed.
#
#			terse	The zone name is displayed.
#
#			long	A zone label, the zone name, the zone file,
#				the zone's signing date, and the zone's date
#				of expiry are displayed.
#
#		If one of the zone expiration flags was given then there is
#		also a check made to see if the zone is expired.
#
sub showzones
{
	#
	# Loop through the zone list and give data on the desired zones.
	#
	foreach my $zk (sort(keys(%zones)))
	{
		my $krr = $zones{$zk};
		my %kr = %$krr;

		#
		# Check the zone-validity flags against the zone to see if
		# the record should be displayed.
		#
		if(($validflag	 &&  expiredzone($zk))	||
		   ($expiredflag && !expiredzone($zk)))
		{
			next;
		}

		#
		# Bump the matching-records count.
		#
		$count++;

		#
		# Stay cloaked if only the count of matching records
		# should be given.
		#
		if($cntflag)
		{
			next;
		}

		#
		# Give the appropriate style of output.
		#
		if($terse)
		{
			print "$zk\n";
		}
		elsif($long)
		{
			my $endtime  = $kr{'endtime'};
			my $signsecs = $kr{'keyrec_signsecs'};

			my $exptime  = $signsecs + $endtime;
			my $expstr   = gmtime($exptime);

			print "zone $zk\t$kr{'zonefile'}\t\"$kr{'keyrec_signdate'}\"\t\"$expstr\"\n";
		}
		else
		{
			print "zone $zk\t$kr{'zonefile'}\t\t\"$kr{'keyrec_signdate'}\"\n";
		}
	}
}

#-----------------------------------------------------------------------------
#
# Routine:	showkeys()
#
# Purpose:	This routine goes through the key-related hashes and prints
#		output for them.  It's only done if the appropriate option
#		has been given, blah blah blah.
#
sub showkeys
{
	my $krr;			# Reference to a key's keyrec.

	#
	# Print the information about the KSK keys.
	#
	if($kskflag)
	{
		foreach my $k (sort(keys(%kskkeys)))
		{
			$krr = $kskkeys{$k};
			outkey($k,$krr,"KSK-key\t","KSK");
		}
	}

	#
	# Print the information about the current ZSK keys.
	#
	if($zcurflag)
	{
		foreach my $k (sort(keys(%zcurkeys)))
		{
			$krr = $zcurkeys{$k};
			outkey($k,$krr,"ZSK-cur-key","ZSK-cur");
		}
	}

	#
	# Print the information about the new ZSK keys.
	#
	if($znewflag)
	{
		foreach my $k (sort(keys(%znewkeys)))
		{
			$krr = $znewkeys{$k};
			outkey($k,$krr,"ZSK-new-key","ZSK-new");
		}
	}

	#
	# Print the information about the published ZSK keys.
	#
	if($zpubflag)
	{
		foreach my $k (sort(keys(%zpubkeys)))
		{
			$krr = $zpubkeys{$k};
			outkey($k,$krr,"ZSK-pub-key","ZSK-pub");
		}
	}

	#
	# Print the information about the obsolete ZSK keys.
	#
	if($zobsflag)
	{
		foreach my $k (sort(keys(%zobskeys)))
		{
			$krr = $zobskeys{$k};
			outkey($k,$krr,"ZSK-obs-key","ZSK-obs");
		}
	}

}

#-----------------------------------------------------------------------------
#
# Routine:	expiredzone()
#
# Purpose:	This routine determines if a specified zone has expired or
#		if it's still valid.
#
# Return Values:
#		 1 - the zone has expired
#		 0 - the zone has not expired
#
sub expiredzone
{
	my $zn = shift;				# Zone name to be checked.
	my %zkr;				# Zone keyrec.
	my $zkrref;				# Reference to zone keyrec.

	my $endtime;				# Zone's end-time.
	my $signsecs;				# Zone's signing date.

	my $curtime = time();			# Current time.
	my $secs;				# Seconds in "+nnn" endtime.
	my $finaltime;				# Time zone expires.

	#
	# Get the zone's keyrec.
	#
	$zkrref = $zones{$zn};
	%zkr = %$zkrref;

	#
	# Pull some data from the keyrec.
	#
	$endtime  = $zkr{'endtime'};
	$signsecs = $zkr{'keyrec_signsecs'};

	#
	# Get the number of seconds until the zone's end time.
	#
	if($endtime =~ /^+/)
	{
		$endtime =~ /\+([0-9]+)/;
		$secs = $1;
	}

	#
	# Calculate the zone's expiration date.
	#
	$finaltime = $signsecs + $secs;

	#
	# If the zone has expired, we'll return success.  If not, we'll
	# return failure.
	#
	if($finaltime <= $curtime)
	{
		return(1);
	}

	return(0);
}

#-----------------------------------------------------------------------------
#
# Routine:	refdkey()
#
# Purpose:	This routine determines if a named key is referenced by any
#		zones.  This doesn't distinguish between KSKs and any of the
#		ZSKs.
#
# Return Values:
#		 1 - the key is referenced in a zone
#		 0 - the key is not referenced in a zone
#
sub refdkey
{
	my $kn = shift;			# Key name to be checked.
	my %zkr;			# Zone keyrec.
	my $zkrref;			# Reference to zone keyrec.
	my $zn;				# Zone name.

	#
	# Check each zone to see if it's using this key.
	#
	foreach $zn (keys(%zones))
	{
		$zkrref = $zones{$zn};
		%zkr = %$zkrref;

		if(($zkr{'kskkey'} eq $kn) ||
		   ($zkr{'zskcur'} eq $kn) ||
		   ($zkr{'zsknew'} eq $kn) ||
		   ($zkr{'zskpub'} eq $kn) ||
		   ($zkr{'zskobs'} eq $kn))
		{
			#
			# Found it!  Return success.
			#
			return(1);
		}
	}

	#
	# Didn't find a reference to the key, so we'll return failure.
	#
	return(0);
}

#-----------------------------------------------------------------------------
#
# Routine:	outkey()
#
# Purpose:	This routine performs the actual output operations for key
#		data.  It is called for KSKs and three flavors of ZSK.
#		It handles the referenced-key options, depending on whether
#		or not the specified key is actually referenced.
#
sub outkey
{
	my $k	 = shift;		# Key name.
	my $kkr	 = shift;		# Reference to key's keyrec.
	my $long = shift;		# Long-output label.
	my $reg	 = shift;		# Regular-output label.

	my $datestr = "";		# Key's date.  Or nothing.

	my %kr = %$kkr;			# Key's keyrec.

	#
	# Check if this key is referenced or not.
	#
	if(($refflag   && !refdkey($k)) ||
	   ($unrefflag &&  refdkey($k)))
	{
		return;
	}

	#
	# Bump the matching-records count.
	#
	$count++;

	#
	# Run silent if only the count of matching records should be given.
	#
	if($cntflag)
	{
		return;
	}

	#
	# If -nodate wasn't given, we'll get the key's generation date.
	#
	$datestr = "\"$kr{'keyrec_gendate'}\"" if(!$nodateflag);

	#
	# Give the output line appropriate for output flags.
	#
	if($terse)
	{
		print "$k\n";
	}
	elsif($long)
	{
		my $len = $kr{'ksklength'};		# Key's length.
		$len = $kr{'zsklength'} if(!defined($kr{'ksklength'}));

		print "$long\t$k\t$kr{'zonename'}\t$kr{'algorithm'}\t$len\t$datestr\n";
	}
	else
	{
		print "$reg $k\t$kr{'zonename'}\t\t$datestr\n";
	}
}

#-----------------------------------------------------------------------------
#
# Routine:	usage()
#
sub usage
{
	print STDERR "usage:  lskrf [options] <keyrec-file>\n";
	print STDERR "\trecord-selection options:\n";
	print STDERR "\t\t-all		list all records\n";
	print STDERR "\t\t-zones\t	list all zones\n";
	print STDERR "\t\t-keys		list all keys\n";
	print STDERR "\t\t-ksk		list KSK keys\n";
	print STDERR "\t\t-zsk		list ZSK keys\n";
	print STDERR "\t\t-cur		list current ZSK keys\n";
	print STDERR "\t\t-pub		list published ZSK keys\n";
	print STDERR "\t\t-obs		list obsolete ZSK keys\n";
	print STDERR "\trecord-attribute options:\n";
	print STDERR "\t\t-valid\t	show keyrecs of unexpired zones\n";
	print STDERR "\t\t-expired	show keyrecs of expired zones\n";
	print STDERR "\t\t-ref		show referenced key keyrecs\n";
	print STDERR "\t\t-unref\t	show unreferenced key keyrecs\n";
	print STDERR "\toutput-format options:\n";
	print STDERR "\t\t-count		only give count of matching keyrecs\n";
	print STDERR "\t\t-nodate		do not display date\n";
	print STDERR "\t\t-terse\t	terse output\n";
	print STDERR "\t\t-long		long output\n";
	print STDERR "\t\t-h		help message \n";
	exit(0);
}

1;

##############################################################################
#

=pod

=head1 NAME

lskrf - List the I<keyrec>s in a B<dnssec-tools> I<keyrec> file.

=head1 SYNOPSIS

  lskrf [options] <keyrec-files>

=head1 DESCRIPTION

This script lists the contents of the specified I<keyrec> files.  All
I<keyrec> files are loaded before the output is displayed.  If any I<keyrec>s
have duplicated names, whether within one file or across multiple files, the
later I<keyrec> will be the one whose data are displayed.  The output given
depends on the options selected.

=head1 OPTIONS

B<lskrf> has three types of options it can take:  record-selection options,
record-attribute options, and output-style options.  These option sets are
detailed below.

=head2 Record-Selection Options

These options select the types of I<keyrec> that will be displayed.

=over 4

=item -all

This option displays all the records in a I<keyrec> file.

=item -zones

This option displays the zones in a I<keyrec> file.

=item -keys

This option displays the keys in a I<keyrec> file.

=item -ksk

This option displays the KSK keys in a I<keyrec> file.

=item -zsk

This option displays the ZSK keys in a I<keyrec> file.  It does not include
obsolete ZSK keys; the I<-obs> option must be specified to display obsolete
keys.

=item -cur

This option displays the current ZSK keys in a I<keyrec> file.

=item -new

This option displays the new ZSK keys in a I<keyrec> file.

=item -pub

This option displays the published ZSK keys in a I<keyrec> file.

=item -obs

This option displays the obsolete ZSK keys in a I<keyrec> file.  This option
must be give if obsolete ZSK keys are to be displayed.

=back

=head2 Record-Attribute Options

These options select subsets of the I<keyrec>s chosen by the
record-selection options. 

=over 4

=item -valid

This option displays the valid zones in a I<keyrec> file.
It implies the I<-zones> option.

=item -expired

This option displays the expired zones in a I<keyrec> file.
It implies the I<-zones> option.

=item -ref

This option displays the referenced key I<keyrec>s in a I<keyrec> file.
If no record-selection options were specified, then the I<-keys> option will
be set.

=item -unref

This option displays the unreferenced key I<keyrec>s in a I<keyrec> file.
If no record-selection options were specified, then the I<-keys> option will
be set.

=back

=head2 Output-Format Options

These options define how the I<keyrec> information will be displayed.

Without any of these options, the zone name, zone file, zone-signing date,
and a label will be displayed for zones.  For types, the key name, the key's
zone, the key's generation date, and a label will be displayed if these
options aren't given.

=over 4

=item -count

The count of matching records will be displayed, but the matching records
will not be.

=item -nodate

The key's generation date will not be printed if this flag is given.

=item -long

The long form of output will be given.  For zones, the zone name, the zone
file, the zone's signing date, the zone's expiration date, and a label will
be displayed.  For keys, the key name, the key's zone, the key's encryption
algorithm, the key's length, the key's generation date, and a label are
given.

=item -terse

This options displays only the name of the zones or keys selected by other
options.

=item -help

Display a usage message.

=back

=head1 AUTHOR

Wayne Morrison, tewok@users.sourceforge.net

=head1 SEE ALSO

Net::DNS::SEC::Tools::keyrec.pm(3)

=cut

