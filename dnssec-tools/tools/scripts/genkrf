#!/usr/bin/perl
#
# Copyright 2005-2006 SPARTA, Inc.  All rights reserved.  See the COPYING
# file distributed with this software for details
#
#
# DNSSEC-Tools:  genkrf
#
#	This script generates a keyrec file from existing KSK and/or ZSK keys.
#

use strict;

use Getopt::Long;

use Net::DNS::SEC::Tools::conf;
use Net::DNS::SEC::Tools::defaults;
use Net::DNS::SEC::Tools::keyrec;
use Net::DNS::SEC::Tools::tooloptions;

#######################################################################

#
# Data required for command line options.
#
my $zone;				# Name of the zone
my $zonefile;				# Name of the zone file.
my $signedfile;				# Name of the signed zone file.
my $krfile;				# Name of the output keyrec file.

my $random;				# Name of random device.

my $ksk;				# Name of KSK.
my $zskcur;				# Name of current ZSK.
my $zskpub;				# Name of published ZSK.

my $ksklength;				# Length of KSK.
my $ksklife;				# Lifetime of KSK.
my $zsklength;				# Length of ZSK.
my $zsklife;				# Lifetime of ZSK.

my $helpflag;
my $verbose;

my @opts = (
		"ksk=s",
		"zskcur=s",
		"zskpub=s",
	   );

# A hash mapping algorithm numbers to algorithm names.
my %algos = (
    "001" => "rsa",
    "002" => "dh",
    "003" => "dsa",
    "005" => "rsasha1",
    "157" => "hmac_md5"
);

#######################################################################

my $ret;				# Return code from main().

$ret = main();
exit($ret);

#-----------------------------------------------------------------------------
#
# Routine:	main()
#
sub main()
{
	my $argc = @ARGV;		# Number of command line arguments.
	my $errors = 0;			# Total error count.

	#
	# Parse the command line options.
	#
	doopts();

	# Parse the dnssec-tools.conf file.
	my %dtconf = parseconfig();

	#
	# Initialize a keyrec data structure and add key records to it.
	#
	my $retval = keyrec_creat("$krfile");

	keyrec_read("$krfile");

	# Add the zone keyrec.
	keyrec_add('zone', $zone, {
				   'keyrec_type'	=> "zone",
				   'zonefile'		=> "$zonefile",
				   'signedfile'		=> "$signedfile",
				   'endtime'		=> "",
				   'kskpath'		=> "./$ksk.key",
				   'kskkey'		=> "$ksk",
				   'zskpub'		=> "$zskpub",
				   'zskcur'		=> "$zskcur",
				   'zskcurpath'		=> "./$zskcur.key",
				   'zskpubpath'		=> "./$zskpub.key",
				   'kskdirectory'	=> ".",
				   'zskdirectory'	=> ".",
				   'keyrec_signdate'	=> "",	# XXX to be done
				   'keyrec_signsecs'	=> "",
				   });

	# Add the KSK keyrec.
	keyrec_add('key', $ksk, {
				 'keyrec_type'		=> "ksk",
#				 'zonename'		=> "$zone",
				 'keypath'		=> "./$ksk.key",
				 'algorithm'		=> getkeyalgo($ksk),
				 'random'		=> "$random",
				 'ksklength'		=> "$ksklength",
				 'ksklife'		=> "$ksklife",
				 'keyrec_gendate'	=> "",	# XXX to be done
				 'keyrec_gensecs'	=> "",
				 });

	# Add the current ZSK keyrec.
	keyrec_add('key', $zskcur, {
				    'keyrec_type'	=> "zskcur",
#				    'zonename'		=> "$zone",
				    'keypath'		=> "./$zskcur.key",
				    'algorithm'		=> getkeyalgo($zskcur),
				    'random'		=> "$random",
				    'zsklength'		=> "$zsklength",
				    'zsklife'		=> "$zsklife",
				    'keyrec_gendate'	=> "",	# XXX to be done
				    'keyrec_gensecs'	=> "",
				    });

	# Add the published ZSK keyrec.
	keyrec_add('key', $zskpub, {
				    'keyrec_type'	=> "zskpub",
#				    'zonename'		=> "$zone",
				    'keypath'		=> "./$zskpub.key",
				    'algorithm'		=> getkeyalgo($zskpub),
				    'random'		=> "$random",
				    'zsklength'		=> "$zsklength",
				    'zsklife'		=> "$zsklife",
				    'keyrec_gendate'	=> "",	# XXX to be done
				    'keyrec_gensecs'	=> "",
				    });

	keyrec_write();
	keyrec_close();

	print "genkrf: file $krfile created successfully.\n" if($verbose);
	return(0);
}

#-----------------------------------------------------------------------------
#
# Routine:	doopts()
#
sub doopts()
{
	my $ropts;				# Reference to options hash.
	my %opts = ();				# Options hash.

	#
	# Complain if no arguments or options were given.
	#
	usage(1) if($#ARGV < 0);

	#
	# Slurp up the options.
	#
	$ropts = tooloptions("","",@opts);
	%opts = %$ropts 	if($ropts != undef);

	#
	# Get the arguments.
	#
	$zonefile   = $ARGV[0];
	$signedfile = $ARGV[1]	if($#ARGV > 0);

	#
	# Get the option values.
	#
	$zone	   = $opts{'zone'};
	$ksk	   = $opts{'ksk'};
	$zskcur	   = $opts{'zskcur'};
	$zskpub	   = $opts{'zskpub'};

	$ksklength = $opts{'ksklength'};
	$ksklife   = $opts{'ksklife'};
	$zsklength = $opts{'zsklength'};
	$zsklife   = $opts{'zsklife'};

	$random	   = $opts{'random'};

	$verbose   = $opts{'verbose'};
	$helpflag  = $opts{'help'};

	#
	# Give a usage message, if the conditions are right.
	#
	usage(2) if($helpflag);
	usage(3) if(!$zonefile);
	usage(4) if(!$ksk && !$zskcur && !$zskpub);


	#
	# Get the zone name and signed filename.
	#
	$zone = $zonefile if(!$zone);
	$signedfile = $zonefile . ".signed"		if(!$signedfile);

	#
	# Generate the key names.  We'll also ensure that the ".key"
	# extension wasn't included.
	#
	$ksk = "K$zone.+005+11111"			if(!$ksk);
	$zskcur = "K$zone.+005+22222"			if(!$zskcur);
	$zskpub = "K$zone.+005+33333"			if(!$zskpub);
	$ksk =~ s/\.key$//;
	$zskcur =~ s/\.key$//;
	$zskpub =~ s/\.key$//;

	#
	# Get the defaults/config values for unspecified fields.
	#
	$ksklength = dnssec_tools_defaults("ksklength")	if(!$ksklife);
	$ksklife   = dnssec_tools_defaults("ksklife")	if(!$ksklife);
	$zsklength = dnssec_tools_defaults("zsklength")	if(!$zsklife);
	$zsklife   = dnssec_tools_defaults("zsklife")	if(!$zsklife);


	$zone =~ s/^(.*)\.$/$1/;

	$krfile = $opts{'krfile'} || "$zone.krf";

	#
	# If the verbose flag was given, show all the values.
	#
	if($verbose > 1)
	{
		print "zonefile   - \"$zonefile\"\n";
		print "signedfile - \"$signedfile\"\n";
		print "krfile     - \"$krfile\"\n\n";
		print "zone       - \"$zone\"\n";
		print "random     - \"$random\"\n\n";
		print "ksk        - \"$ksk\"\n";
		print "zskcur     - \"$zskcur\"\n";
		print "zskpub     - \"$zskpub\"\n\n";
		print "ksklength  - \"$ksklength\"\n";
		print "ksklife    - \"$ksklife\"\n";
		print "zsklength  - \"$zsklength\"\n";
		print "zsklife    - \"$zsklife\"\n\n";
	}

}

#-----------------------------------------------------------------------------
#
# Routine:      getkeyalgo()
#
# Purpose:      This routine takes the identification string of the key
#               generated by dnssec-keygen as a parameter and returns the
#               name of the algorithm for that key.
#
#               The identification string of the key has the following format:
#
#                     Knnnn.+aaa+iiiii
#
#               where:
#
#                     nnnn is the key name
#                     aaa  is the numeric representation of the algorithm
#                 and iiiii is the key identifier (or footprint)
#
sub getkeyalgo
{
	my $key = shift;
	my $algonum = $key;

	$algonum =~ s/^[^\+]*\+([^+]*)\+.*$/$1/g;
	return($algos{$algonum});
}

#-----------------------------------------------------------------------------
#
# Routine:	usage()
#
sub usage
{
	my $code = shift;

	#
	#  Uncomment this line if you need to find where usage() was called.
	#
#	print STDERR "called from $code\n\n" if($code > 0);

	print STDERR "usage:  genkrf [options] zonefile signed-zonefile\n";
	print STDERR "\toptions:\n";
	print STDERR "\t\t-krfile keyrec-file\n";
	print STDERR "\t\t-zone zone\n";
	print STDERR "\t\t-ksk keyname\n";
	print STDERR "\t\t-zskcur keyname\n";
	print STDERR "\t\t-zskpub keyname\n";
	print STDERR "\t\t-zonefile zonefile\n";
	print STDERR "\t\t-signedfile file\n";
	print STDERR "\t\t-ksklength length\n";
	print STDERR "\t\t-ksklife lifespan\n";
	print STDERR "\t\t-zsklength length\n";
	print STDERR "\t\t-zsklife lifespan\n";
	print STDERR "\t\t-random random-device\n";
	print STDERR "\t\t-verbose\n";
	print STDERR "\t\t-help\n";
	exit(0);
}

1;

##############################################################################
#

=pod

=head1 NAME

genkrf - Generate a I<keyrec> file from existing Key Signing Key (KSK)
         and/or Zone Signing Key (ZSK) files.

=head1 SYNOPSIS

  genkrf [options] <zone-file> [<signed-zone-file>]

  genkrf -help

=head1 DESCRIPTION

This script generates a I<keyrec> file from existing KSK and/or ZSK files.  If
the I<keyrec> file already exists, the I<keyrec> definitions corresponding to
the new keys will be added to it.

The I<zone-file> argument is required.  It specifies the name of the zone
file from which the signed zone file was created.  The optional
I<signed-zone-file> argument specifies the name of the signed zone file.
If it is not given, then it defaults to "I<<zone-file>>.signed".

=head1 OPTIONS

B<genkrf> has the following options:

=over 4

=item -krfile

This option specifies the name of I<keyrec> file that will be created by
I<genkrf>.

=item -zone

This option specifies the name of the zone.  If it is not given then
I<zone-file> will be used as the name of the zone.

=item -ksk

This option specifies the KSK being used to sign the zone.  If this option is
not given, a new KSK will be created.  The ".key" suffix does not need to be
included.

=item -zskcur

This option specifies the current ZSK being used to sign the zone.  If this
option is not given, a new ZSK will be created.  The ".key" suffix does not
need to be included.

=item -zskpub

This option specifies the published ZSK for the zone.  If this option is not
given, a new ZSK will be created.  The ".key" suffix does not need to be
included.

=item -ksklength

This option specifies the length of the KSK.

=item -ksklife

This option specifies the time between KSK roll-overs.  This time is measured
in seconds.

=item -zsklength

This option specifies the length of the KSK.

=item -zsklife

This option specifies the time between ZSK roll-overs.  This time is measured
in seconds.

=item -random

This option specifies the random number generator device.

=item -verbose

Increases the verbosity level of output.  Without this option, no output is
given on a successful execution.  If this option is given once or twice, then
an indicator is given that a successful execution has completed.  If it is
given twice, then the values to be used in constructing a I<keyrec> file are
displayed.

=item -help

Display a usage message.

=back

At least one of I<-ksk>, I<-zskcur> or I<-zskpub> options B<must> be present.

=head1 COPYRIGHT

Copyright 2005-2006 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the DNSSEC-Tools package for details.

=head1 AUTHOR

Abhijit Hayatnagarkar

=head1 SEE ALSO

B<Net::DNS::SEC::Tools::defaults.pm(3)>,
B<Net::DNS::SEC::Tools::keyrec.pm(3)>

B<zonesigner(8)>

=cut
