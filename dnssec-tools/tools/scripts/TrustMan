#!/usr/bin/perl
#
# Copyright 2004-2006 SPARTA, Inc.  All rights reserved.  See the COPYING
# file distributed with this software for details
#

use Net::DNS;
use Net::DNS::SEC;
use Net::DNS::SEC::Tools::conf;
use Net::SMTP;
use Getopt::Long;
use Sys::Syslog;
use IO::File;

########################################################
# Defaults

my %opts = (
        t => 3600, # default to one hour
        v => 1,
        c => 0
);

########################################################
# main

# Parse command-line options
GetOptions(\%opts,
             'd|domain=s',
             't|sleeptime=i',
             'v|verbose',
             'f|foreground|fg',
             'c|config',
             'o|outfile=s',
             's|smtp_server=s',
             'n|named_conf_file=s',
             'k|dnsval_conf_file=s',
             'L|syslog',
             'p|print',
             'N|no_error',
             'm|mail_contact_addr=s');

# Parse the dnssec-tools.conf file
my %dtconf = parseconfig();

# then $dtconf{'name_of_option_in_dnssec-tools.conf'}
# contains the value of that option as set in the conf file

my $ncfile = $opts{'n'} ? $opts{'n'}
                        : $dtconf{'tanamedconffile'};

my $dvfile = $opts{'k'} ? $opts{'k'}
                        : $dtconf{'tadnsvalconffile'};

my $contactaddr = $opts{'m'} ? $opts{'m'}
                             : $dtconf{'tacontact'};

my $smtpserver =  $opts{'s'} ? $opts{'s'}
                             : $dtconf{'tasmtpserver'};

my $sleeptime = $opts{'t'} ? $opts{'t'}
                           : $dtconf{'tasleeptime'};

if ((!$contactaddr) && (!$opts{'L'}) && (!$opts{'p'})) {
    usage();
}

if ($opts{'f'}) {
    &checkkeys;
} elsif ($opts{'c'}) {
    my $conffile = getconffile();
    open(CONF,$conffile) or die "unable to open \"$conffile\".";
    usage () unless $opts{'o'};
    open(OUT,">$opts{'o'}") or die "unable to open \"$opts{'o'}\" for writing.";
    while(<CONF>) {
        if (/^tasleeptime/ && ($opts{'t'})) {
            print OUT "tasleeptime\t" . $sleeptime . "\n";
            next;
        }
        if (/^tasmtpserver/ && ($opts{'s'})) {
            print OUT "tasmtpserver\t" . $smtpserver . "\n";
            next;
        }
        if (/^tacontact/ && ($opts{'m'})) {
            print OUT "tacontact\t" . $contactaddr . "\n";
            next;
        }
        if (/^tanamedconffile/ && ($opts{'n'})) {
            print OUT "tanamedconffile\t" . $ncfile . "\n";
            next;
        }
        if (/^tadnsvalconffile/ && ($opts{'k'})) {
            print OUT "tadnsvalconffile\t" . $dvfile . "\n";
            next;
        }
        print OUT $_;
    }
    close (OUT);
    close (CONF);

} else {
    &daemonize;
    while (1) {
        &checkkeys;
        sleep($sleeptime);
    }
} 

sub usage {
    print "TrustMan [-d domain] [-L] [-f] [-c] [-v]\n";
    print "\t[-o outfile] [-m mailcontact] [-s smtpserver]";
    print "\t[-t secs] [-n named_conf_file] [-k dnsval_conf_file]";
    print "\tuse the -f option to run in the foreground.\n";
    print "\tUse -L to log to syslog; this can be in addition to mail.\n";
    print "\tIf a domain is not specified, all domains in the key_containing_files will be checked.\n";
    print "\tIf no key_containing_files are specified, dnssec-tools.conf will be
parsed for appropriate files.\n";
    print "\tWhen running the configure option (-c or --config), you MUST specify an output file (-o).\n";
    exit(1);
}

sub checkkeys {
    my %keystorage;
    my @baddomains;
    my @gooddomains;
    my @domains;
    push @domains, $opts{'d'} if ($opts{'d'});
    my $res = Net::DNS::Resolver->new;
    # needed to ensure that +dnssec is used on subsequent queries
    my $setdnssec = $res->dnssec(1);
    
    read_named_conf_file(\%keystorage, $ncfile) if ($ncfile);
    read_dnsval_conf_file(\%keystorage, $dvfile) if ($dvfile);

# if a domain is specified on the command line, we will only
# check that domain. Otherwise, check all domains found in config files.
    if (!exists ($domains[0])) {
        foreach my $k (keys(%keystorage)) {
            push @domains, $k;
        }
    }
    
    if (!@domains) {
        print "No domains to check, exiting....\n";
        exit(1);
    }

    foreach my $d (@domains) {
        my $query = $res->query($d,"DNSKEY");

        if ($query) {
            foreach my $keyrec (grep { $_->type eq 'DNSKEY' } $query->answer) {
                next if (!($keyrec->flags & 1));
                my $key = $keyrec->key;
                $key =~ s/\s+//g; # remove all spaces   
                $nonmatch = compare_keys(\%keystorage, $d, $keyrec, $key);
                if ($nonmatch) {
                    push @baddomains, $d;
                } else {
                    push @gooddomains, $d;
                }
            }
        } else {
            print "query failed for domain " . $d . ": " . $res->errorstring . "\n";
        }
    }
    if (@baddomains) {
        if ($contactaddr) { # mail it
            mailcontact(0,$smtpserver,$contactaddr,@baddomains);
        }
        foreach my $d (@baddomains) {
            if ($opts{'L'}) { # log it to syslog
                openlog('TrustMan','pid','user') || warn "could not open syslog";
                syslog('warning', %s, "DNSKEY mismatch for zone $d");
                closelog();
            }
            if ($opts{'p'}) {
                # write to stdout
                print "DNSKEY mismatch for zone $d\n";
            }
        }
    } elsif ($opts{'N'}) {
        if ($contactaddr) { # mail it
            mailcontact(1,$smtpserver,$contactaddr,@domains);
        }
        foreach my $d (@gooddomains) {
            if ($opts{'L'}) { # log it to syslog
                openlog('TrustMan','pid','user') || warn "could not open syslog";
                syslog('warning', %s, "DNSKEY okay for zone $d");
                closelog();
            }
            if ($opts{'p'}) {
                # write to stdout
                print "DNSKEY okay for zone $d\n";
            }
        }
    }
        
}

#######################################################################
# read_named_conf_file()
#
# reads in a named.conf file pointed to by $file and stores key
# information in $storage
#
sub read_named_conf_file {
    my ($storage, $file) = @_;
    Verbose("reading and parsing trust keys from $file\n");
    # regexp pulled from Fast.pm
    my $pat_maybefullname = qr{[-\w\$\d*]+(?:\.[-\w\$\d]+)*\.?};

    my $fh = new IO::File;
    if (!$fh->open("<$file")) {
	print STDERR "Could not open named configuration file: $file\n";
	exit 1;
    }
    while (<$fh>) {
	if (/trusted-keys {/) {
	    while (<$fh>) {
		last if (/^\s*};/);
		if (/\s*($pat_maybefullname)\s+(256|257)\s+(\d+)\s+(\d+)\s+\"(.+)\"\s*;/) {
		    push @{$storage->{$1}},
		      { flags => $2,
			protocol => $3,
			algorithm => $4,
			key => $5 };
		    $storage->{$1}[$#{$storage->{$1}}]{key} =~ s/\s+//g;
		}
	    }
	}
    }
    $fh->close;
}
#######################################################################
# read_dnsval_conf_file()
#
# reads in a dnsval.conf file pointed to by $file and stores key
# information in $storage
#
sub read_dnsval_conf_file {
    my ($storage, $file) = @_;
    Verbose("reading and parsing trust keys from $file\n");
    # regexp pulled from Fast.pm
    my $pat_maybefullname = qr{[-\w\$\d*]+(?:\.[-\w\$\d]+)*\.?};

    my $fh = new IO::File;
    if (!$fh->open("<$file")) {
	print STDERR "Could not open dnsval configuration file: $file\n";
	exit 1;
    }
    while (<$fh>) {
	if (/trust-anchor/) {
	    while (<$fh>) {
		if (/\s*($pat_maybefullname)\s+\"(256|257)\s+(\d+)\s+(\d+)\s+(.+)\"\s*/) {
		    push @{$storage->{$1}},
		      { flags => $2,
			protocol => $3,
			algorithm => $4,
			key => $5 };
		    $storage->{$1}[$#{$storage->{$1}}]{key} =~ s/\s+//g;
		}
	    }
	}
    }
    $fh->close;
}

######################################################################
# mailcontact()
#  - emails a contact address with the error output
sub mailcontact {
    my ($ok,$smtp,$contact,@domains) = @_;
    my $fromaddr = 'TrustMan@localhost';

    # set up the SMTP object and required data
    my $message = Net::SMTP->new($smtp) || die "failed to create smtp message";
    $message->mail($fromaddr);
    $message->to(split(/,\s*/,$contact));
    $message->data();

    # create headers
    $message->datasend("To: " . $contact . "\n");
    $message->datasend("From: " . $fromaddr . "\n");

    # create the body of the message: the warning
    if ($ok) {
        $message->datasend("Subject: TrustMan all clear\n\n");
        $message->datasend("TrustMan detected no DNSKEY mismatches for the following zones: \n\n");
    } else {
        $message->datasend("Subject: TrustMan warning -- DNSKEY mismatches\n\n");
        $message->datasend("TrustMan has detected DNSKEY mismatches for the following zones: \n\n");
    }
    foreach my $d (@domains) {
        $message->datasend("\t" . $d . "\n");
    }
    if (!$ok) {
        $message->datasend("\n\nYou should verify mismatched keys manually.\n\n");
    }

    # finish and send the message
    $message->dataend();
    $message->quit;
}

#######################################################################
# compare_keys()
#
# compares the contents of two keys to see if the new one ($domain,
# $rec, and $keyin) matches the cached one previously remembered (in
# $storage->{$domain} )
#
sub compare_keys {
    my ($storage, $domain, $rec, $keyin) = @_;
    if (!exists($storage->{$domain})) {
# What would nonexistence of this really mean?
#	print STDERR "  Found a key for $domain; previously we had none cached\n";
    }
    my $keys = $storage->{$domain};
    foreach my $key (@$keys) {
	if ($key->{'flags'} eq $rec->flags &&
	    $key->{'protocol'} eq $rec->protocol &&
	    $key->{'algorithm'} eq $rec->algorithm &&
	    $key->{'key'} eq $keyin) {
	    # the key exactly matches a stored key
	    $key->{'found'} = 1;
	    return 0;
	}
    }
    return 1;
}

#######################################################################
# Verbose()
#
# prints something(s) to STDERR only if -v was specified.
#
sub Verbose {
    print STDERR @_ if ($opts{'v'});
}

####################################################################
# daemonize
# 
# run as a daemon

sub daemonize {
  chdir '/' or die "Can't chdir to /: $!";
  open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
#open STDOUT, '>/dev/null' or die "Can't write to /dev/null: $!";
  open STDERR, '>/dev/null' or die "Can't write to /dev/null: $!";
  defined(my $pid = fork) or die "Can't fork: $!";
  exit if $pid;
  setsid or die "Can't start a new session: $!";
  umask 0;
}

####################################################################
# tmprint
#
# print to appropriate source
# may be syslog or a file

sub tmprint {
    my $str = shift;
    if ($opts{'l'}) {
    } else {
        print "$out\n";
    }
}

#######################################################################
# Getopt::GUI::Long portability
#
# will be used in a near-future version

sub LocalGetOptions {
    if (eval {require Getopt::GUI::Long;}) {
	require Getopt::Long;
	import Getopt::GUI::Long;
	Getopt::GUI::Long::Configure(qw(display_help no_ignore_case));
	return GetOptions(@_);
    }
    require Getopt::Long;
    import Getopt::Long;
    Getopt::Long::Configure(qw(auto_help no_ignore_case));
    GetOptions(LocalOptionsMap(@_));
}

sub LocalOptionsMap {
    my ($st, $cb, @opts) = ((ref($_[0]) eq 'HASH') 
			    ? (1, 1, $_[0]) : (0, 2));
    for (my $i = $st; $i <= $#_; $i += $cb) {
	if ($_[$i]) {
	    next if (ref($_[$i]) eq 'ARRAY' && $_[$i][0] =~ /^GUI:/);
	    push @opts, ((ref($_[$i]) eq 'ARRAY') ? $_[$i][0] : $_[$i]);
	    push @opts, $_[$i+1] if ($cb == 2);
	}
    }
    return @opts;
}

=head1 NAME

TrustMan - manage keys used as trust anchors

=head1 SYNOPSIS

TrustMan [options]

=head1 DESCRIPTION

TrustMan runs by default as a daemon to verify if keys stored locally
in configuration files like named.conf still match the same keys
as fetched from the zone where they are defined. If mismatches
are detected, the daemon notifies the contact person defined in
the config file or on the command line by mail.

This script can also be run in the foreground (-f) to run this same check once
manually.

This script can also be used to set up configuration data in the file
dnssec-tools.conf for later use by the daemon, making fewer command
line arguments necessary. Configuration data is stored in dnssec-tools.conf.
The current version requires you to edit dnssec-tools.conf by hand and
supply values for the contact person email address (tacontact) and the
SMTP server (tasmtpserver). Also edit the location of named.conf and
dnsval.conf in that file if necessary.

=head1 OPTIONS

=over #indent

=item -f

Run in the foreground

=item -c

Create a configure file for TrustMan from the command line options given.

=item -o

Output file for configuration

=item -k 

A dnsval.conf file to read

=item -n 

A named.conf file to read

=item -d

The domain to check (supersedes configuration file)

=item -t

The number of seconds to sleep between checks. Default is 3600 (one hour)

=item -m

Mail address for the contact person to whom reports should be sent

=item -p

Log messages to stdout.

=item -L

Log messages to syslog.

=item -s

SMTP server TrustMan should use to send reports

=item -N

Send report when there are no errors.

=item -v

Verbose.

=back #unindent
=head1 PRE-REQUISITES

=head1 COPYRIGHT

Copyright 2006 SPARTA, Inc.  All rights reserved.
See the COPYING file included with the DNSSEC-Tools package for details.

=cut
